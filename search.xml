<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Gorm学习</title>
    <url>/2021/03/19/Gorm%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<p>​        Gorm是一个使用Go语言编写的ORM框架。它文档(多语种)齐全，对开发者友好。支持主流关系型数据库(支持SQL语句)，入MySQL,MSSQL,PostgreSQL等。使用Gorm秩序简单的几个函数调用就可实现对数据库复杂操作，极大的提高开发效率，降低开发门槛。</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9nb3JtLmlvLw==" title="https://gorm.io/">官网连接<i class="fa fa-external-link"></i></span></p>
<span id="more"></span>

<h1 id="1-什么是ORM？"><a href="#1-什么是ORM？" class="headerlink" title="1.什么是ORM？"></a>1.什么是ORM？</h1><p><strong>Object Relation Mapping（关系对象映射）</strong></p>
<p>​        把对象模型表示的对象映射到基于SQL的关系模型数据库结构中，在具体的操作实体对象的时候，不需要直接与复杂的 SQL语句打交道，只需简单的操作实体对象的属性和方法，对于开发者更加友好，不必学习sql语句就可以方便地进行数据库的使用。对于一些中小型项目，使用ORM可以极大的提高开发效率，降低开发门槛。另外，也能在一定程度上防止sql注入。</p>
<p>​    相应的也要以牺牲执行能力，牺牲灵活性，弱化SQL能力作为为代价。对于三高开发，并不推荐使用。</p>
<h1 id="2-Gorm特性"><a href="#2-Gorm特性" class="headerlink" title="2.Gorm特性"></a>2.Gorm特性</h1><ul>
<li>全功能 ORM</li>
<li>关联 (Has One，Has Many，Belongs To，Many To Many，多态，单表继承)</li>
<li>Create，Save，Update，Delete，Find 中钩子方法</li>
<li>支持 <code>Preload</code>、<code>Joins</code> 的预加载</li>
<li>事务，嵌套事务，Save Point，Rollback To Saved Point</li>
<li>Context、预编译模式、DryRun 模式</li>
<li>批量插入，FindInBatches，Find/Create with Map，使用 SQL 表达式、Context Valuer 进行 CRUD</li>
<li>SQL 构建器，Upsert，数据库锁，Optimizer/Index/Comment Hint，命名参数，子查询</li>
<li>复合主键，索引，约束</li>
<li>Auto Migration</li>
<li>自定义 Logger</li>
<li>灵活的可扩展插件 API：Database Resolver（多数据库，读写分离）、Prometheus…</li>
</ul>
<h1 id="3-简单入门-MySql版"><a href="#3-简单入门-MySql版" class="headerlink" title="3.简单入门(MySql版)"></a>3.简单入门(MySql版)</h1><h2 id="安装包"><a href="#安装包" class="headerlink" title="安装包"></a>安装包</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">go</span> get -u gorm.io/gorm</span><br><span class="line"><span class="keyword">go</span> get gorm.io/driver/mysql</span><br></pre></td></tr></table></figure>

<h2 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h2><p>根据官网代码修改的MySql数据库快速入门代码</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">  <span class="string">&quot;gorm.io/gorm&quot;</span></span><br><span class="line">  <span class="string">&quot;gorm.io/driver/sqlite&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 连接mysql所需信息</span></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">  <span class="comment">// 用户</span></span><br><span class="line">  user <span class="keyword">string</span> = <span class="string">&quot;root&quot;</span></span><br><span class="line">  <span class="comment">// 密码</span></span><br><span class="line">  pwd <span class="keyword">string</span> = <span class="string">&quot;123456&quot;</span></span><br><span class="line">  <span class="comment">// ip地址 带端口号</span></span><br><span class="line">  addr <span class="keyword">string</span> = <span class="string">&quot;localhost:3306&quot;</span></span><br><span class="line">  <span class="comment">// 数据库名</span></span><br><span class="line">  dbName <span class="keyword">string</span> = <span class="string">&quot;chart_room&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Product <span class="keyword">struct</span> &#123;</span><br><span class="line">  <span class="comment">// 官方提供的Model 作为匿名字段  包含 ID CreatedAt UpdatedAt DeletedAt四个字段</span></span><br><span class="line">  <span class="comment">// 其中ID为默认主键  DeleteAt 默认添加索引</span></span><br><span class="line">  gorm.Model</span><br><span class="line">  Code  <span class="keyword">string</span></span><br><span class="line">  Price <span class="keyword">uint</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  <span class="comment">// parseTime 查询结果是否自动解析为时间 Loc为时区设置</span></span><br><span class="line">  dsn := fmt.Sprintf(<span class="string">&quot;%s:%s@tcp(%s)/%s?charset=utf8mb4&amp;parseTime=True&amp;loc=Local&quot;</span>,</span><br><span class="line">    user, pwd, addr, dbName)</span><br><span class="line">    <span class="comment">// 连接数据库</span></span><br><span class="line">  db, err := gorm.Open(mysql.Open(dsn), &amp;gorm.Config&#123;&#125;)</span><br><span class="line">  <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">      <span class="comment">// 连接失败</span></span><br><span class="line">    <span class="built_in">panic</span>(<span class="string">&quot;failed to connect database&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 迁移 schema</span></span><br><span class="line">  <span class="comment">// 执行后如果数据库该表会自动创建相应的表</span></span><br><span class="line">  <span class="comment">// 表名为小写结构体名加s  表信息可以在后面查看</span></span><br><span class="line">  <span class="comment">// 有两个单词时 默认用下划线连接</span></span><br><span class="line">  db.AutoMigrate(&amp;Product&#123;&#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Create</span></span><br><span class="line">  <span class="comment">// 向数据库中添加一条记录</span></span><br><span class="line">  db.Create(&amp;Product&#123;Code: <span class="string">&quot;D42&quot;</span>, Price: <span class="number">100</span>&#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Read</span></span><br><span class="line">  <span class="keyword">var</span> product Product</span><br><span class="line">  db.First(&amp;product, <span class="number">1</span>) <span class="comment">// 根据整形主键查找 查找结果保存在product中</span></span><br><span class="line">  db.First(&amp;product, <span class="string">&quot;code = ?&quot;</span>, <span class="string">&quot;D42&quot;</span>) <span class="comment">// 查找 code 字段值为 D42 的记录</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Update - 将 product 的 price 更新为 200</span></span><br><span class="line">  db.Model(&amp;product).Update(<span class="string">&quot;Price&quot;</span>, <span class="number">200</span>)</span><br><span class="line">  <span class="comment">// Update - 更新多个字段</span></span><br><span class="line">  db.Model(&amp;product).Updates(Product&#123;Price: <span class="number">200</span>, Code: <span class="string">&quot;F42&quot;</span>&#125;) <span class="comment">// 仅更新非零值字段</span></span><br><span class="line">  db.Model(&amp;product).Updates(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;&#123;<span class="string">&quot;Price&quot;</span>: <span class="number">200</span>, <span class="string">&quot;Code&quot;</span>: <span class="string">&quot;F42&quot;</span>&#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Delete - 删除 product  根据主键</span></span><br><span class="line">  db.Delete(&amp;product, <span class="number">1</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Gorm模型"><a href="#Gorm模型" class="headerlink" title="Gorm模型"></a>Gorm模型</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Model可以直接作为字段添加到我们的结构体中，加速开发 </span></span><br><span class="line"><span class="keyword">type</span> Model <span class="keyword">struct</span> &#123;</span><br><span class="line">    <span class="comment">// ID默认为主键</span></span><br><span class="line">  ID        <span class="keyword">uint</span> <span class="string">`gorm:&quot;primarykey&quot;`</span></span><br><span class="line">  CreatedAt time.Time</span><br><span class="line">  UpdatedAt time.Time</span><br><span class="line">    <span class="comment">// DeletedAt默认创建索引 允许重复</span></span><br><span class="line">  DeletedAt DeletedAt <span class="string">`gorm:&quot;index&quot;`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="创建表的信息"><a href="#创建表的信息" class="headerlink" title="创建表的信息"></a>创建表的信息</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">desc</span> products;</span><br><span class="line"><span class="operator">+</span><span class="comment">------------+-----------------+------+-----+---------+----------------+</span></span><br><span class="line"><span class="operator">|</span> Field      <span class="operator">|</span> Type            <span class="operator">|</span> <span class="keyword">Null</span> <span class="operator">|</span> Key <span class="operator">|</span> <span class="keyword">Default</span> <span class="operator">|</span> Extra          <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------+-----------------+------+-----+---------+----------------+</span></span><br><span class="line"><span class="operator">|</span> id         <span class="operator">|</span> <span class="type">bigint</span> unsigned <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span> PRI <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span> auto_increment <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> created_at <span class="operator">|</span> datetime(<span class="number">3</span>)     <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> updated_at <span class="operator">|</span> datetime(<span class="number">3</span>)     <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> deleted_at <span class="operator">|</span> datetime(<span class="number">3</span>)     <span class="operator">|</span> YES  <span class="operator">|</span> MUL <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> code       <span class="operator">|</span> longtext        <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> price      <span class="operator">|</span> <span class="type">bigint</span> unsigned <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------+-----------------+------+-----+---------+----------------+</span></span><br></pre></td></tr></table></figure>

<h2 id="常用指令"><a href="#常用指令" class="headerlink" title="常用指令"></a>常用指令</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 自定义表名创建表</span></span><br><span class="line">db.Table(tableName).creatTable(&amp;Product&#123;&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建记录并更新给出的字段。</span></span><br><span class="line">db.Select(<span class="string">&quot;Name&quot;</span>, <span class="string">&quot;Age&quot;</span>, <span class="string">&quot;CreatedAt&quot;</span>).Create(&amp;user)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据id更新，即使是零值也会修改</span></span><br><span class="line">db.Save(&amp;user)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Email 的 ID 是 `10`</span></span><br><span class="line">db.Delete(&amp;email)</span><br><span class="line"><span class="comment">// DELETE from emails where id = 10;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 带额外条件的删除</span></span><br><span class="line">db.Where(<span class="string">&quot;name = ?&quot;</span>, <span class="string">&quot;jinzhu&quot;</span>).Delete(&amp;email)</span><br><span class="line"><span class="comment">// DELETE from emails where id = 10 AND name = &quot;jinzhu&quot;;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据主键删除数据</span></span><br><span class="line">db.Delete(&amp;User&#123;&#125;, <span class="number">10</span>)</span><br><span class="line"><span class="comment">// DELETE FROM users WHERE id = 10;</span></span><br><span class="line"></span><br><span class="line">db.Delete(&amp;User&#123;&#125;, <span class="string">&quot;10&quot;</span>)</span><br><span class="line"><span class="comment">// DELETE FROM users WHERE id = 10;</span></span><br><span class="line"></span><br><span class="line">db.Delete(&amp;users, []<span class="keyword">int</span>&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;)</span><br><span class="line"><span class="comment">// DELETE FROM users WHERE id IN (1,2,3);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 查询软删除的数据</span></span><br><span class="line">db.Unscoped().Where(<span class="string">&quot;age = 20&quot;</span>).Find(&amp;users)</span><br><span class="line"><span class="comment">// SELECT * FROM users WHERE age = 20;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 永久删除</span></span><br><span class="line">db.Unscoped().Delete(&amp;order)</span><br><span class="line"><span class="comment">// DELETE FROM orders WHERE id=10;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="常用的结构体标记-tag"><a href="#常用的结构体标记-tag" class="headerlink" title="常用的结构体标记(tag)"></a>常用的结构体标记(tag)</h2><table>
<thead>
<tr>
<th align="center">结构体标记（Tag）</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">Column</td>
<td align="center">指定列名</td>
</tr>
<tr>
<td align="center">Type</td>
<td align="center">指定列数据类型</td>
</tr>
<tr>
<td align="center">Size</td>
<td align="center">指定列大小, 默认值255</td>
</tr>
<tr>
<td align="center">PRIMARY_KEY</td>
<td align="center">将列指定为主键</td>
</tr>
<tr>
<td align="center">UNIQUE</td>
<td align="center">将列指定为唯一</td>
</tr>
<tr>
<td align="center">DEFAULT</td>
<td align="center">指定列默认值</td>
</tr>
<tr>
<td align="center">PRECISION</td>
<td align="center">指定列精度</td>
</tr>
<tr>
<td align="center">NOT NULL</td>
<td align="center">将列指定为非 NULL</td>
</tr>
<tr>
<td align="center">AUTO_INCREMENT</td>
<td align="center">指定列是否为自增类型</td>
</tr>
<tr>
<td align="center">INDEX</td>
<td align="center">创建具有或不带名称的索引, 如果多个索引同名则创建复合索引</td>
</tr>
<tr>
<td align="center">UNIQUE_INDEX</td>
<td align="center">和 <code>INDEX</code> 类似，只不过创建的是唯一索引</td>
</tr>
<tr>
<td align="center">EMBEDDED</td>
<td align="center">将结构设置为嵌入</td>
</tr>
<tr>
<td align="center">EMBEDDED_PREFIX</td>
<td align="center">设置嵌入结构的前缀</td>
</tr>
<tr>
<td align="center">-</td>
<td align="center">忽略此字段</td>
</tr>
</tbody></table>
]]></content>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>Go中的空结构体</title>
    <url>/2021/05/11/Go%E4%B8%AD%E7%9A%84%E7%A9%BA%E7%BB%93%E6%9E%84%E4%BD%93/</url>
    <content><![CDATA[<p>&emsp;Golang 正常的 <code>struct</code> 就是普通的一个内存块，必定是占用一小块内存的，并且结构体的大小是要经过边界，长度的对齐的。然而，对于<code>struct&#123;&#125;</code>，Golang中的空结构体，却有着自己独特的特性。</p>
<span id="more"></span>

<h1 id="空结构体的大小"><a href="#空结构体的大小" class="headerlink" title="空结构体的大小"></a>空结构体的大小</h1><p>&emsp;&emsp;在golang中我们常使用<code>unsafe.Sizeof</code>查看变量的字节大小。如下代码使用<code>unsafe.Sizeof</code>查看空struct的大小。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  fmt.Println(unsafe.Sizeof(<span class="keyword">struct</span>&#123;&#125;&#123;&#125;))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果如下：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">&gt; <span class="keyword">go</span> run  .\main.<span class="keyword">go</span></span><br><span class="line"><span class="number">0</span></span><br></pre></td></tr></table></figure>

<p>也就是说结空结构体是不占空间的。</p>
<p>原理说明：空结构体内存分配时候都会指向一个zerobase的8字节uinptr型全局变量。</p>
<p>可以创建多个空结构体答应地址，会发向他们有相同的地址。</p>
<h1 id="空结构体的作用"><a href="#空结构体的作用" class="headerlink" title="空结构体的作用"></a>空结构体的作用</h1><p>&emsp;&emsp;&emsp;在Golang中即使是布尔型变量也会占用一个字节的空间，基于空结构体不占用存储空间的特性，我们往往用它来节省内存空间(或者说空结构体设计的初衷就是节省空间)。</p>
<h2 id="用在不传递数据的通道中"><a href="#用在不传递数据的通道中" class="headerlink" title="用在不传递数据的通道中"></a>用在不传递数据的通道中</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">worker</span><span class="params">(ch <span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line">  &lt;-ch</span><br><span class="line">  fmt.Println(<span class="string">&quot;do something&quot;</span>)</span><br><span class="line">  <span class="built_in">close</span>(ch)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;)</span><br><span class="line">  <span class="keyword">go</span> worker(ch)</span><br><span class="line">  ch &lt;- <span class="keyword">struct</span>&#123;&#125;&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="用在map中"><a href="#用在map中" class="headerlink" title="用在map中"></a>用在map中</h2><p>&emsp;&emsp;可以用在map中，利用map模拟集合。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Set <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s Set)</span> <span class="title">Has</span><span class="params">(key <span class="keyword">string</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">  _, ok := s[key]</span><br><span class="line">  <span class="keyword">return</span> ok</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s Set)</span> <span class="title">Add</span><span class="params">(key <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">  s[key] = <span class="keyword">struct</span>&#123;&#125;&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s Set)</span> <span class="title">Delete</span><span class="params">(key <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">  <span class="built_in">delete</span>(s, key)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  s := <span class="built_in">make</span>(Set)</span><br><span class="line">  s.Add(<span class="string">&quot;Tom&quot;</span>)</span><br><span class="line">  s.Add(<span class="string">&quot;Sam&quot;</span>)</span><br><span class="line">  fmt.Println(s.Has(<span class="string">&quot;Tom&quot;</span>))</span><br><span class="line">  fmt.Println(s.Has(<span class="string">&quot;Jack&quot;</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="用于函数的管理"><a href="#用于函数的管理" class="headerlink" title="用于函数的管理"></a>用于函数的管理</h2><p>&emsp;&emsp;可以将各种函数根据一定的规则分类，同一类方法作为空结构体的方法统一管理。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Door <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(d Door)</span> <span class="title">Open</span><span class="params">()</span></span> &#123;</span><br><span class="line">  fmt.Println(<span class="string">&quot;Open the door&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(d Door)</span> <span class="title">Close</span><span class="params">()</span></span> &#123;</span><br><span class="line">  fmt.Println(<span class="string">&quot;Close the door&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="一段神奇的代码"><a href="#一段神奇的代码" class="headerlink" title="一段神奇的代码"></a>一段神奇的代码</h1><p>&emsp;&emsp;直接看代码</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">  Name <span class="keyword">string</span></span><br><span class="line">  Age  <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> PersonI <span class="keyword">struct</span> &#123;</span><br><span class="line">  _    <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line">  Name <span class="keyword">string</span></span><br><span class="line">  Age  <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> PersonII <span class="keyword">struct</span> &#123;</span><br><span class="line">  Name <span class="keyword">string</span></span><br><span class="line">  Age  <span class="keyword">int</span></span><br><span class="line">  _    <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  fmt.Println(unsafe.Sizeof(Person&#123;&#125;))</span><br><span class="line">  fmt.Println(unsafe.Sizeof(PersonI&#123;&#125;))</span><br><span class="line">  fmt.Println(unsafe.Sizeof(PersonII&#123;&#125;))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出结果如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; go run  .\main.go</span><br><span class="line">24</span><br><span class="line">24</span><br><span class="line">32</span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp;原理说明：空结构体作为结构体最后一个字段时，会进行填充，填充大小为上一个字段大小。结构体大小按照内存对齐条件正常计算即可。</p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p>Go语言高性能编程 <span class="exturl" data-url="aHR0cHM6Ly9nZWVrdHV0dS5jb20vcG9zdC9ocGctZW1wdHktc3RydWN0Lmh0bWw=" title="https://geektutu.com/post/hpg-empty-struct.html">https://geektutu.com/post/hpg-empty-struct.html<i class="fa fa-external-link"></i></span></p>
<p>空结构体是什么  <span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FpeWEyMDA3L2FydGljbGUvZGV0YWlscy8xMTE1MDI2NDk=" title="https://blog.csdn.net/qiya2007/article/details/111502649">https://blog.csdn.net/qiya2007/article/details/111502649<i class="fa fa-external-link"></i></span></p>
]]></content>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>协程池</title>
    <url>/2021/04/17/Go%E5%8D%8F%E7%A8%8B%E6%B1%A0/</url>
    <content><![CDATA[<p>&emsp;&emsp;goroutine是一种轻量级的并发处理方案，是go语言区别于其他语言的主要特点之一。goroutine默认资源占用为2kb，官方宣称使用go语言可以轻松的在单机上启动10w个协程。然而在实际使用中并不推荐这样使用。</p>
<span id="more"></span>

<p>&emsp;&emsp;如果对GMP调度模型有所了解的话，就会知道盲目的开启协程不仅不会带来性能的提升，反而会将性能浪费在协程调度上(理论上运行协程数目和可用逻辑cpu数目相近时，才能最好地发挥并发性能)。此外，极端情况下过度使用协程也会造成oom的情况。故而，我们往往会对协程的数量进行限制。</p>
<p>&emsp;&emsp;下文将采用斐波那契数列计算作为示例，演示几种协程数量控制的方法。注意：代码实现本身并不重要。</p>
<p>斐波那契数的计算采用如下方法：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Fibo</span><span class="params">(n <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">  <span class="keyword">if</span> n &lt;= <span class="number">1</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> n</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> Fibo(n<span class="number">-1</span>) + Fibo(n<span class="number">-2</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="简单的数量控制"><a href="#简单的数量控制" class="headerlink" title="简单的数量控制"></a>简单的数量控制</h1><h2 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 计算0-n的斐波那契数</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetFiboList</span><span class="params">(n <span class="keyword">int</span>)</span> []<span class="title">int</span></span> &#123;</span><br><span class="line">  <span class="comment">// 确定计算协程数量</span></span><br><span class="line">  numGoroutine := <span class="number">3</span></span><br><span class="line"></span><br><span class="line">  res := <span class="built_in">make</span>([]<span class="keyword">int</span>, n+<span class="number">1</span>)</span><br><span class="line">  nChan := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>, <span class="number">10</span>)</span><br><span class="line">  fChan := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;, <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 启动一个协程向管道中写入要计算的数</span></span><br><span class="line">  <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt;= n; i++ &#123;</span><br><span class="line">      nChan &lt;- i</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;()</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 启动工作协程</span></span><br><span class="line">  <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; numGoroutine; i++ &#123;</span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">      <span class="keyword">for</span> num := <span class="keyword">range</span> nChan &#123;</span><br><span class="line">        res[num] = Fibo(num)</span><br><span class="line">        fChan &lt;- <span class="keyword">struct</span>&#123;&#125;&#123;&#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 等待任务完成</span></span><br><span class="line">  <span class="keyword">for</span> i := <span class="number">0</span>; i &lt;= n; i++ &#123;</span><br><span class="line">    &lt;-fChan</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="特点说明"><a href="#特点说明" class="headerlink" title="特点说明"></a>特点说明</h2><p>该方法不对协程进行长期保持，在完成任务后协程会自动销毁，可以简单理解为一次性协程。方案优势：</p>
<ul>
<li>可以根据具体情况(如：问题规模、逻辑cpu数量、已有协程数量等)对协程数量进行限制，从而实现性能的最大利用。</li>
<li>任务完成后协程会自动销毁，不会长时间占用资源。</li>
</ul>
<h1 id="简单的协程池"><a href="#简单的协程池" class="headerlink" title="简单的协程池"></a>简单的协程池</h1><h2 id="示例代码-1"><a href="#示例代码-1" class="headerlink" title="示例代码"></a>示例代码</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Task <span class="keyword">struct</span> &#123;</span><br><span class="line">  f <span class="function"><span class="keyword">func</span><span class="params">()</span> <span class="title">error</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t *Task)</span> <span class="title">Execute</span><span class="params">()</span></span> &#123;</span><br><span class="line">  t.f()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Pool <span class="keyword">struct</span> &#123;</span><br><span class="line">  EntryChannel <span class="keyword">chan</span> *Task <span class="comment">// 任务入口</span></span><br><span class="line">  JobChannel   <span class="keyword">chan</span> *Task <span class="comment">// 内部任务队列</span></span><br><span class="line">  workerNum    <span class="keyword">int</span>        <span class="comment">// 最大协程数量</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewPool</span><span class="params">(gnum <span class="keyword">int</span>)</span> *<span class="title">Pool</span></span> &#123;</span><br><span class="line">  <span class="keyword">return</span> &amp;Pool&#123;</span><br><span class="line">    EntryChannel: <span class="built_in">make</span>(<span class="keyword">chan</span> *Task, <span class="number">10</span>),</span><br><span class="line">    JobChannel:   <span class="built_in">make</span>(<span class="keyword">chan</span> *Task, <span class="number">10</span>),</span><br><span class="line">    workerNum:    gnum,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *Pool)</span> <span class="title">worker</span><span class="params">(workerId <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">  <span class="keyword">for</span> task := <span class="keyword">range</span> p.JobChannel &#123;</span><br><span class="line">    task.Execute()</span><br><span class="line">    fmt.Println(<span class="string">&quot;worker&quot;</span>, workerId, <span class="string">&quot;执行完毕&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *Pool)</span> <span class="title">Run</span><span class="params">()</span></span> &#123;</span><br><span class="line">  <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; p.workerNum; i++ &#123;</span><br><span class="line">    <span class="keyword">go</span> p.worker(i)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> task := <span class="keyword">range</span> p.EntryChannel &#123;</span><br><span class="line">      p.JobChannel &lt;- task</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  p := NewPool(<span class="number">3</span>)</span><br><span class="line">  p.Run()</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">20</span>; i++ &#123;</span><br><span class="line">    f := <span class="function"><span class="keyword">func</span><span class="params">()</span> <span class="title">error</span></span> &#123;</span><br><span class="line">      Work(i)</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    p.EntryChannel &lt;- &amp;Task&#123;f&#125;</span><br><span class="line">    time.Sleep(time.Second)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Work</span><span class="params">(n <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">  fmt.Printf(<span class="string">&quot;fibo(%d)=%d\n&quot;</span>, n, Fibo(n))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="特点说明-1"><a href="#特点说明-1" class="headerlink" title="特点说明"></a>特点说明</h2><p>&emsp;&emsp;此方案创建的协程为持久驻留协程，只要有新的任务写入，协程池内协程就会获取任务并执行。方案优势：</p>
<ul>
<li>一次创建协程池后就工作协程会长期主流，只需要在需要适用时向任务入口写入任务，协程池内协程就会自动工作起来。</li>
<li>协程工作内容不受限制，只要按照任务内容进行封装即可写入协程池。可以方便的应对不同的任务。</li>
<li>可以修改任务结构体，构建复杂的任务调度机制(如优先级队列等)，从而满足复杂的应用需求。</li>
</ul>
<h1 id="一些协程池推荐"><a href="#一些协程池推荐" class="headerlink" title="一些协程池推荐"></a>一些协程池推荐</h1><h2 id="go-playground-pool"><a href="#go-playground-pool" class="headerlink" title="go-playground/pool"></a>go-playground/pool</h2><p>&emsp;&emsp;<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2dvLXBsYXlncm91bmQvcG9vbA==" title="https://github.com/go-playground/pool">go-playground/pool<i class="fa fa-external-link"></i></span>在比起之前简单的协程池的基础上， 对pool, worker的状态有了很好的管理。但是，但是问题来了，在第一个实现的简单groutine池和go-playground/pool中，都是先启动预定好的groutine来完成任务执行，在并发量远小于任务量的情况下确实能够做到groutine的复用，如果任务量不多则会导致任务分配到每个groutine不均匀，甚至可能出现启动的groutine根本不会执行任务从而导致浪费，而且对于协程池也没有动态的扩容和缩小。</p>
<h2 id="ants"><a href="#ants" class="headerlink" title="ants"></a>ants</h2><p>&emsp;&emsp;<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3BhbmpmMjAwMC9hbnRz" title="https://github.com/panjf2000/ants">ants<i class="fa fa-external-link"></i></span>是一个受<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3ZhbHlhbGEvZmFzdGh0dHA=" title="https://github.com/valyala/fasthttp">fasthttp<i class="fa fa-external-link"></i></span>启发的高性能协程池, fasthttp号称是比go原生的net/http快10倍，其快速高性能的原因之一就是采用了各种池化技术（这个日后再开新坑去读源码), ants相比之前两种协程池，其模型更像是之前接触到的数据库连接池，需要从空余的worker中取出一个来执行任务, 当无可用空余worker的时候再去创建，而当pool的容量达到上线之后，剩余的任务阻塞等待当前进行中的worker执行完毕将worker放回pool, 直至pool中有空闲worker。 ants在内存的管理上做得很好，除了定期清除过期worker(一定时间内没有分配到任务的worker)，ants还实现了一种适用于大批量相同任务的pool, 这种pool与一个需要大批量重复执行的函数锁绑定，避免了调用方不停的创建，更加节省内存。</p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><span class="exturl" data-url="aHR0cHM6Ly9zdHVkeWdvbGFuZy5jb20vYXJ0aWNsZXMvMTU0Nzc=" title="https://studygolang.com/articles/15477">https://studygolang.com/articles/15477<i class="fa fa-external-link"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2dvLXBsYXlncm91bmQvcG9vbA==" title="https://github.com/go-playground/pool">https://github.com/go-playground/pool<i class="fa fa-external-link"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9zZWdtZW50ZmF1bHQuY29tL2EvMTE5MDAwMDAxODE5MzE2MQ==" title="https://segmentfault.com/a/1190000018193161">https://segmentfault.com/a/1190000018193161<i class="fa fa-external-link"></i></span></p>
]]></content>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>原生GoWeb实现</title>
    <url>/2021/04/09/Go%E5%8E%9F%E7%94%9FWeb%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[<p>&emsp;&emsp;由于目前Go开源社区已经有许多优秀的Web框架，如Gin框架、Beego框架、Iris框架、Echo框架等。此处仅就使用官方包实现http/https进行简单尝试，旨在了解http/https实现流程，了解二者异同点。如需深入探究，可以直接产出参考文献。</p>
<span id="more"></span>

<h1 id="创建http-https服务"><a href="#创建http-https服务" class="headerlink" title="创建http/https服务"></a>创建http/https服务</h1><h2 id="创建http服务"><a href="#创建http服务" class="headerlink" title="创建http服务"></a>创建http服务</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  <span class="comment">// 注册hanlderFunc</span></span><br><span class="line">  http.HandleFunc(<span class="string">&quot;/&quot;</span>, sayHello)</span><br><span class="line">  <span class="comment">// 实现接口</span></span><br><span class="line">  http.Handle(<span class="string">&quot;/myhandler&quot;</span>, &amp;handler.MyHandler&#123;&#125;)</span><br><span class="line">  err := http.ListenAndServeTLS(<span class="string">&quot;:80&quot;</span>, <span class="literal">nil</span>)</span><br><span class="line">  <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    log.Fatal(err.Error())</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sayHello</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">  fmt.Fprintln(w, <span class="string">&quot;this is a template&quot;</span>, r.URL.Path)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="创建https服务"><a href="#创建https服务" class="headerlink" title="创建https服务"></a>创建https服务</h2><h3 id="准备证书和私钥"><a href="#准备证书和私钥" class="headerlink" title="准备证书和私钥"></a>准备证书和私钥</h3><p>&emsp;&emsp;开启https需要相应的证书和密钥。主要有单向验证和双向验证两种方式。此处简单演示使用，openssl自签证书，实现单向验证。</p>
<p>openssl<span class="exturl" data-url="aHR0cDovL3NscHJvd2ViLmNvbS9wcm9kdWN0cy9XaW4zMk9wZW5TU0wuaHRtbA==" title="http://slproweb.com/products/Win32OpenSSL.html">下载地址<i class="fa fa-external-link"></i></span> <span class="exturl" data-url="aHR0cDovL3NscHJvd2ViLmNvbS9wcm9kdWN0cy9XaW4zMk9wZW5TU0wuaHRtbA==" title="http://slproweb.com/products/Win32OpenSSL.html">http://slproweb.com/products/Win32OpenSSL.html<i class="fa fa-external-link"></i></span></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">openssl genrsa -out server.key 2048</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">openssl req -new -x509 -key server.key -out server.crt -days 3650</span><br></pre></td></tr></table></figure>

<p>根据提示完成即可。</p>
<p><strong>注意：</strong>此处要保证正确 本地使用填入localhost</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">Common Name (e.g. server FQDN or YOUR name) []:server_IP_address</span><br></pre></td></tr></table></figure>

<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  <span class="comment">// 注册hanlderFunc</span></span><br><span class="line">  http.HandleFunc(<span class="string">&quot;/&quot;</span>, sayHello)</span><br><span class="line">  <span class="comment">// 实现接口</span></span><br><span class="line">  http.Handle(<span class="string">&quot;/myhandler&quot;</span>, &amp;handler.MyHandler&#123;&#125;)</span><br><span class="line">  err := http.ListenAndServeTLS(<span class="string">&quot;:443&quot;</span>, <span class="string">&quot;cert/server.crt&quot;</span>, <span class="string">&quot;cert/server.key&quot;</span>, <span class="literal">nil</span>)</span><br><span class="line">  <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    log.Fatal(err.Error())</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sayHello</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">  fmt.Fprintln(w, <span class="string">&quot;this is a template&quot;</span>, r.URL.Path)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>详细配置http服务</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">server := http.Server&#123;</span><br><span class="line">    Addr:        <span class="string">&quot;:443&quot;</span>,</span><br><span class="line">    Handler:     &amp;handler.MyHandler&#123;&#125;,</span><br><span class="line">    ReadTimeout: <span class="number">2</span> * time.Second,</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> err := server.ListenAndServeTLS(<span class="string">&quot;cert/server.crt&quot;</span>, <span class="string">&quot;cert/server.key&quot;</span>); err != <span class="literal">nil</span> &#123;</span><br><span class="line">    log.Fatal(err.Error())</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="HTTP协议介绍"><a href="#HTTP协议介绍" class="headerlink" title="HTTP协议介绍"></a>HTTP协议介绍</h1><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><p>超文本传输协议  无状态  报文 默认端口80   常用端口 80 8080</p>
<ul>
<li>建立连接</li>
<li>发出请求信息</li>
<li>回送响应信息</li>
<li>关闭连接</li>
</ul>
<h2 id="http1-0和http1-1区别"><a href="#http1-0和http1-1区别" class="headerlink" title="http1.0和http1.1区别"></a>http1.0和http1.1区别</h2><p>http1.0每请求一次资源都需要建立连接。</p>
<p>http1.1提高了效率，一次连接可以获取多个资源。</p>
<h2 id="报文"><a href="#报文" class="headerlink" title="报文"></a>报文</h2><h3 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h3><ul>
<li><p>报文首部</p>
</li>
<li><p>空行CR+LF</p>
</li>
<li><p>报文主体</p>
</li>
</ul>
<h3 id="请求报文"><a href="#请求报文" class="headerlink" title="请求报文"></a>请求报文</h3><ul>
<li><p>请求行</p>
</li>
<li><p>请求头</p>
</li>
<li><p>请求头</p>
</li>
<li><p>请求体</p>
</li>
</ul>
<h3 id="响应报文信息"><a href="#响应报文信息" class="headerlink" title="响应报文信息"></a>响应报文信息</h3><ul>
<li>响应行</li>
<li>响应头</li>
<li>空行CR+LF</li>
<li>响应体</li>
</ul>
<h3 id="状态码"><a href="#状态码" class="headerlink" title="状态码"></a>状态码</h3><ul>
<li>1xx提示信息 - 表示请求以被成功接收、继续处理</li>
<li>2xx成功 - 表示请求已被成功接收、理解、接受</li>
<li>3xx重定向 要完成请求需要进一步处理</li>
<li>4xx客户端错误 请求无法处理 </li>
<li>5xx服务端错误 </li>
</ul>
<p>常见：200 404 500 302</p>
<h1 id="HTTPS协议介绍"><a href="#HTTPS协议介绍" class="headerlink" title="HTTPS协议介绍"></a>HTTPS协议介绍</h1><p>&emsp;&emsp;HTTPS 的信任基于预先安装在操作系统中的证书颁发机构（CA）。因此，到一个网站的 HTTPS 连接仅在这些情况下可被信任：</p>
<ul>
<li>浏览器正确地实现了 HTTPS 且操作系统中安装了正确且受信任的证书颁发机构；</li>
<li>证书颁发机构仅信任合法的网站；</li>
<li>被访问的网站提供了一个有效的证书，也就是说它是一个由操作系统信任的证书颁发机构签发的（大部分浏览器会对无效的证书发出警告）；</li>
<li>该证书正确地验证了被访问的网站（例如，访问<span class="exturl" data-url="aHR0cHM6Ly9leGFtcGxlLmNvbeaXtuaUtuWIsOS6huetvuWPkee7mWV4YW1wbGUuY29t6ICM5LiN5piv5YW25a6D5Z+f5ZCN55qE6K+B5LmmKTsv" title="https://example.com时收到了签发给example.com而不是其它域名的证书);/">https://example.com时收到了签发给example.com而不是其它域名的证书）；<i class="fa fa-external-link"></i></span></li>
<li>此协议的加密层（SSL/TLS）能够有效地提供认证和高强度的加密。</li>
</ul>
<p>主要目的在于:</p>
<ol>
<li>安全传输数据</li>
<li>防止中间人攻击和窃听</li>
<li>验证服务器的可信度</li>
</ol>
<h1 id="处理请求"><a href="#处理请求" class="headerlink" title="处理请求"></a>处理请求</h1><p>https的实现对于上层应用来说是透明的，所以上层处理和http处理几乎时一致的。</p>
<p>下面展示一些常用操作</p>
<h2 id="解析数据"><a href="#解析数据" class="headerlink" title="解析数据"></a>解析数据</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 上传时注意 enctype=&quot;multipart/form-data&quot;</span></span><br><span class="line">r.ParseForm()</span><br><span class="line">fmt.Fprintln(w, <span class="string">&quot;请求参数:&quot;</span>, r.Form)</span><br><span class="line">fmt.Fprintln(w, <span class="string">&quot;f用户名:&quot;</span>, r.FormValue(<span class="string">&quot;user&quot;</span>))</span><br><span class="line">fmt.Fprintln(w, <span class="string">&quot;q用户名:&quot;</span>, r.URL.Query().Get(<span class="string">&quot;user&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取请求头</span></span><br><span class="line">fmt.Fprintln(w, <span class="string">&quot;你发送的请求的请求地址是：&quot;</span>, r.URL.Path)</span><br><span class="line">fmt.Fprintln(w, <span class="string">&quot;你发送的请求的查询字符串是：&quot;</span>, r.URL.RawQuery)</span><br><span class="line">fmt.Fprintln(w, <span class="string">&quot;请求头中所有信息：&quot;</span>, r.Header)</span><br><span class="line">fmt.Fprintln(w, <span class="string">&quot;请求头中所有Accept-Encoding信息：&quot;</span>, r.Header[<span class="string">&quot;Accept-Encoding&quot;</span>])</span><br><span class="line">fmt.Fprintln(w, <span class="string">&quot;请求头中所有Accept-Encoding信息：&quot;</span>, r.Header.Get(<span class="string">&quot;Accept-Encoding&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取请求体</span></span><br><span class="line"><span class="built_in">len</span> := r.ContentLength</span><br><span class="line">body := <span class="built_in">make</span>([]<span class="keyword">byte</span>, <span class="keyword">int</span>(<span class="built_in">len</span>))</span><br><span class="line">n, err := r.Body.Read(body)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    log.Println(err.Error())</span><br><span class="line">&#125;</span><br><span class="line">fmt.Fprintf(w, <span class="string">&quot;接收到请求体%dBytes数据：%s\n&quot;</span>, n, <span class="keyword">string</span>(body))</span><br></pre></td></tr></table></figure>

<h2 id="写JSON数据"><a href="#写JSON数据" class="headerlink" title="写JSON数据"></a>写JSON数据</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">w.Header().Set(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;application/json&quot;</span>)</span><br><span class="line">user := &amp;User&#123;<span class="string">&quot;tom&quot;</span>, <span class="number">12</span>&#125;</span><br><span class="line">data, err := json.Marshal(user)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    log.Println(err.Error())</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">w.Write(data)</span><br></pre></td></tr></table></figure>

<h2 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 注意保持设置顺序</span></span><br><span class="line">w.Header().Set(<span class="string">&quot;Location&quot;</span>, <span class="string">&quot;https://www.baidu.com&quot;</span>)</span><br><span class="line">w.WriteHeader(http.StatusFound)</span><br></pre></td></tr></table></figure>

<h1 id="模板引擎"><a href="#模板引擎" class="headerlink" title="模板引擎"></a>模板引擎</h1><p><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnN0dWR5Z29sYW5nLmNvbS9wa2cvdGV4dC90ZW1wbGF0ZQ==" title="https://docs.studygolang.com/pkg/text/template">text/template<i class="fa fa-external-link"></i></span> 速度快，一文本形式输出</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnN0dWR5Z29sYW5nLmNvbS9wa2cvaHRtbC90ZW1wbGF0ZQ==" title="https://docs.studygolang.com/pkg/html/template">html/template<i class="fa fa-external-link"></i></span> 在模板渲染过程中会对一些有风险的内容进行转义，以此来防范跨站脚本攻击。</p>
<p>模板引擎不仅仅可以web应用，也可修改输出句柄，实现文本打印等。如</p>
<p>下面是一个简单的例子，可以打印”17 of wool”。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Inventory <span class="keyword">struct</span> &#123;</span><br><span class="line">  Material <span class="keyword">string</span></span><br><span class="line">  Count    <span class="keyword">uint</span></span><br><span class="line">&#125;</span><br><span class="line">sweaters := Inventory&#123;<span class="string">&quot;wool&quot;</span>, <span class="number">17</span>&#125;</span><br><span class="line">tmpl, err := template.New(<span class="string">&quot;test&quot;</span>).Parse(<span class="string">&quot;&#123;&#123;.Count&#125;&#125; of &#123;&#123;.Material&#125;&#125;&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123; <span class="built_in">panic</span>(err) &#125;</span><br><span class="line">err = tmpl.Execute(os.Stdout, sweaters)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123; <span class="built_in">panic</span>(err) &#125;</span><br></pre></td></tr></table></figure>

<h1 id="模板语法"><a href="#模板语法" class="headerlink" title="模板语法"></a>模板语法</h1><h2 id="默认标识符"><a href="#默认标识符" class="headerlink" title="默认标识符"></a>默认标识符</h2><p>模板语法都包含在<code>&#123;&#123;`与`&#125;&#125;</code>中间，其中<code>&#123;&#123;.&#125;&#125;</code>中的点表示当前对象。</p>
<h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&#123;&#x2F;* a comment *&#x2F;&#125;&#125;</span><br></pre></td></tr></table></figure>

<h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$obj :&#x3D; &#123;&#123;.&#125;&#125;</span><br></pre></td></tr></table></figure>

<h2 id="条件判断"><a href="#条件判断" class="headerlink" title="条件判断"></a>条件判断</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&#123;if pipeline&#125;&#125; T1 &#123;&#123;end&#125;&#125;</span><br><span class="line"></span><br><span class="line">&#123;&#123;if pipeline&#125;&#125; T1 &#123;&#123;else&#125;&#125; T0 &#123;&#123;end&#125;&#125;</span><br><span class="line"></span><br><span class="line">&#123;&#123;if pipeline&#125;&#125; T1 &#123;&#123;else if pipeline&#125;&#125; T0 &#123;&#123;end&#125;&#125;</span><br></pre></td></tr></table></figure>

<h2 id="range"><a href="#range" class="headerlink" title="range"></a>range</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&#123;range pipeline&#125;&#125; T1 &#123;&#123;end&#125;&#125;</span><br><span class="line">如果pipeline的值其长度为0，不会有任何输出</span><br><span class="line"></span><br><span class="line">&#123;&#123;range pipeline&#125;&#125; T1 &#123;&#123;else&#125;&#125; T0 &#123;&#123;end&#125;&#125;</span><br><span class="line">如果pipeline的值其长度为0，则会执行T0。</span><br></pre></td></tr></table></figure>

<h2 id="with"><a href="#with" class="headerlink" title="with"></a>with</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&#123;with pipeline&#125;&#125; T1 &#123;&#123;end&#125;&#125;</span><br><span class="line">如果pipeline为empty不产生输出，否则将dot设为pipeline的值并执行T1。不修改外面的dot。</span><br><span class="line"></span><br><span class="line">&#123;&#123;with pipeline&#125;&#125; T1 &#123;&#123;else&#125;&#125; T0 &#123;&#123;end&#125;&#125;</span><br><span class="line">如果pipeline为empty，不改变dot并执行T0，否则dot设为pipeline的值并执行T1。</span><br></pre></td></tr></table></figure>

<h2 id="预定义函数"><a href="#预定义函数" class="headerlink" title="预定义函数"></a>预定义函数</h2><p>&emsp;&emsp;执行模板时，函数从两个函数字典中查找：首先是模板函数字典，然后是全局函数字典。一般不在模板内定义函数，而是使用Funcs方法添加函数到模板里。</p>
<p>预定义的全局函数如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">and</span><br><span class="line">    函数返回它的第一个empty参数或者最后一个参数；</span><br><span class="line">    就是说&quot;and x y&quot;等价于&quot;if x then y else x&quot;；所有参数都会执行；</span><br><span class="line">or</span><br><span class="line">    返回第一个非empty参数或者最后一个参数；</span><br><span class="line">    亦即&quot;or x y&quot;等价于&quot;if x then x else y&quot;；所有参数都会执行；</span><br><span class="line">not</span><br><span class="line">    返回它的单个参数的布尔值的否定</span><br><span class="line">len</span><br><span class="line">    返回它的参数的整数类型长度</span><br><span class="line">index</span><br><span class="line">    执行结果为第一个参数以剩下的参数为索引&#x2F;键指向的值；</span><br><span class="line">    如&quot;index x 1 2 3&quot;返回x[1][2][3]的值；每个被索引的主体必须是数组、切片或者字典。</span><br><span class="line">print</span><br><span class="line">    即fmt.Sprint</span><br><span class="line">printf</span><br><span class="line">    即fmt.Sprintf</span><br><span class="line">println</span><br><span class="line">    即fmt.Sprintln</span><br><span class="line">html</span><br><span class="line">    返回与其参数的文本表示形式等效的转义HTML。</span><br><span class="line">    这个函数在html&#x2F;template中不可用。</span><br><span class="line">urlquery</span><br><span class="line">    以适合嵌入到网址查询中的形式返回其参数的文本表示的转义值。</span><br><span class="line">    这个函数在html&#x2F;template中不可用。</span><br><span class="line">js</span><br><span class="line">    返回与其参数的文本表示形式等效的转义JavaScript。</span><br><span class="line">call</span><br><span class="line">    执行结果是调用第一个参数的返回值，该参数必须是函数类型，其余参数作为调用该函数的参数；</span><br><span class="line">    如&quot;call .X.Y 1 2&quot;等价于go语言里的dot.X.Y(1, 2)；</span><br><span class="line">    其中Y是函数类型的字段或者字典的值，或者其他类似情况；</span><br><span class="line">    call的第一个参数的执行结果必须是函数类型的值（和预定义函数如print明显不同）；</span><br><span class="line">    该函数类型值必须有1到2个返回值，如果有2个则后一个必须是error接口类型；</span><br><span class="line">    如果有2个返回值的方法返回的error非nil，模板执行会中断并返回给调用模板执行者该错误；</span><br></pre></td></tr></table></figure>

<h2 id="比较函数"><a href="#比较函数" class="headerlink" title="比较函数"></a>比较函数</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">eq      如果arg1 &#x3D;&#x3D; arg2则返回真</span><br><span class="line">ne      如果arg1 !&#x3D; arg2则返回真</span><br><span class="line">lt      如果arg1 &lt; arg2则返回真</span><br><span class="line">le      如果arg1 &lt;&#x3D; arg2则返回真</span><br><span class="line">gt      如果arg1 &gt; arg2则返回真</span><br><span class="line">ge      如果arg1 &gt;&#x3D; arg2则返回真</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#123;&#123;eq arg1 arg2 arg3&#125;&#125;</span><br></pre></td></tr></table></figure>

<h2 id="修改默认的标识符"><a href="#修改默认的标识符" class="headerlink" title="修改默认的标识符"></a>修改默认的标识符</h2><p>&emsp;&emsp;Go标准库的模板引擎使用的花括号<code>&#123;&#123;`和`&#125;&#125;</code>作为标识，而许多前端框架（如<code>Vue</code>和 <code>AngularJS</code>）也使用<code>&#123;&#123;`和`&#125;&#125;</code>作为标识符，所以当我们同时使用Go语言模板引擎和以上前端框架时就会出现冲突，这个时候我们需要修改标识符，修改前端的或者修改Go语言的。这里演示如何修改Go语言模板引擎默认的标识符：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">template.New(<span class="string">&quot;test&quot;</span>).Delims(<span class="string">&quot;&#123;[&quot;</span>, <span class="string">&quot;]&#125;&quot;</span>).ParseFiles(<span class="string">&quot;./t.tmpl&quot;</span>)</span><br></pre></td></tr></table></figure>

<h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><p><span class="exturl" data-url="aHR0cHM6Ly93d3cubGl3ZW56aG91LmNvbS9wb3N0cy9Hby9nb190ZW1wbGF0ZS8jYXV0b2lkLTEtMy0w" title="https://www.liwenzhou.com/posts/Go/go_template/#autoid-1-3-0">Go语言标准库之http/template<i class="fa fa-external-link"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9zdHVkeWdvbGFuZy5jb20vcGtnZG9j" title="https://studygolang.com/pkgdoc">中文官方说明package template<i class="fa fa-external-link"></i></span>                     </p>
]]></content>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>Go操作MySQL</title>
    <url>/2021/04/11/Go%E6%93%8D%E4%BD%9CMySQL/</url>
    <content><![CDATA[<p>&emsp;&emsp;本分简单介绍使用database/sql包操作MySQL的方法。仅进行了数据库连接和sql语句的执行演示。其他细节请参考官方文档。</p>
<span id="more"></span>

<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>MySql数据库驱动</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2dvLXNxbC1kcml2ZXIvbXlzcWw=" title="https://github.com/go-sql-driver/mysql">github.com/go-sql-driver/mysql<i class="fa fa-external-link"></i></span></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">go</span> get -u github.com/<span class="keyword">go</span>-sql-driver/mysql</span><br></pre></td></tr></table></figure>

<p>在数据库中创建test数据库</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE `test` <span class="type">CHARACTER</span> <span class="keyword">SET</span> <span class="string">&#x27;utf8&#x27;</span>;</span><br></pre></td></tr></table></figure>

<h1 id="连接数据库"><a href="#连接数据库" class="headerlink" title="连接数据库"></a>连接数据库</h1><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// connect  mysql</span></span><br><span class="line">db, err := sql.Open(<span class="string">&quot;mysql&quot;</span>, <span class="string">&quot;root:123456@tcp(127.0.0.1:3306)/test?charset=utf8&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;failed to open database, err:&quot;</span>, err)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">err = db.Ping()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;failed to connect mysql database, err:&quot;</span>, err)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">&quot;succeed to  connect ot mysql databse&quot;</span>)</span><br><span class="line"><span class="keyword">defer</span> db.Close()</span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp;sql.Open成功并不代表数据库连接成功，必须要通过ping方式确认。</p>
<p>&emsp;&emsp;DB是一个数据库（操作）句柄，代表一个具有零到多个底层连接的连接池。它可以安全的被多个go程同时使用。sql包会自动创建和释放连接；它也会维护一个闲置连接的连接池。如果数据库具有单连接状态的概念，该状态只有在事务中被观察时才可信。一旦调用了BD.Begin，返回的Tx会绑定到单个连接。当调用事务Tx的Commit或Rollback后，该事务使用的连接会归还到DB的闲置连接池中。连接池的大小可以用SetMaxIdleConns方法控制。</p>
<h1 id="Exec"><a href="#Exec" class="headerlink" title="Exec"></a>Exec</h1><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">queryStr := <span class="string">`CREATE TABLE test (</span></span><br><span class="line"><span class="string">		id int NOT NULL AUTO_INCREMENT,</span></span><br><span class="line"><span class="string">		name varchar(20) CHARACTER SET utf8 NOT NULL DEFAULT &#x27;&#x27;,</span></span><br><span class="line"><span class="string">		age tinyint NOT NULL,</span></span><br><span class="line"><span class="string">		PRIMARY KEY (id)</span></span><br><span class="line"><span class="string">	  ) ENGINE = InnoDB;`</span></span><br><span class="line">_, err := db.Exec(queryStr)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    log.Println(<span class="string">&quot;failed to exec queryStr&quot;</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;succeed to create table&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Query"><a href="#Query" class="headerlink" title="Query"></a>Query</h1><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">queryStr := <span class="string">`insert into test(name, age) values(?, ?);`</span></span><br><span class="line">_, err := db.Query(queryStr, <span class="string">&quot;zhou&quot;</span>, <span class="number">18</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Println(<span class="string">&quot;failed to inert record into table test, err:&quot;</span> + err.Error())</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">&quot;succed to insert a record into table test&quot;</span>)</span><br></pre></td></tr></table></figure>

<h1 id="Prepare"><a href="#Prepare" class="headerlink" title="Prepare"></a>Prepare</h1><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">queryStr := <span class="string">`update test set age = ? where name = ?;`</span></span><br><span class="line">stmt, err := db.Prepare(queryStr)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Println(<span class="string">&quot;failed to prepare, err:&quot;</span> + err.Error())</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">_, err = stmt.Query(<span class="number">18</span>, <span class="string">&quot;wu&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Println(<span class="string">&quot;fialed to query by stmt, err:&quot;</span> + err.Error())</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">&quot;succed to query by stmt&quot;</span>)</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL调优相关知识</title>
    <url>/2021/03/29/MySQL%E8%B0%83%E4%BC%98%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/</url>
    <content><![CDATA[<h2 id="MySql架构"><a href="#MySql架构" class="headerlink" title="MySql架构"></a>MySql架构</h2><p>1.连接器 connector</p>
<p>2.连接池 pool</p>
<p>3.查询缓存</p>
<p>4.解析器</p>
<p>5.优化器</p>
<p>6.存储引擎  MyIsam InnoDB Memory 等</p>
<p>7.文件系统</p>
<p>InnoDB  支持行锁  事务等</p>
<span id="more"></span>

<p>MySql</p>
<p>行： 一条记录</p>
<p>页：多行数据 默认16k   操作系统中页的单位是4k</p>
<p>基于局部性原理，一次取出一页，进行选取。</p>
<h2 id="页结构"><a href="#页结构" class="headerlink" title="页结构"></a>页结构</h2><table>
<thead>
<tr>
<th>名称</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>File Header 文件头部</td>
<td>38B  页的一些通用信息</td>
</tr>
<tr>
<td>Page Header 页面头部</td>
<td>56B 数据页专有的一些信息  指针</td>
</tr>
<tr>
<td>Infimum+Supermum Records 最小记录+最大记录</td>
<td>26B 两个虚拟行记录</td>
</tr>
<tr>
<td>User Records 用户记录</td>
<td>不定 实际存储行记录空间</td>
</tr>
<tr>
<td>Free Space 空闲空间</td>
<td>不定 页中位使用空间</td>
</tr>
<tr>
<td>Page Directory 文件目录</td>
<td>*不定 页中某些记录的相对位置</td>
</tr>
<tr>
<td>File Trailer 文件尾部</td>
<td>8B 校验页是否完整</td>
</tr>
</tbody></table>
<h2 id="行格式"><a href="#行格式" class="headerlink" title="行格式"></a>行格式</h2><p>一行记录可以以不同形式存储在InnoDB中，行格式分别为Compact Redundant Dynamic(默认) 和 Compressed行格式</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE TABLE 表名 (列信息) ROW_FORMAT&#x3D;行格式名称</span><br><span class="line">ALTER TABLE 表名 ROW_FORMAT &#x3D; 行格式名称</span><br></pre></td></tr></table></figure>

<ul>
<li>COMPACT行格式：</li>
</ul>
<p><code>**变长字段长度列表**NULL标志位**记录头信息**列1数据** ...**</code></p>
<p>除BOLB数据外  所有数据之和不能超过65535字节</p>
<p>存储数据量大于16k时候，发生行溢出。COMPACT:用户数据+下一页地址     </p>
<ul>
<li><p>Dynamic：行溢出时候，只存储其他表地址，不存储数据。</p>
</li>
<li><p>Compressed：会使用压缩算法对页面进行压缩</p>
</li>
</ul>
<h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2><p>索引是一种数据结构，存储于磁盘中。提高检索效率。</p>
<p><code>.frm</code>建表脚本  <code>.idb</code> 索引加数据</p>
<p>MyIsam：默认插入顺序存储</p>
<p>InnoDB：会根据主键进行数据整理  有序存储 B+树    组目录 存储主键分组和组起始地址  页目录   <strong>聚簇索引</strong>  没有定义主键(使用唯一字段)   都没有默认使用自动生成的RowID  <strong>主键ID要尽量短</strong>  先复制第一页再开辟第二页，把起始页改成目录页</p>
<p>辅助索引：唯一索引  非唯一索引。。。会创建B+树，叶子节点存储主键</p>
<p>explain 查看是否使用到索引  type : ALL全表扫描  idx ref range使用到索引 possible_keys:可能用到的索引 key:真正使用的索引 useringfilesort 单独排序</p>
<p>辅助索引+回表</p>
<p><code>explain select * from table where b=1 and c=1 and d=1</code></p>
<p>使用索引：最左前缀原则</p>
<p>MySql:<strong>utf8:0-3B  utf8mb4：0-4B</strong></p>
<p>NULL小于所有数  </p>
<h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><p>ACID：</p>
<ul>
<li><p>原子性  Atomicity</p>
</li>
<li><p>一致性 Consistency</p>
</li>
<li><p>隔离性 Isolation</p>
</li>
<li><p>持久性 Durability</p>
</li>
</ul>
<p>事务自动提交：autocommit属性   DDL、加锁、修改表等会进行隐式提交</p>
<p><code>show variables like &#39;autocommit&#39;</code></p>
<p>保存点：回滚的保存点。</p>
<h3 id="隔离性："><a href="#隔离性：" class="headerlink" title="隔离性："></a>隔离性：</h3><p>隔离级别：</p>
<ul>
<li>读未提交：未提交可以读到，使用不多。  脏读 。 read uncommited;</li>
<li>读已提交：只能读到已经提交的事务结果。不可重复读 幻读。read commited;  仅对查出数据加锁</li>
<li>可重复读(默认)：可能幻读。 repeatable read 会加锁间隙 ，防止幻读，不适用索引，会锁全表</li>
<li>串行化：阻塞读写。  读读不会阻塞。</li>
</ul>
<p>实现:</p>
<p>版本链  ReadView(寻找提交了的事务) MVCC(多版本并发控制， Multi-VersiionConcurrent Control)</p>
<p>row_id  transaction_id roll_pointer</p>
<h2 id="锁"><a href="#锁" class="headerlink" title="锁"></a>锁</h2><ul>
<li><p>读锁 共享锁 Shared Locks S锁 <code>...  in share mode</code></p>
</li>
<li><p>写锁 排他锁 Exclusive Locks X锁 <code>... for update</code> <code>delete</code> [<code>insert</code>隐式锁，切换为排他锁]</p>
</li>
<li><p>不锁  select…</p>
</li>
</ul>
<p>LOCK_REC_NOT_GAP 行锁   一行数据</p>
<p>LOCK_GAP 间隙锁  键之间</p>
<p>LOCK_ORDINARY: 锁行加上下间隙</p>
<p>释放：commit 或 rollback</p>
<p>意向锁   避免锁冲突</p>
<p>IS 意向共享锁</p>
<p>IX 意向排他锁</p>
<h2 id="树形结构"><a href="#树形结构" class="headerlink" title="树形结构"></a>树形结构</h2><ul>
<li>二叉树 排序</li>
<li>红黑树 (高度)</li>
</ul>
<p>逻辑约束：</p>
<p>1.节点是红色或黑色</p>
<p>2.根结点是黑色</p>
<p>3.每个红色节点的两个子节点是黑色</p>
<p>4.插入的结点默认是红色</p>
<p>5.。。。</p>
<p>平衡措施</p>
<p>1.变色</p>
<p>2.自旋</p>
<ul>
<li>B树 B+树</li>
</ul>
<p>逻辑约束</p>
<p>1.度 结点的数据存储个数</p>
<p>2.叶节点具有相同的度</p>
<p>3.叶节点的指针为空</p>
<p>4.叶节点的数据key从左到右递增排列</p>
<ul>
<li>hash</li>
</ul>
<p>1.键值唯一，hash索引有绝对优势  查询效率高</p>
<p>2.无法完成范围索引</p>
<p>3.无法利用索引完成排序，以及like “xxx%” 模糊查询</p>
<p>4.不支持多列联合索引</p>
<p>5.因为hash碰撞问题，索引效率极低</p>
<h2 id="常见面试题"><a href="#常见面试题" class="headerlink" title="常见面试题"></a>常见面试题</h2><ul>
<li>聚簇索引和非聚簇索引的区别</li>
</ul>
<p>数据和索引组合   非聚簇索引索引和主键组合</p>
<ul>
<li>InnoDB为什么非主键索引结构叶子节点存储的是主键值而不是数据？</li>
</ul>
<p>存储代价 修改不易 减少磁盘IO  事务支持数据一致性维持难度</p>
<ul>
<li>为什么推荐使用整形的自增主键？</li>
</ul>
<p>整形  比较效率高</p>
<p>自增 调整代价</p>
<ul>
<li>联合索引  多字段作为索引建立依据</li>
</ul>
]]></content>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>Node.js 学习笔记</title>
    <url>/2021/03/18/Nodejs-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>​        Node.js是一个源与跨平台的事件驱动I/O服务端JavaScript运行时环境，基于Google的V8引擎，V8引擎执行Javascript的速度非常快，性能非常好。</p>
<p>​        Node.js拥有大量的库包可以使用，npm 的简单结构有助于 Node.js 生态系统的激增，现在 npm 仓库托管了超过 1,000,000 个可以自由使用的开源库包。</p>
<span id="more"></span>

<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>​        进入<span class="exturl" data-url="aHR0cHM6Ly9ub2RlanMub3JnL2VuLw==" title="https://nodejs.org/en/">官网<i class="fa fa-external-link"></i></span>，下载对应平台LTC 安装包安装即可。安装包中默认包括node.js环境和npm。</p>
<h1 id="常用语法示例"><a href="#常用语法示例" class="headerlink" title="常用语法示例"></a>常用语法示例</h1><h2 id="全局控制台对象console"><a href="#全局控制台对象console" class="headerlink" title="全局控制台对象console"></a>全局控制台对象console</h2><p>​        通常会使用console.log(“”)打印调试信息，辅助调试。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;hello world&quot;</span>);</span><br></pre></td></tr></table></figure>

<h2 id="定时器-setTimeout"><a href="#定时器-setTimeout" class="headerlink" title="定时器 setTimeout"></a>定时器 setTimeout</h2><ul>
<li>定时输出</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//  ES6写法</span></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;3 seconds has paased!&quot;</span>);</span><br><span class="line">&#125;,<span class="number">3000</span>);</span><br><span class="line"><span class="comment">//  普通语法</span></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;3 seconds has paased!&quot;</span>);</span><br><span class="line">&#125;,<span class="number">3000</span>);</span><br></pre></td></tr></table></figure>

<ul>
<li>间隔输出</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> time = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> timer = <span class="built_in">setInterval</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    time+=<span class="number">2</span>;</span><br><span class="line">    <span class="built_in">console</span>.log( time + <span class="string">&quot; seconds has paased!&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(time &gt; <span class="number">5</span>)&#123;</span><br><span class="line">        <span class="comment">// 停止定时器</span></span><br><span class="line">        <span class="built_in">clearInterval</span>(timer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,<span class="number">3000</span>);</span><br></pre></td></tr></table></figure>

<h2 id="当前路径-dirname"><a href="#当前路径-dirname" class="headerlink" title="当前路径__dirname"></a>当前路径__dirname</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(__dirname);</span><br></pre></td></tr></table></figure>

<h2 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 导入</span></span><br><span class="line"><span class="comment">// event 事件核心库</span></span><br><span class="line"><span class="keyword">var</span> events = <span class="built_in">require</span>(<span class="string">&#x27;events&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> myEmitter = <span class="keyword">new</span> events.EventEmitter();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建事件</span></span><br><span class="line">myEmitter.on(<span class="string">&#x27;someEvent&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">message</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(message);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 触发事件</span></span><br><span class="line">myEmitter.emit(<span class="string">&#x27;someEvent&#x27;</span>, <span class="string">&quot;the event was emitted&quot;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>​        事件的继承</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// util 工具库</span></span><br><span class="line"><span class="keyword">var</span> util = <span class="built_in">require</span>(<span class="string">&#x27;util&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> Person = <span class="function"><span class="keyword">function</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 继承事件</span></span><br><span class="line">util.inherits(Person, events.EventEmitter);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> xiaoming = <span class="keyword">new</span> Person(<span class="string">&quot;xiaoming&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> lili = <span class="keyword">new</span> Person(<span class="string">&quot;lili&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> lucy = <span class="keyword">new</span> Person(<span class="string">&quot;lucy&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// Person 数组</span></span><br><span class="line"><span class="keyword">var</span> persons = [xiaoming, lili, lucy];</span><br><span class="line"></span><br><span class="line">persons.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">person</span>)</span>&#123;</span><br><span class="line">    person.on(<span class="string">&#x27;speak&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">message</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(person.name + <span class="string">&quot; saide:&quot;</span> + message);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">xiaoming.emit(<span class="string">&#x27;speak&#x27;</span>, <span class="string">&#x27;hi&#x27;</span>);</span><br><span class="line">lucy.emit(<span class="string">&#x27;speak&#x27;</span>, <span class="string">&#x27;I want a curry&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h2 id="文件系统操作"><a href="#文件系统操作" class="headerlink" title="文件系统操作"></a>文件系统操作</h2><p>​        文件读写</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// nodejs 执行js时候是单线程的</span></span><br><span class="line"><span class="comment">// 异步读取文件</span></span><br><span class="line"><span class="comment">// js操作</span></span><br><span class="line"><span class="comment">// 1.注册读取函数</span></span><br><span class="line"><span class="comment">// 2.主线程空闲后 异步执行读取操作</span></span><br><span class="line"><span class="comment">// 3.执行读取的回调函数</span></span><br><span class="line"><span class="keyword">var</span> readMe = fs.readFile(<span class="string">&#x27;./day01/readMe.txt&#x27;</span>, <span class="string">&quot;utf8&quot;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">err, data</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// console.log(data);</span></span><br><span class="line">    fs.writeFile(<span class="string">&quot;./day01/writeMe.txt&quot;</span>, data, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;write has finished&quot;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 延时4s</span></span><br><span class="line"><span class="keyword">var</span> waitTill = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="keyword">new</span> <span class="built_in">Date</span>().getTime() + <span class="number">4</span>*<span class="number">1000</span>);</span><br><span class="line"><span class="keyword">while</span>(waitTill &gt; <span class="keyword">new</span> <span class="built_in">Date</span>())&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// console.log(readMe);</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;finish&quot;</span>);</span><br><span class="line"><span class="comment">// 同步输出</span></span><br><span class="line"><span class="comment">// fs.writeFileSync(&quot;./day01/writeMe.txt&quot;, &quot;hello world&quot;)</span></span><br></pre></td></tr></table></figure>

<p>​        文件夹创建和删除</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// fs.unlink(&#x27;./day01/writeMe.txt&#x27;, function()&#123;</span></span><br><span class="line"><span class="comment">//     console.log(&quot;delete writeMe.txt file&quot;);</span></span><br><span class="line"><span class="comment">// &#125;);</span></span><br><span class="line"><span class="comment">// fs.unlinkSync 同步</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// fs.mkdirSync(&#x27;./day01/stuff&#x27;)</span></span><br><span class="line"><span class="comment">// fs.rmdirSync(&#x27;./day01/stuff&#x27;)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">fs.mkdir(<span class="string">&#x27;./day01/stuff&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    fs.readFile(<span class="string">&#x27;./day01/readMe.txt&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">err, data</span>)</span>&#123;</span><br><span class="line">        fs.writeFile(<span class="string">&quot;./day01/stuff/writeMe.txt&quot;</span>, data, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;copy successfully&quot;</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>​        流操作及管道的使用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建读取流</span></span><br><span class="line"><span class="comment">// stream 是一个event实例， 可以绑定监听函数</span></span><br><span class="line"><span class="comment">// 使用buffer进行缓存</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// var myReadStream = fs.createReadStream(__dirname + &#x27;/readMe.txt&#x27; , &#x27;utf8&#x27;);</span></span><br><span class="line"><span class="keyword">var</span> myReadStream = fs.createReadStream(__dirname + <span class="string">&#x27;/readMe.txt&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> myWriteStream = fs.createWriteStream(__dirname + <span class="string">&#x27;/WriteMe.txt&#x27;</span>);</span><br><span class="line">myReadStream.setEncoding(<span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// // 接收数据的监听函数</span></span><br><span class="line"><span class="comment">// var data = &quot;&quot;</span></span><br><span class="line"><span class="comment">// myReadStream.on(&#x27;data&#x27;, function(chunk)&#123;</span></span><br><span class="line"><span class="comment">//     // console.log(&#x27;new trunk received&#x27;);</span></span><br><span class="line"><span class="comment">//     // console.log(chunk);</span></span><br><span class="line"><span class="comment">//     // data += chunk;</span></span><br><span class="line"><span class="comment">//     myWriteStream.write(chunk);</span></span><br><span class="line"><span class="comment">// &#125;);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// // 接收结束时候的监听函数</span></span><br><span class="line"><span class="comment">// myReadStream.on(&#x27;end&#x27;, function()&#123;</span></span><br><span class="line"><span class="comment">//     console.log(data);</span></span><br><span class="line"><span class="comment">// &#125;);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// var writeData = &quot;hello world&quot;;</span></span><br><span class="line"><span class="comment">// // 使用流写数据</span></span><br><span class="line"><span class="comment">// myWriteStream.write(writeData, &#x27;utf8&#x27;);</span></span><br><span class="line"><span class="comment">// // 结束写入过程  触发finish事件</span></span><br><span class="line"><span class="comment">// myWriteStream.end();</span></span><br><span class="line"><span class="comment">// // 设置结束监听</span></span><br><span class="line"><span class="comment">// myWriteStream.on(&#x27;finish&#x27;, function() &#123;</span></span><br><span class="line"><span class="comment">//     console.log(&#x27;finished&#x27;);</span></span><br><span class="line"><span class="comment">// &#125;);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用管道方法 实现写入  </span></span><br><span class="line">myReadStream.pipe(myWriteStream);</span><br></pre></td></tr></table></figure>

<h2 id="包"><a href="#包" class="headerlink" title="包"></a>包</h2><p>​    导出包</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> counter = <span class="function"><span class="keyword">function</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;There are &quot;</span> + arr.length + <span class="string">&quot; elements in the array&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// var adder = function(a, b) &#123;</span></span><br><span class="line"><span class="comment">//     // ES6写法</span></span><br><span class="line"><span class="comment">//     return `the sum of the 2 numbers is $(a+b)`;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> pi = <span class="number">3.14</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// console.log(counter([&quot;ruby&quot;, &quot;nodejs&quot;, &quot;react&quot;]));</span></span><br><span class="line"><span class="comment">// module.exports.counter = counter;</span></span><br><span class="line"><span class="comment">// module.exports.adder = adder;</span></span><br><span class="line"><span class="comment">// module.exports.pi = pi;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    counter:counter,</span><br><span class="line">    adder:<span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// ES6写法</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">`the sum of the 2 numbers is $(a+b)`</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    pi:pi,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="http包"><a href="#http包" class="headerlink" title="http包"></a>http包</h2><p>​        创建服务、监听端口、返回数据</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> onRequest = <span class="function"><span class="keyword">function</span>(<span class="params">request, response</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;Request received&#x27;</span>);</span><br><span class="line">    response.writeHead(<span class="number">200</span>, &#123;<span class="string">&#x27;Content-Type&#x27;</span> : <span class="string">&#x27;text/plain&#x27;</span>&#125;);</span><br><span class="line">    <span class="comment">// response.write(&quot;Hello from out application&quot;);</span></span><br><span class="line">    <span class="comment">// response.end()</span></span><br><span class="line">    response.end(<span class="string">&quot;Hello from out application&quot;</span>)</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> server = http.createServer(onRequest);</span><br><span class="line"></span><br><span class="line"><span class="comment">// request 和 response 都是stream实例</span></span><br><span class="line"><span class="comment">// var server = http.createServer(function(request, response)&#123;</span></span><br><span class="line"><span class="comment">//     console.log(&#x27;Request received&#x27;);</span></span><br><span class="line"><span class="comment">//     response.writeHead(200, &#123;&#x27;Content-Type&#x27; : &#x27;text/plain&#x27;&#125;);</span></span><br><span class="line"><span class="comment">//     // response.write(&quot;Hello from out application&quot;);</span></span><br><span class="line"><span class="comment">//     // response.end()</span></span><br><span class="line"><span class="comment">//     response.end(&quot;Hello from out application&quot;)</span></span><br><span class="line"><span class="comment">// &#125;);</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> port = <span class="number">4000</span>;</span><br><span class="line"><span class="comment">// 监听端口</span></span><br><span class="line">server.listen(port);</span><br><span class="line"><span class="comment">// server.listen(port, &#x27;127.0.0.1&#x27;);</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;Server start on local host port &#x27;</span> + port);</span><br></pre></td></tr></table></figure>

<p>​        返回json数据</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> onRequest = <span class="function"><span class="keyword">function</span>(<span class="params">request, response</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;Request received&#x27;</span>);</span><br><span class="line">    response.writeHead(<span class="number">200</span>, &#123;<span class="string">&#x27;Content-Type&#x27;</span> : <span class="string">&#x27;text/json&#x27;</span>&#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> myObj = &#123;</span><br><span class="line">        name : <span class="string">&quot;hfpp2012&quot;</span>,</span><br><span class="line">        job : <span class="string">&quot;programmer&quot;</span>,</span><br><span class="line">        age : <span class="number">27</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 序列化传输</span></span><br><span class="line">    response.end(<span class="built_in">JSON</span>.stringify(myObj));</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> server = http.createServer(onRequest);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> port = <span class="number">4000</span>;</span><br><span class="line"><span class="comment">// 监听端口</span></span><br><span class="line">server.listen(port);</span><br><span class="line"><span class="comment">// server.listen(port, &#x27;127.0.0.1&#x27;);</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;Server start on local host port &#x27;</span> + port);</span><br></pre></td></tr></table></figure>

<p>​        返回网页数据 html</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> onRequest = <span class="function"><span class="keyword">function</span>(<span class="params">request, response</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;Request received&#x27;</span>);</span><br><span class="line">    <span class="comment">// 内容类型改为html</span></span><br><span class="line">    response.writeHead(<span class="number">200</span>, &#123;<span class="string">&#x27;Content-Type&#x27;</span> : <span class="string">&#x27;text/html&#x27;</span>&#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建读取流</span></span><br><span class="line">    <span class="keyword">var</span> myReadStream =  fs.createReadStream(__dirname + <span class="string">&#x27;/html/index.html&#x27;</span>, <span class="string">&#x27;utf8&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> myObj = &#123;</span><br><span class="line">        name : <span class="string">&quot;hfpp2012&quot;</span>,</span><br><span class="line">        job : <span class="string">&quot;programmer&quot;</span>,</span><br><span class="line">        age : <span class="number">27</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将流写入response</span></span><br><span class="line">    myReadStream.pipe(response);</span><br><span class="line">    <span class="comment">// 不能添加 response.end();</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> server = http.createServer(onRequest);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> port = <span class="number">4000</span>;</span><br><span class="line"><span class="comment">// 监听端口</span></span><br><span class="line">server.listen(port);</span><br><span class="line"><span class="comment">// server.listen(port, &#x27;127.0.0.1&#x27;);</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;Server start on local host port &#x27;</span> + port);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>​        url路由</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> onRequest = <span class="function"><span class="keyword">function</span>(<span class="params">request, response</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;Request received&#x27;</span> +  request.url);</span><br><span class="line">    <span class="comment">// if (request.url === &#x27;/&#x27; || request.url === &#x27;/home&#x27;)</span></span><br><span class="line">    <span class="comment">// &#123;</span></span><br><span class="line">    <span class="comment">//     // 内容类型改为html</span></span><br><span class="line">    <span class="comment">//     response.writeHead(200, &#123;&#x27;Content-Type&#x27; : &#x27;text/html&#x27;&#125;);</span></span><br><span class="line">    <span class="comment">//     fs.createReadStream(__dirname + &#x27;/html/index.html&#x27;, &#x27;utf8&#x27;).pipe(response);</span></span><br><span class="line">    <span class="comment">// &#125; else if(request.url === &#x27;/review&#x27;) &#123;</span></span><br><span class="line">    <span class="comment">//     response.writeHead(200, &#123;&#x27;Content-Type&#x27; : &#x27;text/html&#x27;&#125;);</span></span><br><span class="line">    <span class="comment">//     fs.createReadStream(__dirname + &#x27;/html/review.html&#x27;, &#x27;utf8&#x27;).pipe(response);</span></span><br><span class="line">    <span class="comment">// &#125; else if(request.url === &#x27;/api/v1/records&#x27;)  &#123;</span></span><br><span class="line">    <span class="comment">//     response.writeHead(200, &#123;&#x27;Content-Type&#x27; : &#x27;text/json&#x27;&#125;);</span></span><br><span class="line">    <span class="comment">//     var jsonObj = &#123;</span></span><br><span class="line">    <span class="comment">//         name : &quot;hfpp2012&quot;,</span></span><br><span class="line">    <span class="comment">//     &#125;;</span></span><br><span class="line">    <span class="comment">//     response.end(JSON.stringify(jsonObj));</span></span><br><span class="line">    <span class="comment">// &#125; else &#123;</span></span><br><span class="line">    <span class="comment">//     response.writeHead(200, &#123;&#x27;Content-Type&#x27; : &#x27;text/html&#x27;&#125;);</span></span><br><span class="line">    <span class="comment">//     fs.createReadStream(__dirname + &#x27;/html/404.html&#x27;, &#x27;utf8&#x27;).pipe(response);</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> server = http.createServer(onRequest);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> port = <span class="number">4000</span>;</span><br><span class="line"><span class="comment">// 监听端口</span></span><br><span class="line">server.listen(port);</span><br><span class="line"><span class="comment">// server.listen(port, &#x27;127.0.0.1&#x27;);</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;Server start on local host port &#x27;</span> + port);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>​        简单的web服务器实现</p>
<ul>
<li> app.js</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> server = <span class="built_in">require</span>(<span class="string">&#x27;./server&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> router = <span class="built_in">require</span>(<span class="string">&quot;./router&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> handler = <span class="built_in">require</span>(<span class="string">&quot;./handler&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> handle = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">handle[<span class="string">&quot;/&quot;</span>] = handler.home;</span><br><span class="line">handle[<span class="string">&quot;/home&quot;</span>] = handler.home;</span><br><span class="line">handle[<span class="string">&quot;/review&quot;</span>] = handler.review;</span><br><span class="line">handle[<span class="string">&quot;/api/v1/records&quot;</span>] = handler.api_records;</span><br><span class="line"></span><br><span class="line">server.startServer(router.router, handle);</span><br></pre></td></tr></table></figure>

<ul>
<li>server.js</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="comment">// url工具库</span></span><br><span class="line"><span class="keyword">var</span> url = <span class="built_in">require</span>(<span class="string">&#x27;url&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> querystring = <span class="built_in">require</span>(<span class="string">&#x27;querystring&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">startServer</span>(<span class="params">router, handle</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> onRequest = <span class="function"><span class="keyword">function</span>(<span class="params">request, response</span>)</span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 取出路径</span></span><br><span class="line">        <span class="keyword">var</span> pathname = url.parse(request.url).pathname;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;Request received&#x27;</span> + pathname);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> data = [];</span><br><span class="line">        request.on(<span class="string">&#x27;error&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.error(err);</span><br><span class="line">        &#125;).on(<span class="string">&#x27;data&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">trunck</span>)</span>&#123;</span><br><span class="line">            data.push(trunck);</span><br><span class="line">        &#125;).on(<span class="string">&#x27;end&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(request.method === <span class="string">&quot;POST&quot;</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (data.length &gt; <span class="number">1e6</span>) &#123;</span><br><span class="line">                    request.connection.destroy();</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                     <span class="comment">// 解析 POST</span></span><br><span class="line">                    data = Buffer.concat(data).toString();</span><br><span class="line">                    router(handle, pathname, response, querystring.parse(data));</span><br><span class="line">                &#125;</span><br><span class="line">               </span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (request.method === <span class="string">&quot;GET&quot;</span>)&#123;</span><br><span class="line">                <span class="comment">// 解析GET</span></span><br><span class="line">                <span class="comment">// parse 解析url true  转换为对象  false 字符串</span></span><br><span class="line">                <span class="keyword">var</span> params = url.parse(request.url, <span class="literal">true</span>).query;</span><br><span class="line"></span><br><span class="line">                router(handle, pathname, response, params);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">      </span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">var</span> server = http.createServer(onRequest);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> port = <span class="number">4000</span>;</span><br><span class="line">    <span class="comment">// 监听端口</span></span><br><span class="line">    server.listen(port);</span><br><span class="line">    <span class="comment">// server.listen(port, &#x27;127.0.0.1&#x27;);</span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;Server start on local host port &#x27;</span> + port);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports.startServer = startServer</span><br></pre></td></tr></table></figure>

<ul>
<li>router.js</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">router</span>(<span class="params">handle, pathname, response, params</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;Routing a request for &#x27;</span> + pathname);</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span>(handle[pathname]) === <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">        handle[pathname](response, params);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    response.writeHead(<span class="number">200</span>, &#123;<span class="string">&#x27;Content-Type&#x27;</span> : <span class="string">&#x27;text/html&#x27;</span>&#125;);</span><br><span class="line">    fs.createReadStream(__dirname + <span class="string">&#x27;/html/404.html&#x27;</span>, <span class="string">&#x27;utf8&#x27;</span>).pipe(response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports.router = router</span><br></pre></td></tr></table></figure>

<ul>
<li>handler.js</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">home</span>(<span class="params">response, params</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;Excuting &#x27;home&#x27; handler&quot;</span>);</span><br><span class="line">    response.writeHead(<span class="number">200</span>, &#123;<span class="string">&#x27;Content-Type&#x27;</span> : <span class="string">&#x27;text/html&#x27;</span>&#125;);</span><br><span class="line">    fs.createReadStream(__dirname + <span class="string">&#x27;/html/index.html&#x27;</span>, <span class="string">&#x27;utf8&#x27;</span>).pipe(response);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">review</span>(<span class="params">response, params</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;Excuting &#x27;review&#x27; handler&quot;</span>);</span><br><span class="line">    response.writeHead(<span class="number">200</span>, &#123;<span class="string">&#x27;Content-Type&#x27;</span> : <span class="string">&#x27;text/html&#x27;</span>&#125;);</span><br><span class="line">    fs.createReadStream(__dirname + <span class="string">&#x27;/html/review.html&#x27;</span>, <span class="string">&#x27;utf8&#x27;</span>).pipe(response);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">api_records</span>(<span class="params">response, params</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;Excuting &#x27;api_records&#x27; handler&quot;</span>);</span><br><span class="line">    <span class="comment">// response.writeHead(200, &#123;&#x27;Content-Type&#x27; : &#x27;text/json&#x27;&#125;);</span></span><br><span class="line">    <span class="comment">// var jsonObj = &#123;</span></span><br><span class="line">    <span class="comment">//     name : &quot;hfpp2012&quot;,</span></span><br><span class="line">    <span class="comment">// &#125;;</span></span><br><span class="line">    <span class="comment">// response.end(JSON.stringify(jsonObj));</span></span><br><span class="line">    response.end(<span class="built_in">JSON</span>.stringify(params));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    home : home,</span><br><span class="line">    review : review,</span><br><span class="line">    api_records : api_records,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis深入学习</title>
    <url>/2021/03/20/Redis%E6%B7%B1%E5%85%A5%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<p><span class="exturl" data-url="aHR0cDovL3d3dy5yZWRpcy5jbi8=" title="http://www.redis.cn/">官方<i class="fa fa-external-link"></i></span>介绍：Redis 是一个开源（BSD许可）的，内存中的数据结构存储系统，它可以用作数据库、缓存和消息中间件。 它支持多种类型的数据结构，如 <span class="exturl" data-url="aHR0cDovL3d3dy5yZWRpcy5jbi90b3BpY3MvZGF0YS10eXBlcy1pbnRyby5odG1sI3N0cmluZ3M=" title="http://www.redis.cn/topics/data-types-intro.html#strings">字符串（strings）<i class="fa fa-external-link"></i></span>， <span class="exturl" data-url="aHR0cDovL3d3dy5yZWRpcy5jbi90b3BpY3MvZGF0YS10eXBlcy1pbnRyby5odG1sI2hhc2hlcw==" title="http://www.redis.cn/topics/data-types-intro.html#hashes">散列（hashes）<i class="fa fa-external-link"></i></span>， <span class="exturl" data-url="aHR0cDovL3d3dy5yZWRpcy5jbi90b3BpY3MvZGF0YS10eXBlcy1pbnRyby5odG1sI2xpc3Rz" title="http://www.redis.cn/topics/data-types-intro.html#lists">列表（lists）<i class="fa fa-external-link"></i></span>， <span class="exturl" data-url="aHR0cDovL3d3dy5yZWRpcy5jbi90b3BpY3MvZGF0YS10eXBlcy1pbnRyby5odG1sI3NldHM=" title="http://www.redis.cn/topics/data-types-intro.html#sets">集合（sets）<i class="fa fa-external-link"></i></span>， <span class="exturl" data-url="aHR0cDovL3d3dy5yZWRpcy5jbi90b3BpY3MvZGF0YS10eXBlcy1pbnRyby5odG1sI3NvcnRlZC1zZXRz" title="http://www.redis.cn/topics/data-types-intro.html#sorted-sets">有序集合（sorted sets）<i class="fa fa-external-link"></i></span> 与范围查询， <span class="exturl" data-url="aHR0cDovL3d3dy5yZWRpcy5jbi90b3BpY3MvZGF0YS10eXBlcy1pbnRyby5odG1sI2JpdG1hcHM=" title="http://www.redis.cn/topics/data-types-intro.html#bitmaps">bitmaps<i class="fa fa-external-link"></i></span>， <span class="exturl" data-url="aHR0cDovL3d3dy5yZWRpcy5jbi90b3BpY3MvZGF0YS10eXBlcy1pbnRyby5odG1sI2h5cGVybG9nbG9ncw==" title="http://www.redis.cn/topics/data-types-intro.html#hyperloglogs">hyperloglogs<i class="fa fa-external-link"></i></span> 和 <span class="exturl" data-url="aHR0cDovL3d3dy5yZWRpcy5jbi9jb21tYW5kcy9nZW9hZGQuaHRtbA==" title="http://www.redis.cn/commands/geoadd.html">地理空间（geospatial）<i class="fa fa-external-link"></i></span> 索引半径查询。 Redis 内置了 <span class="exturl" data-url="aHR0cDovL3d3dy5yZWRpcy5jbi90b3BpY3MvcmVwbGljYXRpb24uaHRtbA==" title="http://www.redis.cn/topics/replication.html">复制（replication）<i class="fa fa-external-link"></i></span>，<span class="exturl" data-url="aHR0cDovL3d3dy5yZWRpcy5jbi9jb21tYW5kcy9ldmFsLmh0bWw=" title="http://www.redis.cn/commands/eval.html">LUA脚本（Lua scripting）<i class="fa fa-external-link"></i></span>， <span class="exturl" data-url="aHR0cDovL3d3dy5yZWRpcy5jbi90b3BpY3MvbHJ1LWNhY2hlLmh0bWw=" title="http://www.redis.cn/topics/lru-cache.html">LRU驱动事件（LRU eviction）<i class="fa fa-external-link"></i></span>，<span class="exturl" data-url="aHR0cDovL3d3dy5yZWRpcy5jbi90b3BpY3MvdHJhbnNhY3Rpb25zLmh0bWw=" title="http://www.redis.cn/topics/transactions.html">事务（transactions）<i class="fa fa-external-link"></i></span> 和不同级别的 <span class="exturl" data-url="aHR0cDovL3d3dy5yZWRpcy5jbi90b3BpY3MvcGVyc2lzdGVuY2UuaHRtbA==" title="http://www.redis.cn/topics/persistence.html">磁盘持久化（persistence）<i class="fa fa-external-link"></i></span>， 并通过 <span class="exturl" data-url="aHR0cDovL3d3dy5yZWRpcy5jbi90b3BpY3Mvc2VudGluZWwuaHRtbA==" title="http://www.redis.cn/topics/sentinel.html">Redis哨兵（Sentinel）<i class="fa fa-external-link"></i></span>和自动 <span class="exturl" data-url="aHR0cDovL3d3dy5yZWRpcy5jbi90b3BpY3MvY2x1c3Rlci10dXRvcmlhbC5odG1s" title="http://www.redis.cn/topics/cluster-tutorial.html">分区（Cluster）<i class="fa fa-external-link"></i></span>提供高可用性（high availability）。</p>
<span id="more"></span>

<p>补充：</p>
<p>redis：6.0版本后开放了多线程，之前内部操作有多线程，如磁盘持久化</p>
<p>支持大部分编程语言</p>
<h2 id="性能："><a href="#性能：" class="headerlink" title="性能："></a>性能：</h2><p>官方的bench-mark数据</p>
<p>测试完成了50个并发，10w个请求</p>
<p>设置和获取的值是一个256字节字符串</p>
<p>结果:读的速度是11w次/s  写的速度是8.1w次/s</p>
<h1 id="linux下的配置"><a href="#linux下的配置" class="headerlink" title="linux下的配置"></a>linux下的配置</h1><h2 id="后台启动"><a href="#后台启动" class="headerlink" title="后台启动"></a>后台启动</h2><p><code>redis.conf</code>文件中</p>
<p>daemonize 改为 yes</p>
<p><code>./redis-server redis.conf</code> 启动</p>
<p>使用ps查看是否启动成功</p>
<h2 id="连接保护"><a href="#连接保护" class="headerlink" title="连接保护"></a>连接保护</h2><p><code>bind + ip</code> 绑定ip，仅允许指定ip连接  注释掉，所有ip可访问</p>
<p><code>database 16</code>    默认16个数据库，(逻辑)虚拟数据库</p>
<p>测试连接即可</p>
<p><code>requirepass + password</code>设置密码</p>
<h2 id="连接数据库"><a href="#连接数据库" class="headerlink" title="连接数据库"></a>连接数据库</h2><p><code>./redis-cli -p [port] -a [account]</code>   配置端口和用户</p>
<p><code>ping</code> 正常返回值为 <code>PONG</code></p>
<p><code>select dbNo.</code>选择数据库</p>
<h1 id="关系型数据库和非关系型数据库"><a href="#关系型数据库和非关系型数据库" class="headerlink" title="关系型数据库和非关系型数据库"></a>关系型数据库和非关系型数据库</h1><h2 id="关系型数据库"><a href="#关系型数据库" class="headerlink" title="关系型数据库"></a>关系型数据库</h2><p>采用关系模型组织数据的数据库。采用二维表格模型， 一行为记录，一列为字段</p>
<h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ul>
<li>容易理解</li>
<li>使用方便，sql语句</li>
<li>易于维护 丰富的完整性，顶点降低数据冗余和不一致性</li>
</ul>
<h3 id="确定"><a href="#确定" class="headerlink" title="确定"></a>确定</h3><ul>
<li>磁盘I/O成为并发瓶颈</li>
<li>海量数据查询效率低</li>
<li>横向拓展困难   无法简单的添加硬件和服务节点来扩展性能，扩展升级时通畅需要停机</li>
<li>多表的关联查询以及复杂的数据分析类的复杂sql，性能欠佳，保证acid，需要按照三范式设计</li>
</ul>
<h3 id="代表数据库"><a href="#代表数据库" class="headerlink" title="代表数据库"></a>代表数据库</h3><ul>
<li>MySQL </li>
<li>Oracle </li>
<li>Sql Server </li>
<li>DB2</li>
</ul>
<h2 id="非关系型数据库"><a href="#非关系型数据库" class="headerlink" title="非关系型数据库"></a>非关系型数据库</h2><p>非关系型，分布式，一般不保证遵循acid原则的数据库，键值对存储，结构不固定</p>
<h3 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a>优点</h3><ul>
<li>根据需求添加字段，不需要多表联查，仅需key就可对应出value</li>
<li>适用于SNS(社会化网络服务软件)</li>
<li>严格上说不是数据库，是一种数据结构化存储方法的集合</li>
</ul>
<h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ul>
<li>只能存储相对简单的数据</li>
<li>不适合复杂查询的数据</li>
<li>不适合持久存储海量数据</li>
</ul>
<h3 id="代表数据库-1"><a href="#代表数据库-1" class="headerlink" title="代表数据库"></a>代表数据库</h3><ul>
<li>k·v：Redis Memcache</li>
<li>文档：MongoDB</li>
<li>搜索：Elasticsearch，Solr</li>
<li>可拓展性分布式：HBase</li>
</ul>
<h2 id="比较"><a href="#比较" class="headerlink" title="比较"></a>比较</h2><table>
<thead>
<tr>
<th>内容</th>
<th>关系型数据库</th>
<th>非关系型数据库</th>
</tr>
</thead>
<tbody><tr>
<td>服务费</td>
<td>有些需要收费 Oracle</td>
<td>基本都是开源的</td>
</tr>
<tr>
<td>查询数据</td>
<td>存储于硬盘中，速度慢</td>
<td>数据存于缓存中，速度快</td>
</tr>
<tr>
<td>存储格式</td>
<td>只支持基础类型</td>
<td>k-v，文档，图片等</td>
</tr>
<tr>
<td>扩展性</td>
<td>有多表查询机制，扩展困难</td>
<td>数据之间没有耦合，易于拓展</td>
</tr>
<tr>
<td>持久性</td>
<td>适用持久存储，海量存储</td>
<td>不适合持久存储，海量存储</td>
</tr>
<tr>
<td>数据一致性</td>
<td>事务能力强，强调数据的强一致性</td>
<td>事务能力弱，强调数据的最终一致性</td>
</tr>
</tbody></table>
<h1 id="Redis使用技巧"><a href="#Redis使用技巧" class="headerlink" title="Redis使用技巧"></a>Redis使用技巧</h1><ul>
<li><h2 id="层级目录"><a href="#层级目录" class="headerlink" title="层级目录"></a>层级目录</h2></li>
</ul>
<p><code>set user:1:cart1:item1 phone</code>    通过格式化的key实现层级目录</p>
<ul>
<li><h3 id="通用删除"><a href="#通用删除" class="headerlink" title="通用删除"></a>通用删除</h3></li>
</ul>
<p><code>del key</code></p>
<ul>
<li><h3 id="失效时间"><a href="#失效时间" class="headerlink" title="失效时间"></a>失效时间</h3></li>
</ul>
<p>存入时设置</p>
<p><code>...    EX time</code>  time单位为秒 <code>PX</code>毫秒 </p>
<p> <code>nx</code>不存在失败 <code>xx</code>已经存在才成功  实现分布式锁时候使用</p>
<p>为已存在的key设置</p>
<p><code>expire key time</code> 对应秒   <code>pexpire</code>为毫秒</p>
<p>查看失效时间</p>
<p><code>ttl key</code>  -1永不失效  -2已经失效</p>
<ul>
<li>存取对象</li>
</ul>
<p>通过json xml等方式实现序列化 反序列化，然后按照键值对方式存取即可。</p>
<h1 id="Redis持久化方案"><a href="#Redis持久化方案" class="headerlink" title="Redis持久化方案"></a>Redis持久化方案</h1><p>宕机会造成数据丢失。</p>
<p>磁盘持久化</p>
<ul>
<li><p><code>bgsave</code> 主动将数据保存到磁盘</p>
</li>
<li><p>rdb方案</p>
<p><code>redsi.conf </code>配置中  <code>dbfilename dump.rdb</code></p>
<p><code>save 900 1</code>:900秒内一个数据发生了变化，保存   每900秒执行一次</p>
<p><code>save 300 10</code>:300秒内十个数据发生了变化，保存</p>
<p><code>save 60 10000</code>:60秒内10000个数据发生了变化，保存</p>
<p>优点 </p>
<p>​    不需要手动输入命令</p>
<p>缺点</p>
<p>​    依旧可能丢失数据</p>
</li>
<li><p>aof方案</p>
</li>
</ul>
<p><code>redsi.conf </code>配置中 </p>
<p> <code>appendonly no </code> 开启后rdb默认失效</p>
<p><code>appendfilename &quot;appendonly.aof&quot;</code> 文件存放位置</p>
<p>存放所有命令。实时性强，不会存在丢失。</p>
<p>aof文件大小会不断累加。</p>
<ul>
<li>aof+rdb方案</li>
</ul>
<h1 id="Redis搭建主从服用模型"><a href="#Redis搭建主从服用模型" class="headerlink" title="Redis搭建主从服用模型"></a>Redis搭建主从服用模型</h1><p>主从服务器</p>
<p>主服务器  负责写</p>
<p>从服务器  只能读</p>
<p><code>info replication</code></p>
<p>优点:解决了单点故障</p>
<p>缺点:主服务器挂掉  会产生脏数据</p>
<p>​        三台服务器数据一样，资源浪费</p>
<p>发现主节点挂掉后，重新选举一个主节点</p>
<p><code>sentinel</code></p>
<p><code>sentinel.conf</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sentinel monitor mymaster 192.168.10.100 6379 2</span><br><span class="line">sentinel auth-pass mymaster root		&#x2F;&#x2F; 知道密码才能监控</span><br><span class="line">sentinel down-afer-milliseconds 30000	&#x2F;&#x2F; 监控30s延迟  避免网络波动造成的误判 </span><br><span class="line">sentinel failover-timeout mymaster 180000 &#x2F;&#x2F; 连续三分钟没能选举成功则放弃选举</span><br></pre></td></tr></table></figure>

<p>集群</p>
<p>原生集群</p>
<p>redis coi  通过集群配置 meet实现相互通信  脚本设置槽位</p>
<p>redis-trib</p>
<p>第三方</p>
<p>codis 中间层</p>
<p>优点：高可靠</p>
<p>缺点：成本高 配置复杂</p>
<h1 id="缓存问题的解决方案"><a href="#缓存问题的解决方案" class="headerlink" title="缓存问题的解决方案"></a>缓存问题的解决方案</h1><p><strong>带缓存数据查询流程</strong></p>
<ol>
<li>查询缓存，缓存数据存在则直接返回，否则查询数据库</li>
<li>查询数据，数据存在则返回数据，并添加到缓存，否则返回无数据</li>
</ol>
<p><strong>key的过期淘汰机制</strong></p>
<p>​    Redis可以设置缓存数据的过期时间。但不是过期时间一道，马上就会删除数据。</p>
<ul>
<li><p>定期删除</p>
<p>Redis默认是每隔100马上就随机抽取一些设置了过期时间的key，检查其是否过期，如果过期就删除。采用定期随机检测方式主要是出于性能考虑。(如果数据量很大，每次全查很消耗性能)</p>
</li>
<li><p>惰性删除</p>
<p>随机抽取会导致很多key到了过期时间而没有被删除。用户在查key的时候，Redis会再次检测是否过期，过期则删除这个key。但任然存在过期不会删除的情况。</p>
</li>
</ul>
<p><strong>内存淘汰机制</strong></p>
<p>定期删除和惰性删除都无法即使删除的数据，会在内存中堆积，造成资源消耗。</p>
<ul>
<li>volatile-lru(一般采用):从已设置过期时间的数据集中挑选最近最少使用的数据删除。</li>
<li>volatile-ttl:从已设置过期时间的数据集中挑选将要过期的数据删除。</li>
<li>volatile-random:从已设置过期时间的数据集中随机挑选删除。</li>
<li>allkeys-lru:移除最近最少使用的key。</li>
<li>allkeys-random:随机移除。</li>
<li>no-enviciton(默认)：当内存不足以容纳新数据时候，会产生错误。</li>
</ul>
<p>重要数据设置永不过期。配置信息保存到数据库。</p>
<h2 id="缓存击穿"><a href="#缓存击穿" class="headerlink" title="缓存击穿"></a>缓存击穿</h2><p>由于热门key缓存过期，导致大量访问涌入数据库。</p>
<ul>
<li>不在Redis设置过期时间，而添加一个过期表示。当数据即将过期时，启动异步线程主动更新缓存。该方案任然存在拿到脏数据的可能。</li>
<li>如果数据必须时新数据。除了设置为永不过期外，外加一个互斥锁，保证缓存的单线程写。但是锁会降低性能。</li>
</ul>
<h2 id="缓存穿透"><a href="#缓存穿透" class="headerlink" title="缓存穿透"></a>缓存穿透</h2><p>缓存和数据库均不能获取数据。</p>
<p>造成原因：确实没有  恶意攻击</p>
<p>解决方案</p>
<ul>
<li>缓存失效时，先去获取锁，等到锁后再去请求数据库，没有得到则一段时间后再试。</li>
<li>采用异步更新策略，无论key是否渠道值都直接返回。value值中委会一个缓存失效时间，缓存过期，异步启一个线程去都数据库，更新缓存。需要做缓存预热(项目启动前，线加载部分缓存数据)</li>
<li>提供一个能迅速判断请求是否有效的拦截机制。比如：布隆过滤器，内部维护一系列合法有效的key。迅速判断出，请求所携带的key是否合法有效，如果不合法则直接返回。</li>
<li>如果从数据库查询的对象为空，也加入缓存，知识设定的缓存过期时间比较短。</li>
</ul>
<h2 id="缓存雪崩"><a href="#缓存雪崩" class="headerlink" title="缓存雪崩"></a>缓存雪崩</h2><p>大量热门key缓存失效。由于查询量过大导致DB宕机。</p>
<p>解决方案</p>
<ul>
<li>给缓存的失效时间，加上一个随机值，避免集体失效。</li>
<li>如果是集群部署，在不同的结点分布热点key。</li>
<li>使用互斥锁，明显降低吞吐量。</li>
<li>双缓存，多级缓存。缓存A失效时间二十分钟，B不设失效时间。自己做缓存预热。<ol>
<li>缓存A有则直接返回。没有则从B读取。</li>
<li>B有返回，并启动一个异步更行A。</li>
<li>B没有，启动一个异步线程更新A和B。</li>
</ol>
</li>
</ul>
]]></content>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis数据库使用的入门</title>
    <url>/2021/03/12/Redis%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BD%BF%E7%94%A8%E7%9A%84%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<h3 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h3><ul>
<li>Redis：Remote Dictioonary Server字典服务器。性能非常高，单机能达到15w qps，通畅作为缓存，支持持久化</li>
<li>Redis是完全开源的，高性能(key-value)分布式内存数据库，也可称为数据结构服务器。</li>
</ul>
<span id="more"></span>

<ul>
<li>Redis：是一个NoSql数据库，不是关系型数据库。</li>
</ul>
<h3 id="二、安装"><a href="#二、安装" class="headerlink" title="二、安装"></a>二、安装</h3><p>​    <span class="exturl" data-url="aHR0cDovL3d3dy5yZWRpcy5jbi8=" title="http://www.redis.cn/">官网<i class="fa fa-external-link"></i></span>下载后直接解压即可，官网可以方便的学习redis指令的使用。</p>
<h3 id="三、启动服务"><a href="#三、启动服务" class="headerlink" title="三、启动服务"></a>三、启动服务</h3><ul>
<li>启动服务器：运行<code>redis-server.exe</code>  服务器会在6379端口进行监听</li>
<li>客户端连接：运行<code>redis-cli.exe</code> 默认连接到6379端口</li>
</ul>
<p>本文档由于简单体验redis，所有配置默认即可。</p>
<h3 id="四、体验redis服务"><a href="#四、体验redis服务" class="headerlink" title="四、体验redis服务"></a>四、体验redis服务</h3><h4 id="1-基本使用-数据库操作"><a href="#1-基本使用-数据库操作" class="headerlink" title="1.基本使用(数据库操作)"></a>1.基本使用(数据库操作)</h4><p>​        redis默认创建了16个数据库，初始默认使用0号数据库。</p>
<p>​    切换数据库    <code>    select index</code>  index:数据库编号</p>
<p>​    查看数据库大小 <code>dbsize [index]</code></p>
<p>​    清空当前数据库 <code>flushdb</code></p>
<p>​    清空所有数据库 <code>flushall</code></p>
<p>​    查看所有键 <code>keys *</code></p>
<h4 id="2-五大数据类型的操作"><a href="#2-五大数据类型的操作" class="headerlink" title="2.五大数据类型的操作"></a>2.五大数据类型的操作</h4><ul>
<li><h4 id="string"><a href="#string" class="headerlink" title="string"></a>string</h4><p>简单的key-value键值对</p>
<p>添加/修改 <code>set key value</code></p>
<p>查询 <code>get key value</code></p>
<p>删除 <code>del key</code></p>
<p>带有效时间的添加/修改 <code>setex key time value</code> time(s)后销毁数据</p>
<p>设置多个 <code>mset key1 value1 [key2 value2 ...]</code></p>
<p>获取多个 <code>mget key1 [key2 ...]</code></p>
</li>
<li><h4 id="hash"><a href="#hash" class="headerlink" title="hash"></a>hash</h4><p>类比 c中结构体、golang中的map，是string类型的field和value的映射表，适合用于存储对象。</p>
<p>添加/修改 <code>hset key field value</code></p>
<p>查询 <code>hget key field</code> </p>
<p>获取多个 <code>hgetall key</code></p>
<p>删除 <code>hdel key field</code></p>
<p>一次性设置多个field<code>hmset key field1 value1 [fiedl1 value2 ...]</code></p>
<p>一次性获取多个field <code>hmget key field1 [field2 ...]</code></p>
<p>获取hash字段数 <code>hlen key</code></p>
<p>判断是否存在字段 <code>hexist key field</code></p>
<p>删除整个hash <code>del key</code></p>
</li>
<li><h4 id="list"><a href="#list" class="headerlink" title="list"></a>list</h4><p>本质是双向链表，元素是有序（按照入链顺序存储），元素值可以重复。</p>
<p>左侧创建/添加 <code>lpush key value1 [value2  ...] </code></p>
<p>右侧创建/添加 <code>rpush key value1 [value2  ...] </code></p>
<p>查询 <code>lrange key start stop</code>  编号从左到右  从0开始</p>
<p>出链 从左侧出<code>lpop key</code> 从右侧出 <code>rpop key </code>  无元素后链表自动销毁</p>
<p>删除 <code>del key</code></p>
<p>获取长度 <code>llen key</code></p>
</li>
<li><h4 id="set"><a href="#set" class="headerlink" title="set"></a>set</h4><p>string类型的<strong>无序</strong>集合 ，底层是hashTable数据结构，不能存放重复数据</p>
<p>创建/添加 <code>sadd key value1 [value2 ...]</code></p>
<p>查询全部 <code>smembers key</code></p>
<p>判断是否存在 <code>sismember key value</code></p>
<p>移除元素 <code>srem key value</code></p>
<p>没有修改</p>
</li>
<li><h4 id="zset"><a href="#zset" class="headerlink" title="zset"></a>zset</h4><p>string类型的<strong>有序</strong>集合 ，不能存放重复数据</p>
<p>其他操作可类比set <code>zadd</code> <code>zrange</code> <code>zrevrange</code></p>
</li>
</ul>
]]></content>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue学习笔记</title>
    <url>/2021/03/16/Vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>​    Vue是一套用于构建用户界面的渐进式框架。与其它大型框架不同的是，Vue 被设计为可以自底向上逐层应用。Vue 的核心库只关注视图层，不仅易于上手，还便于与第三方库或既有项目整合。另一方面，当与现代化的工具链以及各种支持类库结合使用时。</p>
<span id="more"></span>

<p>​    Vue主要特点:</p>
<ul>
<li><p>简单、易学、轻量</p>
</li>
<li><p>数据驱动 双向数据绑定</p>
</li>
<li><p>组件化</p>
</li>
<li><p>支持局部刷新 用户路由</p>
<p>。。。</p>
</li>
</ul>
<h3 id="起步"><a href="#起步" class="headerlink" title="起步"></a>起步</h3><p>​    根据<span class="exturl" data-url="aHR0cHM6Ly9jbi52dWVqcy5vcmcv" title="https://cn.vuejs.org/">官网<i class="fa fa-external-link"></i></span>教程，起步学习。</p>
<ul>
<li><p>安装</p>
<p>创建一个Html文件，插入如下代码，引入Vue</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 开发环境版本，包含了有帮助的命令行警告 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>或者</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 生产环境版本，优化了尺寸和速度 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>声明式渲染</p>
<p>body中插入如下代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  &#123;&#123; message &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>插入script脚本：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var app &#x3D; new Vue(&#123;</span><br><span class="line">  el: &#39;#app&#39;,</span><br><span class="line">  data: &#123;</span><br><span class="line">    message: &#39;Hello Vue!&#39;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>运行html文件，就可以看到效果了。 Hello Vue</p>
</li>
</ul>
<h3 id="Vue实例"><a href="#Vue实例" class="headerlink" title="Vue实例"></a>Vue实例</h3><p>​    每个 Vue 应用都是通过用 <code>Vue</code> 函数创建一个新的 <strong>Vue 实例</strong>开始的：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  <span class="comment">// 选项</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>​    当一个 Vue 实例被创建时，它将 <code>data</code> 对象中的所有的 property 加入到 Vue 的<strong>响应式系统</strong>中。当这些 property 的值发生改变时，视图将会产生“响应”，即匹配更新为新的值。当这些数据改变时，视图会进行重渲染。值得注意的是只有当实例被创建时就已经存在于 <code>data</code> 中的 property 才是<strong>响应式</strong>的。这里唯一的例外是使用 <code>Object.freeze()</code>，这会阻止修改现有的 property，也意味着响应系统无法再<em>追踪</em>变化。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  foo: <span class="string">&#x27;bar&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.freeze(obj)</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">  data: obj</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="指令整理"><a href="#指令整理" class="headerlink" title="指令整理"></a>指令整理</h3><p>​    以下位一些常用指令示例，用法在例子中展示。</p>
<h4 id="v-text-和-v-html"><a href="#v-text-和-v-html" class="headerlink" title="v-text 和 v-html"></a>v-text 和 v-html</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- v-text指令 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 支持字符 简单的表达式 如串拼接 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-text</span>=<span class="string">&quot;message + &#x27;!&#x27;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-text</span>=<span class="string">&quot;info&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 差值表达式 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span> 深圳&#123;&#123; message +&#x27;!&#x27; &#125;&#125; <span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">     <span class="comment">&lt;!-- v-html指令 设置innerHTML--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 可以渲染html代码 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-html</span>=<span class="string">&quot;content&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-text</span>=<span class="string">&quot;content&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="v-on指令"><a href="#v-on指令" class="headerlink" title="v-on指令"></a>v-on指令</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- v-on指令注册事件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;v-on指令&quot;</span> <span class="attr">v-on:click</span>=<span class="string">&quot;doIt&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;v-on指令&quot;</span> <span class="attr">v-on:mouseenter</span>=<span class="string">&quot;doIt&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;双击事件&quot;</span> <span class="attr">v-on:dblclick</span>=<span class="string">&quot;doIt&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;v-on简写&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;doIt&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span> @<span class="attr">click</span>=<span class="string">&quot;changeFood&quot;</span>&gt;</span> &#123;&#123; food &#125;&#125; <span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- v-on 支持按键操作独立指令 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> @<span class="attr">keyup.enter</span>=<span class="string">&quot;sayHi&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">        el:<span class="string">&quot;#app&quot;</span>,</span><br><span class="line">        data : &#123;</span><br><span class="line">            food:<span class="string">&quot;西兰花炒蛋&quot;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        methods:&#123;</span><br><span class="line">            doIt:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                alert(<span class="string">&quot;做it&quot;</span>);</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">// vue 中使用this操作数据  只用关心如何改变数据即可</span></span><br><span class="line">            changeFood : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                <span class="built_in">this</span>.food += <span class="string">&quot;好好吃&quot;</span>;</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h4 id="v-show指令"><a href="#v-show指令" class="headerlink" title="v-show指令"></a>v-show指令</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"> <span class="comment">&lt;!-- v-show 根据表达式显示隐藏图片 修改的式dom元素属性 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;切换&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;changeIsShow&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;加年龄&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;addAge&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;img src=&quot;sword.jpg&quot; v-show=&quot;true&quot;&gt; --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;sword.jpg&quot;</span> <span class="attr">v-show</span>=<span class="string">&quot;isShow&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 支持表达式 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;sword.jpg&quot;</span> <span class="attr">v-show</span>=<span class="string">&quot;age&gt;=18&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="v-if指令"><a href="#v-if指令" class="headerlink" title="v-if指令"></a>v-if指令</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;切换&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;toggleIsShow&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- v-if 操作dom元素的存在  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-if</span>=<span class="string">&quot;isShow&quot;</span>&gt;</span> 我是一个p标签<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- v-show操作样式 频繁切换时使用 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-show</span>=<span class="string">&quot;isShow&quot;</span>&gt;</span> 我是一个p标签- v-show修饰<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-if</span>=<span class="string">&quot;temperature&gt;=35&quot;</span>&gt;</span>热死了<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="v-bind指令"><a href="#v-bind指令" class="headerlink" title="v-bind指令"></a>v-bind指令</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"> <span class="comment">&lt;!-- v-bind 操作属性 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">v-bind:src</span>=<span class="string">&quot;imgSrc&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 简化  --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 三元表达式方式 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">&quot;imgSrc&quot;</span> <span class="attr">:title</span>=<span class="string">&quot;imgTitle + &#x27;!!!&#x27;&quot;</span> <span class="attr">:class</span>=<span class="string">&quot;isActive?&#x27;active&#x27;:&#x27;&#x27;&quot;</span> </span></span><br><span class="line"><span class="tag">         @<span class="attr">click</span>=<span class="string">&quot;toggleIsActive&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 对象方式 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">&quot;imgSrc&quot;</span> <span class="attr">:title</span>=<span class="string">&quot;imgTitle + &#x27;!!!&#x27;&quot;</span> <span class="attr">:class</span>=<span class="string">&quot;&#123;&#x27;active&#x27;:isActive&#125;&quot;</span> </span></span><br><span class="line"><span class="tag">         @<span class="attr">click</span>=<span class="string">&quot;toggleIsActive&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="v-for指令"><a href="#v-for指令" class="headerlink" title="v-for指令"></a>v-for指令</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- v-for指令  可以根据数据渲染出多个dom元素 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;添加数据&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;add&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;移除数据&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;remove&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(item, index) in arr&quot;</span> <span class="attr">:title</span>=<span class="string">&quot;item&quot;</span>&gt;</span> &#123;&#123; index+1&#125;&#125; &#123;&#123; item &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-for</span>=<span class="string">&quot;item in vegetables&quot;</span>&gt;</span> &#123;&#123; item.name &#125;&#125; <span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="v-model指令"><a href="#v-model指令" class="headerlink" title="v-model指令"></a>v-model指令</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"> <span class="comment">&lt;!-- v-model 双向数据绑定 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;设置&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;setM&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;message&quot;</span> @<span class="attr">keyup.enter</span>=<span class="string">&quot;getM&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span> &#123;&#123; message &#125;&#125; <span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="Vue-Axios案例"><a href="#Vue-Axios案例" class="headerlink" title="Vue+Axios案例"></a>Vue+Axios案例</h3><p>​    axios的引入：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;unpkg.com&#x2F;axios&#x2F;dist&#x2F;axios.min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<p>​    html部分：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;获取笑话&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;getJoke&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; joke &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>​    Js部分：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el :<span class="string">&quot;#app&quot;</span>,</span><br><span class="line">    data : &#123;</span><br><span class="line">        joke : <span class="string">&quot;好笑&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    methods : &#123;</span><br><span class="line">        getJoke : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">var</span> that = <span class="built_in">this</span>;</span><br><span class="line">            axios.get(<span class="string">&quot;https://autumnfish.cn/api/joke&quot;</span>).then(</span><br><span class="line">                <span class="function"><span class="keyword">function</span>(<span class="params">response</span>) </span>&#123;</span><br><span class="line">                    <span class="built_in">console</span>.log(response.data);</span><br><span class="line">                    <span class="comment">// console.log(this.joke);</span></span><br><span class="line">                    that.joke = response.data;</span><br><span class="line">                &#125;), <span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(err);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="简易登录界面案例："><a href="#简易登录界面案例：" class="headerlink" title="简易登录界面案例："></a>简易登录界面案例：</h3><p>​    <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL1RpbnlCZWVyL0NoYXJ0Um9vbS90cmVlL21hc3Rlci9Gcm9udC1FbmQ=" title="https://github.com/TinyBeer/ChartRoom/tree/master/Front-End">项目链接<i class="fa fa-external-link"></i></span></p>
<p><img src="https://img.imgdb.cn/item/60503f395aedab222c12833a.jpg" alt="登录"></p>
<p>​    Html：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>海量用户聊天室内<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;css/login-style.css&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;img-container&quot;</span> <span class="attr">v-bind:style</span>=<span class="string">&quot;&#123;backgroundImage:&#x27;url(&#x27; + imgSrc[imgIndex] + &#x27;)&#x27;&#125;&quot;</span>&gt;</span> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;form-container&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;form-content&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">h2</span> <span class="attr">id</span>=<span class="string">&quot;function-selection&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">:class</span>=<span class="string">&quot;&#123;&#x27;seleted&#x27;: !isRegister&#125;&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;selectLogin&quot;</span>&gt;</span>Login<span class="tag">&lt;/<span class="name">span</span>&gt;</span>/<span class="tag">&lt;<span class="name">span</span> @<span class="attr">click</span>=<span class="string">&quot;selectRegister&quot;</span> <span class="attr">:class</span>=<span class="string">&quot;&#123;&#x27;seleted&#x27;: isRegister&#125;&quot;</span>&gt;</span>Register<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-show</span>=<span class="string">&quot;isRegister&quot;</span> <span class="attr">id</span>=<span class="string">&quot;user-name&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">class</span>=<span class="string">&quot;input&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;User Name&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;user-account&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">class</span>=<span class="string">&quot;input&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;ACCOUNT&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;user-password&quot;</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">class</span>=<span class="string">&quot;input&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;PAASSWORD&quot;</span>&gt;</span></span><br><span class="line">                 <span class="tag">&lt;<span class="name">a</span> <span class="attr">id</span>=<span class="string">&quot;forget-password&quot;</span> <span class="attr">v-show</span>=<span class="string">&quot;!isRegister&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>Forget the password?<span class="tag">&lt;/<span class="name">a</span>&gt;</span>         </span><br><span class="line">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;login-button&quot;</span> <span class="attr">v-text</span>=<span class="string">&quot;isRegister?&#x27;Register&#x27;:&#x27;Login&#x27;&quot;</span> &gt;</span>Login<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span><br><span class="line">            </span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/login-vue.js&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>​    CSS:</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="comment">/* 设置背景渐变 */</span></span><br><span class="line">    <span class="attribute">background-image</span>: <span class="built_in">linear-gradient</span>(to left, <span class="built_in">rgb</span>(<span class="number">114</span>, <span class="number">218</span>, <span class="number">231</span>), <span class="built_in">rgb</span>(<span class="number">214</span>, <span class="number">109</span>, <span class="number">235</span>));</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">justify-content</span>: center;</span><br><span class="line">    <span class="attribute">margin</span>:<span class="number">0px</span>;</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">100vh</span>;    </span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100vw</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#container</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">80%</span>;    </span><br><span class="line">    <span class="attribute">width</span>: <span class="number">80%</span>;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">5px</span> <span class="number">15px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">8</span>);</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#img-container</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">70%</span>;</span><br><span class="line">    <span class="comment">/* 图片大小自适应 */</span></span><br><span class="line">    <span class="attribute">background-size</span>: cover;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#form-container</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">30%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: white;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">justify-content</span>: center;</span><br><span class="line">    <span class="attribute">align-items</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#form-content</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">80%</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">70%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#form-content</span> <span class="selector-tag">h2</span> &#123;    </span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">24px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">80%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.seleted</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">32px</span>;</span><br><span class="line">    <span class="attribute">color</span>: blue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.input</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">80%</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">10px</span> <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">outline</span>: none;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">border-bottom</span>: <span class="number">2px</span> solid gray;</span><br><span class="line">    <span class="attribute">font</span>: <span class="number">300</span> <span class="number">30px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#forget-password</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: right;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">10px</span> <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">8px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#login-button</span> &#123;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">80%</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">18px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">30px</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">background-image</span>: <span class="built_in">linear-gradient</span>(to left, <span class="built_in">rgb</span>(<span class="number">114</span>, <span class="number">218</span>, <span class="number">231</span>), <span class="built_in">rgb</span>(<span class="number">214</span>, <span class="number">109</span>, <span class="number">235</span>));</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">outline</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>​    JS:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el : <span class="string">&quot;#container&quot;</span>,</span><br><span class="line">    data : &#123;</span><br><span class="line">        isRegister:<span class="literal">false</span>,</span><br><span class="line">        <span class="comment">// 图片路径请自行更改</span></span><br><span class="line">        imgSrc : [<span class="string">&quot;img/1.jpg&quot;</span>,<span class="string">&quot;img/2.jpg&quot;</span>,<span class="string">&quot;img/3.jpg&quot;</span>,<span class="string">&quot;img/4.jpg&quot;</span>,</span><br><span class="line">    ],</span><br><span class="line">        imgIndex : <span class="number">0</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    created: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">setInterval</span>(<span class="built_in">this</span>.lantenSlide, <span class="number">2000</span>);</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    methods : &#123;</span><br><span class="line">        selectLogin:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="comment">// alert(&quot;login&quot;)</span></span><br><span class="line">            <span class="built_in">this</span>.isRegister = <span class="literal">false</span>;</span><br><span class="line">        &#125;,</span><br><span class="line">        selectRegister:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="comment">// alert(&quot;register&quot;)</span></span><br><span class="line">            <span class="built_in">this</span>.isRegister = <span class="literal">true</span>;</span><br><span class="line">        &#125;,</span><br><span class="line">        lantenSlide : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">this</span>.imgIndex = ((<span class="built_in">this</span>.imgIndex+<span class="number">1</span>) % <span class="built_in">this</span>.imgSrc.length)</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="built_in">this</span>.imgIndex);</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);   </span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue环境搭建</title>
    <url>/2021/03/29/Vue%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<p>​        了解了一种新的vue环境搭建和管理的方式，方便的进行node版本切换，提高生成环境效率。</p>
<p>​        在测试过程中发现，切换node版本后，全局安装的hexo cli也会跟着切换，头疼。</p>
<span id="more"></span>

<h1 id="node-js安装"><a href="#node-js安装" class="headerlink" title="node.js安装"></a>node.js安装</h1><h2 id="方式一-官网下载"><a href="#方式一-官网下载" class="headerlink" title="方式一 官网下载"></a>方式一 官网下载</h2><p>进入<span class="exturl" data-url="aHR0cHM6Ly9ub2RlanMub3JnL2VuLw==" title="https://nodejs.org/en/">官网<i class="fa fa-external-link"></i></span>，选择需要的版本下载安装包。运行装包即可。</p>
<p>安装完成后使用<code>node -v</code>命令确认是否安装成功。</p>
<p>缺点：不能很好的兼容多个版本。</p>
<h2 id="方式二-使用NVM推荐"><a href="#方式二-使用NVM推荐" class="headerlink" title="方式二 使用NVM推荐"></a>方式二 使用NVM推荐</h2><ul>
<li>windows进入<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2NvcmV5YnV0bGVyL252bS13aW5kb3dz" title="https://github.com/coreybutler/nvm-windows">链接<i class="fa fa-external-link"></i></span></li>
</ul>
<p>根据提示选择nvm-noinstall.zip下载安装即可。安装前需要清除原有node.js数据。</p>
<p>觉得自己配置麻烦，可以选择install版本。</p>
<ul>
<li>mac进入<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL252bS1zaC9udm0=" title="https://github.com/nvm-sh/nvm">链接<i class="fa fa-external-link"></i></span></li>
</ul>
<p>根据提示执行安装命令即可。</p>
<p>优点：可以方便的在node多个版本间切换。</p>
<h3 id="NVM的使用"><a href="#NVM的使用" class="headerlink" title="NVM的使用"></a>NVM的使用</h3><ul>
<li>nvm –help 帮助文档</li>
<li>nvm –version  查看nvm版本</li>
<li>nvm ls available 查看所有可以安装的版本</li>
<li>nvm install [version] 安装指定版本  node最新版   –lts node最新长期维护版</li>
<li>nvm ls 列出已经安装的版本</li>
<li>nvm use [version] 切换版本</li>
</ul>
<p>node_mirror: <span class="exturl" data-url="aHR0cHM6Ly9ucG0udGFvYmFvLm9yZy9taXJyb3JzL25vZGUv" title="https://npm.taobao.org/mirrors/node/">https://npm.taobao.org/mirrors/node/<i class="fa fa-external-link"></i></span><br>npm_mirror: <span class="exturl" data-url="aHR0cHM6Ly9ucG0udGFvYmFvLm9yZy9taXJyb3JzL25wbS8=" title="https://npm.taobao.org/mirrors/npm/">https://npm.taobao.org/mirrors/npm/<i class="fa fa-external-link"></i></span></p>
<h1 id="yarn的安装"><a href="#yarn的安装" class="headerlink" title="yarn的安装"></a>yarn的安装</h1><p>进入<span class="exturl" data-url="aHR0cHM6Ly95YXJuLmJvb3Rjc3MuY29tL2RvY3MvaW5zdGFsbA==" title="https://yarn.bootcss.com/docs/install">中文官网安装地址<i class="fa fa-external-link"></i></span>选择好系统，安装安装文档安装即可。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cnpm install -g yarn</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">设置淘宝镜像</span><br><span class="line">yarn config set registry https:&#x2F;&#x2F;registry.npm.taobao.org&#x2F;</span><br></pre></td></tr></table></figure>

<h1 id="vue-cli安装"><a href="#vue-cli安装" class="headerlink" title="vue cli安装"></a>vue cli安装</h1><p><span class="exturl" data-url="aHR0cHM6Ly9jbGkudnVlanMub3JnL3poL2d1aWRlL2luc3RhbGxhdGlvbi5odG1s" title="https://cli.vuejs.org/zh/guide/installation.html">链接<i class="fa fa-external-link"></i></span>根据提示安装即可</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install -g @vue&#x2F;cli</span><br><span class="line">或者</span><br><span class="line">yarn global add @vue&#x2F;cli</span><br></pre></td></tr></table></figure>

<p><code>yarn global dir</code>获取全局安装路径</p>
<h1 id="vue创建项目"><a href="#vue创建项目" class="headerlink" title="vue创建项目"></a>vue创建项目</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vue create ginessential-vue</span><br><span class="line"></span><br><span class="line">选择manually select features</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Vue CLI v4.5.12</span><br><span class="line">? Please pick a preset: Manually select features</span><br><span class="line">? Check the features needed for your project:</span><br><span class="line"> (*) Choose Vue version</span><br><span class="line"> (*) Babel</span><br><span class="line"> ( ) TypeScript</span><br><span class="line"> ( ) Progressive Web App (PWA) Support</span><br><span class="line"> (*) Router</span><br><span class="line"> (*) Vuex</span><br><span class="line">&gt;(*) CSS Pre-processors</span><br><span class="line"> (*) Linter &#x2F; Formatter</span><br><span class="line"> ( ) Unit Testing</span><br><span class="line"> ( ) E2E Testing</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">v2.x</span><br><span class="line"></span><br><span class="line">history模式 y</span><br><span class="line"></span><br><span class="line">Sass&#x2F;SCCSS (with node-sass)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ESLint + Airbnb config</span><br><span class="line"></span><br><span class="line">Lint on save</span><br><span class="line"></span><br><span class="line">In dedicated config files</span><br><span class="line"></span><br><span class="line">n</span><br></pre></td></tr></table></figure>

<p>创建完成后：</p>
<p>使用vscode打开文件  在命令行中输入 <code>yarn serve</code></p>
<h1 id="修改策略"><a href="#修改策略" class="headerlink" title="修改策略"></a>修改策略</h1><p>​        yarn : 无法加载文件 D:\Program Files\nodejs\yarn.ps1，因为在此系统上禁止运行脚本。有关详细信息，请参阅 https:/go.microsoft.com<br>/fwlink/?LinkID=135170 中的 about_Execution_Policies。</p>
<p>解决方法：修改执行策略</p>
<ol>
<li><p>以管理员身份运行powershell</p>
</li>
<li><p>执行：set-ExecutionPolicy RemoteSigned</p>
<p>若要在本地计算机上运行您编写的未签名脚本和来自其他用户的签名脚本，请使用以下命令将计算机上的 执行策略更改为 RemoteSigned</p>
</li>
<li><p>查看执行策略：get-ExecutionPolicy</p>
</li>
</ol>
<h1 id="修改Eslint配置"><a href="#修改Eslint配置" class="headerlink" title="修改Eslint配置"></a>修改Eslint配置</h1><p>在setting.json中添加：开启自动修正</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;editor.codeActionsOnSave&quot; : &#123; &quot;source.fixAll.eslint&quot; : true &#125;,</span><br></pre></td></tr></table></figure>

<p>找到 <code>.eslintrc.js</code></p>
<p>在rule：中插入</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#39;quotes&#39;: [&quot;error&quot;, &quot;double&quot;], 	&#x2F;&#x2F; 使用双引号</span><br><span class="line">&#39;semi&#39;: [&#39;warn&#39;, &quot;never&quot;],		&#x2F;&#x2F; 不使用分号</span><br><span class="line">&#39;indent&#39;: [&#39;warn&#39;, 2],			&#x2F;&#x2F; 缩进两格</span><br></pre></td></tr></table></figure>

<p>具体修改查看官方文档。</p>
<h1 id="BootstrapVue"><a href="#BootstrapVue" class="headerlink" title="BootstrapVue"></a>BootstrapVue</h1><p>vue项目地址 <span class="exturl" data-url="aHR0cHM6Ly9ib290c3RyYXAtdnVlLm9yZy8=" title="https://bootstrap-vue.org/">https://bootstrap-vue.org/<i class="fa fa-external-link"></i></span></p>
<p>安装boostrap 和 boostrap-vue：</p>
<p><code>yarn add vue bootstrap bootstrap-vue</code></p>
<p>引入</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; BootstrapVue, IconsPlugin &#125; <span class="keyword">from</span> <span class="string">&#x27;bootstrap-vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Import Bootstrap an BootstrapVue CSS files (order is important)</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;bootstrap/dist/css/bootstrap.css&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;bootstrap-vue/dist/bootstrap-vue.css&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Make BootstrapVue available throughout your project</span></span><br><span class="line">Vue.use(BootstrapVue)</span><br><span class="line"><span class="comment">// Optionally install the BootstrapVue icon components plugin</span></span><br><span class="line">Vue.use(IconsPlugin)</span><br></pre></td></tr></table></figure>

<p>引入样式</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; Webpack example</span><br><span class="line">@import &#39;~bootstrap&#39;;</span><br><span class="line">@import &#39;~bootstrap-vue&#39;;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>cookie&amp;session&amp;token</title>
    <url>/2021/03/29/cookie-session-token/</url>
    <content><![CDATA[<p>​        随着交互式Web应用的兴起，像在线购物网站，需要登录的网站等等，马上就面临一个问题，那就是要管理会话，必须知道哪些访问时哪些人发起的。因为HTTP请求是无状态的，所以想出的办法就是给大家发一个会话标识, 说白了就是一个的字串，每个人收到的都不一样， 每次大家向我发起HTTP请求的时候，把这个字符串给一并捎过来， 这样我就能区分开谁是谁了。</p>
<p>​        然而，一个解决方案解决了老问题，往往会引出新问题，在解决这些问题的过程中，才有了cookie、session、token等的诞生。</p>
<span id="more"></span>

<h1 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a>cookie</h1><p>HTTP cookie，也叫Web cookie或浏览器cookie，是服务器发送到用户浏览器并保存到本地的一小块数据，它会在下次访问浏览器的时候与请求一同返回给服务器。通常它用于告知服务器请求是否来源于同一用户(浏览器),cookie使得无状态的HTTP协议记录稳定状态成为可能。</p>
<h2 id="cookie作用"><a href="#cookie作用" class="headerlink" title="cookie作用"></a>cookie作用</h2><ol>
<li>会话状态管理：如用户状态、购物车、游戏分数或者其他需要记录的信息</li>
<li>个性化设置：如自定义设置、主题等</li>
<li>浏览器行为跟踪：如跟踪分析用户行为</li>
</ol>
<p>​        cookie曾经一度用于用户数据的存储，因为没有其他手段可以使用，但是随着浏览器支持各式各样的存储方式，cookie逐渐被淘汰。由于每次访问服务器都会传送cookie，一些浏览器api以及允许开发者直接将数据存储到本地，如使用Web Storage API或IndexedDB</p>
<h2 id="cookie版本"><a href="#cookie版本" class="headerlink" title="cookie版本"></a>cookie版本</h2><ul>
<li>网景版cookie</li>
</ul>
<p>网景公司技术员发明了cookie，并制定了相关的规格标准</p>
<ul>
<li>RFC2109版</li>
</ul>
<p>网景竞争对手以网景版cookie为基础优化出来的版本。</p>
<ul>
<li>RFC 2965版 cookie</li>
</ul>
<p>定义了cookie的扩展版本，新增了Set-Cookie2首部和Cookie2首部</p>
<ul>
<li>RFC 6265版 cookie</li>
</ul>
<p>以网景公司的cookie标准作为业界事实标准，重新定义cookie标准后的产物</p>
<ul>
<li>目前主流的cookie版本</li>
</ul>
<p>目前使用最广泛的cookie版本，也是在网景版cookie基础上扩充而来的。</p>
<h2 id="cookie创建"><a href="#cookie创建" class="headerlink" title="cookie创建"></a>cookie创建</h2><p>使用函数在返回数据首部添加Set-Cookie首部，后跟cookie数据项</p>
<p>每一个cookie仅能保存一条数据，并且cookie的大小有限制。</p>
<h2 id="cookie的类型"><a href="#cookie的类型" class="headerlink" title="cookie的类型"></a>cookie的类型</h2><ul>
<li>会话型cookie：存放于浏览器内存中，关闭浏览器后会清除</li>
<li>持久性cookie：不会随着浏览器关闭销毁</li>
<li>第三方cookie：用户浏览器和web服务器之外的cookie提供方，如果cookie的域和浏览器的域不相同，称为第三方cookie,一般用于追踪。</li>
</ul>
<h2 id="cookie属性"><a href="#cookie属性" class="headerlink" title="cookie属性"></a>cookie属性</h2><ul>
<li>Name：属性名</li>
<li>Value：cookie值</li>
<li>Secure：只能使用https传输</li>
<li>HttpOnly：用于防止脚本读取cookie</li>
<li>Domain：cookie所作用的域名(主机)，子域名可以访问</li>
<li>Path：指定可以访问的路径</li>
<li>SameSite：允许服务器要求在跨站请求时不发送cookie。值：None，Strict，Lax(默认)</li>
</ul>
<h1 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h1><p>类似于cookie，但保存于服务端，一定程度上解决了不安全隐患。带来了session同步问题(分布式系统)</p>
<p><strong>解决方案：</strong></p>
<p>1）使用分布式数据库。    影响性能</p>
<p>2）使用cookie记录sessionID，不安全</p>
<p>3）固定用户方式 IP，用户ID等</p>
<h1 id="Token"><a href="#Token" class="headerlink" title="Token"></a>Token</h1><p>可以解决跨域问题。JWT(josn web token)服务器工具用户信息生成的一串json数据，有时限。</p>
<p>access_token：时限相对较短，一般一分钟为单位</p>
<p>refresh_token：时限相对较长，一般一天为单位</p>
<p>使用refresh_token获取新的access_token</p>
<p>refresh_token失效后需要进行重新登录。</p>
]]></content>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo博客搭建</title>
    <url>/2021/03/10/hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<h2 id="1-Hexo简介"><a href="#1-Hexo简介" class="headerlink" title="1.Hexo简介"></a>1.Hexo简介</h2><p>​        <span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvL3poLWNuLw==" title="https://hexo.io/zh-cn/">Hexo<i class="fa fa-external-link"></i></span>是一款基于Node.js的静态博客框架，依赖少易于安装使用，可以方便的生成静态网页托管在GitHub和Coding上，是搭建博客的首选框架。</p>
<h2 id="2-准备工作"><a href="#2-准备工作" class="headerlink" title="2.准备工作"></a>2.准备工作</h2><ul>
<li><p>自行准备好git</p>
</li>
<li><p>准备<span class="exturl" data-url="aHR0cHM6Ly9ub2RlanMub3JnL2VuLw==" title="https://nodejs.org/en/">Node.js <i class="fa fa-external-link"></i></span> </p>
<span id="more"></span>

<p>点击链接，进入官网。选择LTS版本下载并安装。安装包中包含 nodejs 本身和 npm 包管理器。</p>
<img src="https://img.imgdb.cn/item/6048d0845aedab222c84cf70.png" alt="image-20210310122709958" style="zoom:25%;" />

<p>使用<code>node -v</code> 和<code>npm -v</code>确认是否安装成功</p>
</li>
<li><p>安装hexo博客框架</p>
<ul>
<li><p>利用npm安装cnpm 国内镜像源速度更快</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install -g cnpm --registry&#x3D;https:&#x2F;&#x2F;registry.npm.taobao.org</span><br></pre></td></tr></table></figure>

<p>使用<code>cnpm -v</code>测试是否安装成功</p>
</li>
<li><p>使用用cnpm安装hexo博客框架</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cnpm install -g hexo-cli</span><br></pre></td></tr></table></figure>

<p><code>hexo -v</code>测试是否安装成功</p>
</li>
</ul>
</li>
</ul>
<h2 id="3-开始搭建"><a href="#3-开始搭建" class="headerlink" title="3.开始搭建"></a>3.开始搭建</h2><p>1.创建一个空文件夹，存放hexo博客文件。</p>
<p>2.在文件夹目录下执行<code>hexo init</code>命令  hexo会自行下载所需内容</p>
<p>   <a href="https://img.imgdb.cn/item/6048d1fb5aedab222c85af3a.png"><img src="https://img.imgdb.cn/item/6048d1fb5aedab222c85af3a.png"></a></p>
<p>3.使用hexo s启动博客  默认端口4000</p>
<p>   浏览器访问localhost:4000即可查看</p>
   <img src="https://img.imgdb.cn/item/6048d0a85aedab222c84e144.png" alt="image-20210310130953058" style="zoom: 25%;" />

<p>4.使用<code>hexo n &quot;我的第一篇博客文章.md&quot;</code>创建第一篇博客文章</p>
<p>5.使用<code>hexo clean</code>清理  <code>hexo g</code> 生成，使用hexo s查看效果</p>
<p>6.远程部署到github</p>
<ul>
<li><p>创建新仓库: [用户名].github.io 后续访问地址</p>
</li>
<li><p>在blog文件夹下安装hexo-delpoyer-git工具  忽略warning</p>
<p><code>cnpm install hexo-deployer-git --save</code></p>
</li>
<li><p>配置_config.yml文件</p>
<img src="https://img.imgdb.cn/item/6048d0c55aedab222c84f1a7.png" alt="yml" style="zoom:80%;" /></li>
<li><p>使用<code>hexo d</code>部署</p>
<p>需要输入git账号 密码</p>
<p>生效可能需要等几分钟</p>
</li>
</ul>
<h2 id="4-个性化"><a href="#4-个性化" class="headerlink" title="4.个性化"></a>4.个性化</h2><p>1.修改主题</p>
<ul>
<li>克隆yilia主题</li>
</ul>
<p><code>git clone https://github.com/litten/hexo-theme-yilia.git /themes/yilia</code></p>
<ul>
<li><p>修改_config.yml文件</p>
<img src="https://img.imgdb.cn/item/6048d0ec5aedab222c85083c.png" /></li>
<li><p>解决模块确实问题</p>
<p>在博客目录下执行<code>npm i hexo-generator-json-contennt --save</code></p>
</li>
</ul>
<p>2.修改名称</p>
<p>   修改hexo文件夹下的_config.yml文件</p>
   <img src="https://img.imgdb.cn/item/6048d1105aedab222c8522c8.png" style="zoom:80%;" />

<p>3.修改头像</p>
<p>   修改yilia文件夹下的_config.yml文件   图片存放位置为yilia/source/img</p>
   <img src="https://img.imgdb.cn/item/6048d1235aedab222c85314c.png" />

<h2 id="5-补充"><a href="#5-补充" class="headerlink" title="5.补充"></a>5.补充</h2><h3 id="1-图片管理"><a href="#1-图片管理" class="headerlink" title="1.图片管理"></a>1.图片管理</h3>   <img src="https://img.imgdb.cn/item/6048d1345aedab222c853c69.png" style="zoom:80%;" />

<h3 id="2-截断文章"><a href="#2-截断文章" class="headerlink" title="2.截断文章"></a>2.截断文章</h3><p>   使用<code>&lt;!--more--&gt;</code>截断文章</p>
<h3 id="3-图床"><a href="#3-图床" class="headerlink" title="3.图床"></a>3.图床</h3><p>   使用<span class="exturl" data-url="aHR0cHM6Ly93d3cuc3VwZXJiZWQuY24v" title="https://www.superbed.cn/">聚合图床<i class="fa fa-external-link"></i></span> 按需注册使用即可</p>
<h3 id="4-标签显示异常-模块缺失"><a href="#4-标签显示异常-模块缺失" class="headerlink" title="4.标签显示异常 模块缺失"></a>4.标签显示异常 模块缺失</h3><p>​    按照提示方法操作即可   <strong>注意<code>jsonContent</code>前不能有空格</strong> 其他按照相对位置处理即可</p>
<p>​    如图：  </p>
<p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL3VwbG9hZC1pbWFnZXMuamlhbnNodS5pby91cGxvYWRfaW1hZ2VzLzYyODA5NjYtZDNmYjI4YjVhMWRjYjY5Yy5wbmc"></p>
<h3 id="5-增加标签-tags-类型"><a href="#5-增加标签-tags-类型" class="headerlink" title="5.增加标签(tags)类型"></a>5.增加标签(tags)类型</h3><p>​    在yilia的_config.yml文件夹中找到menu项，添加即可   注意保持与md文件tag一致</p>
<p><img src="https://img.imgdb.cn/item/604a294b5aedab222c42e168.jpg"></p>
<h3 id="6-字数统计-推荐阅读时长"><a href="#6-字数统计-推荐阅读时长" class="headerlink" title="6.字数统计 推荐阅读时长"></a>6.字数统计 推荐阅读时长</h3><ul>
<li>首先安装 hexo-wordcount插件 使用npm/cnpm皆可</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm i --save hexo-wordcount</span><br></pre></td></tr></table></figure>

<ul>
<li>在主题文件夹下的_config.yml文件中添加配置项</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#8 是否开启字数统计</span><br><span class="line">#不需要使用，直接设置值为false，或注释掉</span><br><span class="line">word_count: True</span><br></pre></td></tr></table></figure>

<ul>
<li>在<code>yilia\layout\_partial\article.ejs</code>文件中对应位置插入代码 </li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">header</span> <span class="attr">class</span>=<span class="string">&quot;article-header&quot;</span>&gt;</span></span><br><span class="line">  &lt;%- partial(&#x27;post/title&#x27;, &#123;class_name: &#x27;article-title&#x27;&#125;) %&gt;</span><br><span class="line">  &lt;% if (!post.noDate)&#123; %&gt;</span><br><span class="line">    &lt;%- partial(&#x27;post/date&#x27;, &#123;class_name: &#x27;archive-article-date&#x27;, date_format: null&#125;) %&gt;</span><br><span class="line">  &lt;% &#125; %&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 开始添加字数统计--&gt;</span></span><br><span class="line">  &lt;% if(theme.word_count &amp;&amp; !post.no_word_count)&#123;%&gt;</span><br><span class="line">    &lt;%- partial(&#x27;post/word&#x27;) %&gt;</span><br><span class="line">  &lt;% &#125; %&gt;</span><br><span class="line"><span class="comment">&lt;!-- 添加完成 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>注意：只用插入标记部分的内容</p>
<h3 id="7-添加文章内容目录"><a href="#7-添加文章内容目录" class="headerlink" title="7.添加文章内容目录"></a>7.添加文章内容目录</h3><p>​    打开<code>themes\yilia\source</code>下的<code>main.xxxx.css</code>文件(xxxx：一串数字)，建议添加到末尾，并做好标注。</p>
<p>可以根据需要修改css样式中<code>#container .show-toc-btn,#container .toc-article</code>的top，right属性实现目录位置的修改。可将html文件中的 <code>&lt;p class=&quot;show-toc-btn&quot; id=&quot;show-toc-btn&quot; onclick=&quot;showToc();&quot; style=&quot;display:none&quot;&gt;</code>中的 <code>style=&quot;display:none&quot;</code>属性剪切到 <code>&lt;div id=&quot;toc-article&quot; class=&quot;toc-article&quot;&gt;</code>实现默认隐藏目录。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 新添加的 目录样式 */</span></span><br><span class="line"><span class="selector-id">#container</span> <span class="selector-class">.show-toc-btn</span>,<span class="selector-id">#container</span> <span class="selector-class">.toc-article</span>&#123;<span class="attribute">display</span>:block&#125;</span><br><span class="line"><span class="selector-class">.toc-article</span>&#123;<span class="attribute">z-index</span>:<span class="number">100</span>;<span class="attribute">background</span>:<span class="number">#fff</span>;<span class="attribute">border</span>:<span class="number">1px</span> solid <span class="number">#ccc</span>;<span class="attribute">max-width</span>:<span class="number">250px</span>;<span class="attribute">min-width</span>:<span class="number">150px</span>;<span class="attribute">max-height</span>:<span class="number">500px</span>;<span class="attribute">overflow-y</span>:auto;-webkit-<span class="attribute">box-shadow</span>:<span class="number">5px</span> <span class="number">5px</span> <span class="number">2px</span> <span class="number">#ccc</span>;<span class="attribute">box-shadow</span>:<span class="number">5px</span> <span class="number">5px</span> <span class="number">2px</span> <span class="number">#ccc</span>;<span class="attribute">font-size</span>:<span class="number">12px</span>;<span class="attribute">padding</span>:<span class="number">10px</span>;<span class="attribute">position</span>:fixed;<span class="attribute">right</span>:<span class="number">35px</span>;<span class="attribute">top</span>:<span class="number">129px</span>&#125;<span class="selector-class">.toc-article</span> <span class="selector-class">.toc-close</span>&#123;<span class="attribute">font-weight</span>:<span class="number">700</span>;<span class="attribute">font-size</span>:<span class="number">20px</span>;<span class="attribute">cursor</span>:pointer;<span class="attribute">float</span><span class="selector-pseudo">:right</span>;<span class="attribute">color</span>:<span class="number">#ccc</span>&#125;<span class="selector-class">.toc-article</span> <span class="selector-class">.toc-close</span><span class="selector-pseudo">:hover</span>&#123;<span class="attribute">color</span>:<span class="number">#000</span>&#125;<span class="selector-class">.toc-article</span> <span class="selector-class">.toc</span>&#123;<span class="attribute">font-size</span>:<span class="number">12px</span>;<span class="attribute">padding</span>:<span class="number">0</span>;<span class="attribute">line-height</span>:<span class="number">20px</span>&#125;<span class="selector-class">.toc-article</span> <span class="selector-class">.toc</span> <span class="selector-class">.toc-number</span>&#123;<span class="attribute">color</span>:<span class="number">#333</span>&#125;<span class="selector-class">.toc-article</span> <span class="selector-class">.toc</span> <span class="selector-class">.toc-text</span><span class="selector-pseudo">:hover</span>&#123;<span class="attribute">text-decoration</span>:underline;<span class="attribute">color</span>:<span class="number">#2a6496</span>&#125;<span class="selector-class">.toc-article</span> <span class="selector-tag">li</span>&#123;<span class="attribute">list-style-type</span>:none&#125;<span class="selector-class">.toc-article</span> <span class="selector-class">.toc-level-1</span>&#123;<span class="attribute">margin</span>:<span class="number">4px</span> <span class="number">0</span>&#125;<span class="selector-class">.toc-article</span> <span class="selector-class">.toc-child</span>&#123;&#125;<span class="keyword">@-moz-keyframes</span> cd-bounce-<span class="number">1</span>&#123;<span class="number">0%</span>&#123;<span class="attribute">opacity</span>:<span class="number">0</span>;-o-<span class="attribute">transform</span>:<span class="built_in">scale</span>(<span class="number">1</span>);-webkit-<span class="attribute">transform</span>:<span class="built_in">scale</span>(<span class="number">1</span>);-moz-<span class="attribute">transform</span>:<span class="built_in">scale</span>(<span class="number">1</span>);-ms-<span class="attribute">transform</span>:<span class="built_in">scale</span>(<span class="number">1</span>);<span class="attribute">transform</span>:<span class="built_in">scale</span>(<span class="number">1</span>)&#125;<span class="number">60%</span>&#123;<span class="attribute">opacity</span>:<span class="number">1</span>;-o-<span class="attribute">transform</span>:<span class="built_in">scale</span>(<span class="number">1.01</span>);-webkit-<span class="attribute">transform</span>:<span class="built_in">scale</span>(<span class="number">1.01</span>);-moz-<span class="attribute">transform</span>:<span class="built_in">scale</span>(<span class="number">1.01</span>);-ms-<span class="attribute">transform</span>:<span class="built_in">scale</span>(<span class="number">1.01</span>);<span class="attribute">transform</span>:<span class="built_in">scale</span>(<span class="number">1.01</span>)&#125;<span class="number">100%</span>&#123;-o-<span class="attribute">transform</span>:<span class="built_in">scale</span>(<span class="number">1</span>);-webkit-<span class="attribute">transform</span>:<span class="built_in">scale</span>(<span class="number">1</span>);-moz-<span class="attribute">transform</span>:<span class="built_in">scale</span>(<span class="number">1</span>);-ms-<span class="attribute">transform</span>:<span class="built_in">scale</span>(<span class="number">1</span>);<span class="attribute">transform</span>:<span class="built_in">scale</span>(<span class="number">1</span>)&#125;&#125;<span class="keyword">@-webkit-keyframes</span> cd-bounce-<span class="number">1</span>&#123;<span class="number">0%</span>&#123;<span class="attribute">opacity</span>:<span class="number">0</span>;-o-<span class="attribute">transform</span>:<span class="built_in">scale</span>(<span class="number">1</span>);-webkit-<span class="attribute">transform</span>:<span class="built_in">scale</span>(<span class="number">1</span>);-moz-<span class="attribute">transform</span>:<span class="built_in">scale</span>(<span class="number">1</span>);-ms-<span class="attribute">transform</span>:<span class="built_in">scale</span>(<span class="number">1</span>);<span class="attribute">transform</span>:<span class="built_in">scale</span>(<span class="number">1</span>)&#125;<span class="number">60%</span>&#123;<span class="attribute">opacity</span>:<span class="number">1</span>;-o-<span class="attribute">transform</span>:<span class="built_in">scale</span>(<span class="number">1.01</span>);-webkit-<span class="attribute">transform</span>:<span class="built_in">scale</span>(<span class="number">1.01</span>);-moz-<span class="attribute">transform</span>:<span class="built_in">scale</span>(<span class="number">1.01</span>);-ms-<span class="attribute">transform</span>:<span class="built_in">scale</span>(<span class="number">1.01</span>);<span class="attribute">transform</span>:<span class="built_in">scale</span>(<span class="number">1.01</span>)&#125;<span class="number">100%</span>&#123;-o-<span class="attribute">transform</span>:<span class="built_in">scale</span>(<span class="number">1</span>);-webkit-<span class="attribute">transform</span>:<span class="built_in">scale</span>(<span class="number">1</span>);-moz-<span class="attribute">transform</span>:<span class="built_in">scale</span>(<span class="number">1</span>);-ms-<span class="attribute">transform</span>:<span class="built_in">scale</span>(<span class="number">1</span>);<span class="attribute">transform</span>:<span class="built_in">scale</span>(<span class="number">1</span>)&#125;&#125;<span class="keyword">@-o-keyframes</span> cd-bounce-<span class="number">1</span>&#123;<span class="number">0%</span>&#123;<span class="attribute">opacity</span>:<span class="number">0</span>;-o-<span class="attribute">transform</span>:<span class="built_in">scale</span>(<span class="number">1</span>);-webkit-<span class="attribute">transform</span>:<span class="built_in">scale</span>(<span class="number">1</span>);-moz-<span class="attribute">transform</span>:<span class="built_in">scale</span>(<span class="number">1</span>);-ms-<span class="attribute">transform</span>:<span class="built_in">scale</span>(<span class="number">1</span>);<span class="attribute">transform</span>:<span class="built_in">scale</span>(<span class="number">1</span>)&#125;<span class="number">60%</span>&#123;<span class="attribute">opacity</span>:<span class="number">1</span>;-o-<span class="attribute">transform</span>:<span class="built_in">scale</span>(<span class="number">1.01</span>);-webkit-<span class="attribute">transform</span>:<span class="built_in">scale</span>(<span class="number">1.01</span>);-moz-<span class="attribute">transform</span>:<span class="built_in">scale</span>(<span class="number">1.01</span>);-ms-<span class="attribute">transform</span>:<span class="built_in">scale</span>(<span class="number">1.01</span>);<span class="attribute">transform</span>:<span class="built_in">scale</span>(<span class="number">1.01</span>)&#125;<span class="number">100%</span>&#123;-o-<span class="attribute">transform</span>:<span class="built_in">scale</span>(<span class="number">1</span>);-webkit-<span class="attribute">transform</span>:<span class="built_in">scale</span>(<span class="number">1</span>);-moz-<span class="attribute">transform</span>:<span class="built_in">scale</span>(<span class="number">1</span>);-ms-<span class="attribute">transform</span>:<span class="built_in">scale</span>(<span class="number">1</span>);<span class="attribute">transform</span>:<span class="built_in">scale</span>(<span class="number">1</span>)&#125;&#125;<span class="keyword">@keyframes</span> cd-bounce-<span class="number">1</span>&#123;<span class="number">0%</span>&#123;<span class="attribute">opacity</span>:<span class="number">0</span>;-o-<span class="attribute">transform</span>:<span class="built_in">scale</span>(<span class="number">1</span>);-webkit-<span class="attribute">transform</span>:<span class="built_in">scale</span>(<span class="number">1</span>);-moz-<span class="attribute">transform</span>:<span class="built_in">scale</span>(<span class="number">1</span>);-ms-<span class="attribute">transform</span>:<span class="built_in">scale</span>(<span class="number">1</span>);<span class="attribute">transform</span>:<span class="built_in">scale</span>(<span class="number">1</span>)&#125;<span class="number">60%</span>&#123;<span class="attribute">opacity</span>:<span class="number">1</span>;-o-<span class="attribute">transform</span>:<span class="built_in">scale</span>(<span class="number">1.01</span>);-webkit-<span class="attribute">transform</span>:<span class="built_in">scale</span>(<span class="number">1.01</span>);-moz-<span class="attribute">transform</span>:<span class="built_in">scale</span>(<span class="number">1.01</span>);-ms-<span class="attribute">transform</span>:<span class="built_in">scale</span>(<span class="number">1.01</span>);<span class="attribute">transform</span>:<span class="built_in">scale</span>(<span class="number">1.01</span>)&#125;<span class="number">100%</span>&#123;-o-<span class="attribute">transform</span>:<span class="built_in">scale</span>(<span class="number">1</span>);-webkit-<span class="attribute">transform</span>:<span class="built_in">scale</span>(<span class="number">1</span>);-moz-<span class="attribute">transform</span>:<span class="built_in">scale</span>(<span class="number">1</span>);-ms-<span class="attribute">transform</span>:<span class="built_in">scale</span>(<span class="number">1</span>);<span class="attribute">transform</span>:<span class="built_in">scale</span>(<span class="number">1</span>)&#125;&#125;<span class="selector-class">.show-toc-btn</span>&#123;<span class="attribute">display</span>:none;<span class="attribute">z-index</span>:<span class="number">10</span>;<span class="attribute">width</span>:<span class="number">30px</span>;<span class="attribute">min-height</span>:<span class="number">14px</span>;<span class="attribute">overflow</span>:hidden;<span class="attribute">padding</span>:<span class="number">4px</span> <span class="number">6px</span> <span class="number">8px</span> <span class="number">5px</span>;<span class="attribute">border</span>:<span class="number">1px</span> solid <span class="number">#ddd</span>;<span class="attribute">border-right</span>:none;<span class="attribute">position</span>:fixed;<span class="attribute">right</span>:<span class="number">40px</span>;<span class="attribute">text-align</span>:center;<span class="attribute">background-color</span>:<span class="number">#f9f9f9</span>&#125;<span class="selector-class">.show-toc-btn</span> <span class="selector-class">.btn-bg</span>&#123;<span class="attribute">margin-top</span>:<span class="number">2px</span>;<span class="attribute">display</span>:block;<span class="attribute">width</span>:<span class="number">16px</span>;<span class="attribute">height</span>:<span class="number">14px</span>;<span class="attribute">background</span>:<span class="built_in">url</span>(<span class="string">http://7xtawy.com1.z0.glb.clouddn.com/show.png</span>) no-repeat;-webkit-<span class="attribute">background-size</span>:<span class="number">100%</span>;-moz-<span class="attribute">background-size</span>:<span class="number">100%</span>;<span class="attribute">background-size</span>:<span class="number">100%</span>&#125;<span class="selector-class">.show-toc-btn</span> <span class="selector-class">.btn-text</span>&#123;<span class="attribute">color</span>:<span class="number">#999</span>;<span class="attribute">font-size</span>:<span class="number">12px</span>&#125;<span class="selector-class">.show-toc-btn</span><span class="selector-pseudo">:hover</span>&#123;<span class="attribute">cursor</span>:pointer&#125;<span class="selector-class">.show-toc-btn</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.btn-bg</span>&#123;<span class="attribute">background-position</span>:<span class="number">0</span> -<span class="number">16px</span>&#125;<span class="selector-class">.show-toc-btn</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.btn-text</span>&#123;<span class="attribute">font-size</span>:<span class="number">12px</span>;<span class="attribute">color</span>:<span class="number">#ea8010</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.toc-article</span> <span class="selector-tag">li</span> <span class="selector-tag">ol</span>, <span class="selector-class">.toc-article</span> <span class="selector-tag">li</span> <span class="selector-tag">ul</span> &#123;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">30px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.toc-article</span> <span class="selector-tag">ol</span>, <span class="selector-class">.toc-article</span> <span class="selector-tag">ul</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">10px</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​    打开<code>themes\yilia\layout\_partial</code>文件夹下的<code>article.ejs</code>文件，样式使用了z-index属性，故添加在任意位置均可。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 目录内容 --&gt;</span></span><br><span class="line">&lt;% if (!index &amp;&amp; post.toc)&#123; %&gt;</span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;show-toc-btn&quot;</span> <span class="attr">id</span>=<span class="string">&quot;show-toc-btn&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;showToc();&quot;</span> <span class="attr">style</span>=<span class="string">&quot;display:none&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;btn-bg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;btn-text&quot;</span>&gt;</span>文章导航<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;toc-article&quot;</span> <span class="attr">class</span>=<span class="string">&quot;toc-article&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;toc-close&quot;</span> <span class="attr">class</span>=<span class="string">&quot;toc-close&quot;</span> <span class="attr">title</span>=<span class="string">&quot;隐藏导航&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;showBtn();&quot;</span>&gt;</span>×<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">strong</span> <span class="attr">class</span>=<span class="string">&quot;toc-title&quot;</span>&gt;</span>文章目录<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br><span class="line">        &lt;%- toc(post.content) %&gt;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="keyword">function</span> <span class="title">showToc</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> toc_article = <span class="built_in">document</span>.getElementById(<span class="string">&quot;toc-article&quot;</span>);</span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> show_toc_btn = <span class="built_in">document</span>.getElementById(<span class="string">&quot;show-toc-btn&quot;</span>);</span></span><br><span class="line"><span class="javascript">                toc_article.setAttribute(<span class="string">&quot;style&quot;</span>,<span class="string">&quot;display:block&quot;</span>);</span></span><br><span class="line"><span class="javascript">                show_toc_btn.setAttribute(<span class="string">&quot;style&quot;</span>,<span class="string">&quot;display:none&quot;</span>);</span></span><br><span class="line">            &#125;;</span><br><span class="line"><span class="javascript">            <span class="function"><span class="keyword">function</span> <span class="title">showBtn</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> toc_article = <span class="built_in">document</span>.getElementById(<span class="string">&quot;toc-article&quot;</span>);</span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> show_toc_btn = <span class="built_in">document</span>.getElementById(<span class="string">&quot;show-toc-btn&quot;</span>);</span></span><br><span class="line"><span class="javascript">                toc_article.setAttribute(<span class="string">&quot;style&quot;</span>,<span class="string">&quot;display:none&quot;</span>);</span></span><br><span class="line"><span class="javascript">                show_toc_btn.setAttribute(<span class="string">&quot;style&quot;</span>,<span class="string">&quot;display:block&quot;</span>);</span></span><br><span class="line">            &#125;;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        &lt;% &#125; %&gt;     </span><br><span class="line">            <span class="comment">&lt;!-- 目录内容结束 --&gt;</span></span><br></pre></td></tr></table></figure>

<p>​    打开<code>themes\yilia\_config.yml</code>文件找到toc项，更具需求设置即可。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 目录设定：0-不显示目录； 1-文章对应的md文件里有toc:true属性，才有目录； 2-所有文章均显示目录</span><br><span class="line"></span><br><span class="line">toc: 1</span><br></pre></td></tr></table></figure>

<p>​    设置为1时，需修改md文件toc属性为true，</p>
<figure class="highlight md"><table><tr><td class="code"><pre><span class="line">date: 2021-03-10 15:36:40</span><br><span class="line">toc: true</span><br><span class="line">tags: 随笔</span><br></pre></td></tr></table></figure>

<h3 id="9-修改鼠标样式"><a href="#9-修改鼠标样式" class="headerlink" title="9.修改鼠标样式"></a>9.修改鼠标样式</h3><p>在<code>main.xxxx.css</code> 文件内添加如下代码段：  url内容为样式链接，可查找不同的样式自行修改。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 鼠标样式 */</span></span><br><span class="line">* &#123;</span><br><span class="line">    <span class="attribute">cursor</span>: <span class="built_in">url</span>(<span class="string">&#x27;https://cdn.jsdelivr.net/gh/TRHX/CDN-for-itrhx.com@1.0/images/mouse.cur &#x27;</span>),auto;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>http与https</title>
    <url>/2021/03/26/http%E4%B8%8Ehttps/</url>
    <content><![CDATA[<p>​        http和https前后端交互的桥梁，进行web相关开发，无论前端后端都应该对他有足够的了解。此处仅对http和https进行简单区别。旨在简单了解http和https各自特点。</p>
<span id="more"></span>

<h1 id="HTTP："><a href="#HTTP：" class="headerlink" title="HTTP："></a>HTTP：</h1><p>​        超文本传输协议（HTTP，HyperText Transfer Protocol）是互联网上应用最为广泛的一种网络协议。设计 HTTP 最初的目的是为了提供一种发布和接收 HTML 页面的方法。它可以使浏览器更加高效。HTTP 协议是以明文方式发送信息的，如果黑客截取了 Web 浏览器和服务器之间的传输报文，就可以直接获得其中的信息。</p>
<p>​        HTPP有多个版本，目前广泛使用的是HTTP/1.1版本。</p>
<h2 id="HTTP特点："><a href="#HTTP特点：" class="headerlink" title="HTTP特点："></a><strong>HTTP特点：</strong></h2><ol>
<li>http协议支持客户端/服务端模式，是一种请求/响应模式的协议。</li>
<li>简单快速：客户向服务器请求服务时，只需传送请求方法和路径。请求方法常用的有GET、HEAD、POST。</li>
<li>灵活：HTTP允许传输任意类型的数据对象。传输的类型由Content-Type加以标记。</li>
<li>无连接：限制每次连接只处理一个请求。服务器处理完请求，并收到客户的应答后，即断开连接。（后续进行了一些改良，包括active cookie session）</li>
<li>无状态：无状态是指协议对于事务处理没有记忆，后续处理需要前面的信息，则必须重传。</li>
</ol>
<h2 id="HTTP-过程："><a href="#HTTP-过程：" class="headerlink" title="HTTP 过程："></a><strong>HTTP 过程：</strong></h2><ol>
<li>建立连接，一般通过 TCP 连接80端口(可以根据需求修改)连接。 </li>
<li>建立连接后，客户机发送一个请求给服务器，请求方式的格式为：统一资源标识符（URL）、协议版本号，后边是 MIME 信息包括请求修饰符、客户机信息和许可内容。</li>
<li>服务器接到请求后，给予相应的响应信息，其格式为一个状态行，包括信息的协议版本号、一个成功或错误的代码，后边是 MIME 信息包括服务器信息、实体信息和可能的内容。</li>
</ol>
<h2 id="HTTP常用方法："><a href="#HTTP常用方法：" class="headerlink" title="HTTP常用方法："></a><strong>HTTP常用方法：</strong></h2><ul>
<li>GET:请求指定的页面信息，并返回实体主体。</li>
<li>POST:向指定资源提交数据进行处理请求（例如提交表单或者上传文件）。数据被包含在请求体中。</li>
<li>HEAD:类似于GET请求，只不过返回的响应中没有具体的内容，用于获取报头</li>
<li>PUT:从客户端向服务器传送的数据取代指定的文档的内容。</li>
<li>DELETE:请求服务器删除指定的页面。</li>
</ul>
<h2 id="HTTP响应状态码："><a href="#HTTP响应状态码：" class="headerlink" title="HTTP响应状态码："></a><strong>HTTP响应状态码：</strong></h2><p><strong>状态码分类</strong>：</p>
<ul>
<li>1XX- 信息型，服务器收到请求，需要请求者继续操作。</li>
<li>2XX- 成功型，请求成功收到，理解并处理。</li>
<li>3XX - 重定向，需要进一步的操作以完成请求。</li>
<li>4XX - 客户端错误，请求包含语法错误或无法完成请求。</li>
<li>5XX - 服务器错误，服务器在处理请求的过程中发生了错误。</li>
</ul>
<p><strong>常见状态码</strong>：</p>
<ul>
<li>200 OK - 客户端请求成功</li>
<li>301 - 资源（网页等）被永久转移到其它URL</li>
<li>302 - 临时跳转</li>
<li>400 Bad Request - 客户端请求有语法错误，不能被服务器所理解</li>
<li>401 Unauthorized - 请求未经授权，这个状态代码必须和WWW-Authenticate报头域一起使用</li>
<li>404 - 请求资源不存在，可能是输入了错误的URL</li>
<li>500 - 服务器内部发生了不可预期的错误</li>
<li>503 Server Unavailable - 服务器当前不能处理客户端的请求，一段时间后可能恢复正常。</li>
</ul>
<h1 id="HTTPS："><a href="#HTTPS：" class="headerlink" title="HTTPS："></a>HTTPS：</h1><p>​        是以安全为目标的 HTTP 通道，是 HTTP 的安全版。HTTPS 的安全基础是 SSL。SSL 协议位于 TCP/IP 协议与各种应用层协议之间，为数据通讯提供安全支持。SSL 协议可分为两层：SSL 记录协议（SSL Record Protocol），它建立在可靠的传输协议（如TCP）之上，为高层协议提供数据封装、压缩、加密等基本功能的支持。SSL 握手协议（SSL Handshake Protocol），它建立在 SSL 记录协议之上，用于在实际的数据传输开始前，通讯双方进行身份认证、协商加密算法、交换加密密钥等。HTTPS一般使用443端口。</p>
<h2 id="HTTPS-设计目标："><a href="#HTTPS-设计目标：" class="headerlink" title="HTTPS 设计目标："></a><strong>HTTPS 设计目标：</strong></h2><ol>
<li>数据保密性：保证数据内容在传输的过程中不会被第三方查看。就像快递员传递包裹一样，都进行了封装，别人无法获知里面装了什么  。</li>
<li>数据完整性：及时发现被第三方篡改的传输内容。就像快递员虽然不知道包裹里装了什么东西，但他有可能中途掉包，数据完整性就是指如果被掉包，我们能轻松发现并拒收 。</li>
<li>身份校验安全性：保证数据到达用户期望的目的地。就像我们邮寄包裹时，虽然是一个封装好的未掉包的包裹，但必须确定这个包裹不会送错地方，通过身份校验来确保送对了地方  。</li>
</ol>
<h2 id="HTTPS的不足："><a href="#HTTPS的不足：" class="headerlink" title="HTTPS的不足："></a><strong>HTTPS的不足：</strong></h2><ol>
<li>HTTPS协议多次握手，导致页面的加载时间延长近50%；</li>
<li>HTTPS连接缓存不如HTTP高效，会增加数据开销和功耗；</li>
<li>申请SSL证书需要钱，功能越强大的证书费用越高。免费证书很少。</li>
<li>SSL涉及到的安全算法会消耗 CPU 资源，对服务器资源消耗较大。</li>
</ol>
<h1 id="区别总结"><a href="#区别总结" class="headerlink" title="区别总结"></a>区别总结</h1><ol>
<li><p>安全性：HTTPS相较于HTTP更安全。</p>
</li>
<li><p>效率：HTTPS效率低于HTTP。</p>
</li>
<li><p>默认端口：HTTPS默认端口443，HTTP默认端口80。</p>
</li>
<li><p>成本：HTTPS需要CA证书，成本更高。</p>
<p>…</p>
</li>
</ol>
]]></content>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>win10home上docker的部署</title>
    <url>/2021/03/10/win10home%E4%B8%8Adocker%E7%9A%84%E9%83%A8%E7%BD%B2/</url>
    <content><![CDATA[<h2 id="一、docker简介"><a href="#一、docker简介" class="headerlink" title="一、docker简介"></a>一、docker简介</h2><p>​    Docker 是一个开源的应用容器引擎，基于 Go 语言 并遵从 Apache2.0 协议开源。</p>
<p>​    Docker 可以让开发者打包他们的应用以及依赖包到一个轻量级、可移植的容器中，然后发布到任何流行的 Linux 机器上，也可以实现虚拟化。</p>
<span id="more"></span>

<p>​    容器是完全使用沙箱机制，相互之间不会有任何接口（类似 iPhone 的 app）,更重要的是容器性能开销极低。</p>
<h3 id="Docker的应用场景"><a href="#Docker的应用场景" class="headerlink" title="Docker的应用场景"></a>Docker的应用场景</h3><ul>
<li>Web 应用的自动化打包和发布。</li>
<li>自动化测试和持续集成、发布。</li>
<li>在服务型环境中部署和调整数据库或其他的后台应用。</li>
<li>从头编译或者扩展现有的 OpenShift 或 Cloud Foundry 平台来搭建自己的 PaaS 环境。</li>
</ul>
<hr>
<h3 id="Docker-的优点"><a href="#Docker-的优点" class="headerlink" title="Docker 的优点"></a>Docker 的优点</h3><p>​    Docker 是一个用于开发，交付和运行应用程序的开放平台。Docker 使您能够将应用程序与基础架构分开，从而可以快速交付软件。借助 Docker，您可以与管理应用程序相同的方式来管理基础架构。通过利用 Docker 的方法来快速交付，测试和部署代码，您可以大大减少编写代码和在生产环境中运行代码之间的延迟。</p>
<h3 id="1、快速，一致地交付应用程序"><a href="#1、快速，一致地交付应用程序" class="headerlink" title="1、快速，一致地交付应用程序"></a>1、快速，一致地交付应用程序</h3><p>​    Docker 允许开发人员使用您提供的应用程序或服务的本地容器在标准化环境中工作，从而简化了开发的生命周期。</p>
<p>​    容器非常适合持续集成和持续交付（CI / CD）工作流程，请考虑以下示例方案：</p>
<ul>
<li>您的开发人员在本地编写代码，并使用 Docker 容器与同事共享他们的工作。</li>
<li>他们使用 Docker 将其应用程序推送到测试环境中，并执行自动或手动测试。</li>
<li>当开发人员发现错误时，他们可以在开发环境中对其进行修复，然后将其重新部署到测试环境中，以进行测试和验证。</li>
<li>测试完成后，将修补程序推送给生产环境，就像将更新的镜像推送到生产环境一样简单。</li>
</ul>
<h3 id="2、响应式部署和扩展"><a href="#2、响应式部署和扩展" class="headerlink" title="2、响应式部署和扩展"></a>2、响应式部署和扩展</h3><p>​    Docker 是基于容器的平台，允许高度可移植的工作负载。Docker 容器可以在开发人员的本机上，数据中心的物理或虚拟机上，云服务上或混合环境中运行。</p>
<p>​    Docker 的可移植性和轻量级的特性，还可以使您轻松地完成动态管理的工作负担，并根据业务需求指示，实时扩展或拆除应用程序和服务。</p>
<h3 id="3、在同一硬件上运行更多工作负载"><a href="#3、在同一硬件上运行更多工作负载" class="headerlink" title="3、在同一硬件上运行更多工作负载"></a>3、在同一硬件上运行更多工作负载</h3><p>​    Docker 轻巧快速。它为基于虚拟机管理程序的虚拟机提供了可行、经济、高效的替代方案，因此您可以利用更多的计算能力来实现业务目标。Docker 非常适合于高密度环境以及中小型部署，而您可以用更少的资源做更多的事情。</p>
<h2 id="二、win10home上docker的安装"><a href="#二、win10home上docker的安装" class="headerlink" title="二、win10home上docker的安装"></a>二、win10home上docker的安装</h2><h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><ul>
<li><p>win10版本1903及以上</p>
</li>
<li><p>开启WSL2功能 参考 <span class="exturl" data-url="aHR0cHM6Ly9kb2NzLm1pY3Jvc29mdC5jb20vZW4tdXMvd2luZG93cy93c2wvaW5zdGFsbC13aW4xMA==" title="https://docs.microsoft.com/en-us/windows/wsl/install-win10">https://docs.microsoft.com/en-us/windows/wsl/install-win10<i class="fa fa-external-link"></i></span></p>
<p>手动操作流程</p>
<ul>
<li>在powershell执行</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dism.exe &#x2F;online &#x2F;enable-feature &#x2F;featurename:Microsoft-Windows-Subsystem-Linux &#x2F;all &#x2F;norestart</span><br></pre></td></tr></table></figure>

<p><a href="https://img.imgdb.cn/item/6048d2b65aedab222c861dca.png"><img src="https://img.imgdb.cn/item/6048d2b65aedab222c861dca.png"></a></p>
<ul>
<li>在powershell执行下方指令  开启虚拟机功能</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dism.exe &#x2F;online &#x2F;enable-feature &#x2F;featurename:VirtualMachinePlatform &#x2F;all &#x2F;norestart</span><br></pre></td></tr></table></figure>

<ul>
<li><p>下载linux内核更新包 连接如下 安装前记得重启下</p>
<p><span class="exturl" data-url="aHR0cHM6Ly93c2xzdG9yZXN0b3JhZ2UuYmxvYi5jb3JlLndpbmRvd3MubmV0L3dzbGJsb2Ivd3NsX3VwZGF0ZV94NjQubXNp" title="https://wslstorestorage.blob.core.windows.net/wslblob/wsl_update_x64.msi">WSL2 Linux kernel update package for x64 machines<i class="fa fa-external-link"></i></span></p>
</li>
<li><p>将WSL 2设为默认版本</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wsl --set-default-version 2</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h3 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h3><p> <span class="exturl" data-url="aHR0cHM6Ly9odWIuZG9ja2VyLmNvbS9lZGl0aW9ucy9jb21tdW5pdHkvZG9ja2VyLWNlLWRlc2t0b3Atd2luZG93cw==" title="https://hub.docker.com/editions/community/docker-ce-desktop-windows">https://hub.docker.com/editions/community/docker-ce-desktop-windows<i class="fa fa-external-link"></i></span></p>
<p>点击exe安装即可</p>
<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><ul>
<li>查验版本号</li>
</ul>
<p>在终端执行<code>docker -v</code>指令，正确返回docker版本信息</p>
<p><a href="https://img.imgdb.cn/item/6048d2cd5aedab222c862aef.png"><img src="https://img.imgdb.cn/item/6048d2cd5aedab222c862aef.png"></a></p>
<ul>
<li>运行hello world，执行<code>docker run hello-world</code>指令</li>
</ul>
<p><a href="https://img.imgdb.cn/item/6048d2e75aedab222c863983.png"><img src="https://img.imgdb.cn/item/6048d2e75aedab222c863983.png"></a></p>
<p>测试成功</p>
<h3 id="docker镜像加速"><a href="#docker镜像加速" class="headerlink" title="docker镜像加速"></a>docker镜像加速</h3><p>国内从 DockerHub 拉取镜像有时会遇到困难，此时可以配置镜像加速器。Docker 官方和国内很多云服务商都提供了国内加速器服务，例如：</p>
<ul>
<li><p>科大镜像：<strong><span class="exturl" data-url="aHR0cHM6Ly9kb2NrZXIubWlycm9ycy51c3RjLmVkdS5jbi8=" title="https://docker.mirrors.ustc.edu.cn/">https://docker.mirrors.ustc.edu.cn/<i class="fa fa-external-link"></i></span></strong></p>
</li>
<li><p>网易：<strong><span class="exturl" data-url="aHR0cHM6Ly9odWItbWlycm9yLmMuMTYzLmNvbS8=" title="https://hub-mirror.c.163.com/">https://hub-mirror.c.163.com/<i class="fa fa-external-link"></i></span></strong></p>
</li>
<li><p>阿里云：<strong>https://&lt;你的ID&gt;.mirror.aliyuncs.com</strong></p>
</li>
<li><p>七牛云加速器：<strong><span class="exturl" data-url="aHR0cHM6Ly9yZWctbWlycm9yLnFpbml1LmNvbS8=" title="https://reg-mirror.qiniu.com/">https://reg-mirror.qiniu.com<i class="fa fa-external-link"></i></span></strong></p>
</li>
</ul>
<p>​        对于使用 Windows 10 的系统，在系统右下角托盘 Docker 图标内右键菜单选择Settings，打开配置窗口后左侧导航菜单选择 Daemon。在 Registrymirrors 一栏中填写加速器地址 <strong><span class="exturl" data-url="aHR0cHM6Ly9kb2NrZXIubWlycm9ycy51c3RjLmVkdS5jbi8=" title="https://docker.mirrors.ustc.edu.cn/">https://docker.mirrors.ustc.edu.cn/<i class="fa fa-external-link"></i></span></strong> ，之后点击 Apply 保存后 Docker 就会重启并应用配置的镜像地址了。</p>
<p><a href="https://img.imgdb.cn/item/6048d2fb5aedab222c864540.png"><img src="https://img.imgdb.cn/item/6048d2fb5aedab222c864540.png"></a></p>
<h3 id="检查加速器是否生效"><a href="#检查加速器是否生效" class="headerlink" title="检查加速器是否生效"></a>检查加速器是否生效</h3><p>​        检查加速器是否生效配置加速器之后，如果拉取镜像仍然十分缓慢，请手动检查加速器配置是否生效，在命令行执行 <strong>docker info</strong>，如果从结果中看到了如下内容，说明配置成功。</p>
<p><a href="https://img.imgdb.cn/item/6048d30c5aedab222c864e75.png"><img src="https://img.imgdb.cn/item/6048d30c5aedab222c864e75.png"></a></p>
<h3 id="常见错误处理"><a href="#常见错误处理" class="headerlink" title="常见错误处理"></a>常见错误处理</h3><ul>
<li><p>关于使用WSL2出现“参考的对象类型不支持尝试的操作”的解决方法</p>
<p>以管理员身份运行CMD，输入：<code>netsh winsock reset</code>重启计算机即可修复。</p>
</li>
</ul>
<h2 id="三、docker基础操作"><a href="#三、docker基础操作" class="headerlink" title="三、docker基础操作"></a>三、docker基础操作</h2><h4 id="常用指令"><a href="#常用指令" class="headerlink" title="常用指令"></a>常用指令</h4><table>
<thead>
<tr>
<th align="center">指令</th>
<th align="center">功能</th>
</tr>
</thead>
<tbody><tr>
<td align="center">docker search</td>
<td align="center">查找镜像</td>
</tr>
<tr>
<td align="center">docker images</td>
<td align="center">查看本地镜像</td>
</tr>
<tr>
<td align="center">docker pull</td>
<td align="center">拉取远端镜像</td>
</tr>
<tr>
<td align="center">docker run</td>
<td align="center">使用镜像创建容器并运行</td>
</tr>
<tr>
<td align="center">docker ps</td>
<td align="center">查看本地已创建的容器</td>
</tr>
<tr>
<td align="center">docker kill / stop</td>
<td align="center">停止一个或多个运行中的容器</td>
</tr>
<tr>
<td align="center">docker start / restart</td>
<td align="center">启动或重启一个或多个容器</td>
</tr>
<tr>
<td align="center">docker cp</td>
<td align="center">docker容器之间复制</td>
</tr>
<tr>
<td align="center">docker/exec</td>
<td align="center">进入运行在后台的容器（exec退出后不停止）</td>
</tr>
</tbody></table>
<p>待完善。。。</p>
]]></content>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>jQuery学习笔记</title>
    <url>/2021/03/11/jQuery%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="第一章-初识jQuery"><a href="#第一章-初识jQuery" class="headerlink" title="第一章 初识jQuery"></a>第一章 初识jQuery</h2><h3 id="一、背景"><a href="#一、背景" class="headerlink" title="一、背景"></a>一、背景</h3><h4 id="1-原生js的缺点"><a href="#1-原生js的缺点" class="headerlink" title="1.原生js的缺点"></a>1.原生js的缺点</h4><p>1.添加多个入口函数时候不方便。</p>
<p>2.api名字长，难以记忆。</p>
 <span id="more"></span>

<p>3.代码冗余度大。</p>
<p>4.有浏览器兼容性问题。</p>
<p>5.容错率低，出现错误后续代码不执行。</p>
<h4 id="2-jquery的优点"><a href="#2-jquery的优点" class="headerlink" title="2.jquery的优点"></a>2.jquery的优点</h4><p>1.可以写多个入口函数<br>2.api简介，易于使用<br>3.代码简介，冗余度低（隐式迭代）<br>4.解决了浏览器兼容性问题<br>5.容错率高，前面代码的问题，对后续代码影响小。</p>
<h4 id="3-一些说明"><a href="#3-一些说明" class="headerlink" title="3.一些说明"></a>3.一些说明</h4><p>​    jQuer是封装了很多方法的js库，学习jQuery的本质就是学习其中的API的使用。</p>
<h3 id="二、使用jQuery"><a href="#二、使用jQuery" class="headerlink" title="二、使用jQuery"></a>二、使用jQuery</h3><h4 id="1-jQuery的下载"><a href="#1-jQuery的下载" class="headerlink" title="1.jQuery的下载"></a>1.jQuery的下载</h4><p>​    <span class="exturl" data-url="aHR0cHM6Ly9qcXVlcnkuY29tL2Rvd25sb2FkLw==" title="https://jquery.com/download/">下载地址<i class="fa fa-external-link"></i></span></p>
<p>​    使用save as保存jQuery文件。老版本点击 BrowerSupport</p>
<h4 id="2-jQuery使用流程"><a href="#2-jQuery使用流程" class="headerlink" title="2.jQuery使用流程"></a>2.jQuery使用流程</h4><p>1.引入jQuery文件<br>2.创建入口函数  避免加载顺序造成问题<br>3.找到要操作的元素，进行操作 使用jQuery选择器</p>
<h2 id="第二章-jQuery入门"><a href="#第二章-jQuery入门" class="headerlink" title="第二章 jQuery入门"></a>第二章 jQuery入门</h2><h4 id="1-jQuery文件的引入"><a href="#1-jQuery文件的引入" class="headerlink" title="1.jQuery文件的引入"></a>1.jQuery文件的引入</h4><ul>
<li>使用本地文件方式引入</li>
</ul>
<script src="./jquery-3.6.0.min.js"></script>

<ul>
<li><p>网络方式 使用Google CDN服务</p>
<script src="http://ajax.googleapis.com/ajax/libs/jquery/1.8.0/jquery.min.js"></script></li>
</ul>
<h4 id="2-入口函数"><a href="#2-入口函数" class="headerlink" title="2.入口函数"></a>2.入口函数</h4><ul>
<li><p>第一种写法</p>
<script>    
    // 第一种
    $(document).ready(
        function(){
            // 代码块
        }
    );
</script></li>
<li><p>第二种写法 更常用</p>
<script>
     // 第二种
     $(function() {
         // 代码块
    });
</script></li>
<li><p>与window.onload的区别</p>
<p>1.jQuery入口函数可以有多个</p>
<p>2.执行顺序不同 更具浏览器不同会有区别</p>
<p>   <del>onload：所有元素加载完成后执行</del></p>
<p>   <del>jQuery：等待页面上dom树加载完成后执行</del></p>
</li>
</ul>
<h4 id="3-是什么"><a href="#3-是什么" class="headerlink" title="3.$是什么"></a>3.$是什么</h4><ul>
<li><p>引入jQuery文件会执行一个子执行函数</p>
</li>
<li><p>这个执行文件会为window对象添加一个jQuery属性和$属性</p>
</li>
<li><p>jQuery与$等价，都是一个函数，参数不同效果不同  （多态）</p>
<ul>
<li>如果传递一个匿名函数，就声明一个入口函数</li>
<li>传入一个字符传，就是选择器的效果或创建一个标签</li>
<li>传入一个dom元素，将dom对象转换成jQuery对象</li>
</ul>
</li>
<li><p>经典错误：jQuery文件未引入</p>
</li>
</ul>
<p><code> Uncaught ReferenceError: $ is not defined</code></p>
<h4 id="4-dom和jQuery对象"><a href="#4-dom和jQuery对象" class="headerlink" title="4.dom和jQuery对象"></a>4.dom和jQuery对象</h4><ul>
<li><p>dom对象：原生js选择器获取到的对象，只能调用dom方法或属性，如</p>
<ul>
<li>document.getElementById</li>
<li>document.getElementByTagName</li>
</ul>
</li>
<li><p>jQuery对象：jQuery选择器获取到的对象，只能调用jQuery方法或属性</p>
<p>它是一个伪数组，是一个dom对象的包装器</p>
</li>
<li><p>dom对象转jQuery对象</p>
</li>
<li><p><code>var $div = $(div1);</code></p>
</li>
<li><p>jQeruy对象转dom对象</p>
<ul>
<li><code>var div1 = $divs[0];</code></li>
<li><code>var div2 = $divs.get(1);</code></li>
</ul>
</li>
</ul>
<h4 id="5-text"><a href="#5-text" class="headerlink" title="5.text"></a>5.text</h4><ul>
<li>获取文本 <code>$(&quot;#div1&quot;).text()</code><ul>
<li>会获取所有dom元素的文本</li>
</ul>
</li>
<li>设置文本 <code>$(&quot;#div1&quot;).text(&quot;我是设置的文本&quot;);</code> <ul>
<li>会清除原有内容</li>
<li>不会解析标签内容</li>
<li>会分别给元素设置相同内容</li>
</ul>
</li>
<li>隐式迭代</li>
</ul>
<h4 id="6-css-设置-获取样式"><a href="#6-css-设置-获取样式" class="headerlink" title="6.css 设置  获取样式"></a>6.css 设置  获取样式</h4><ul>
<li><p>获取<code>$(&#39;#div1&#39;).css(&#39;width&#39;)</code></p>
<ul>
<li>低版本ie中需要给出明确的样式 <code>$(&quot;#div1&quot;).css(&quot;boder-top-width&quot;)</code></li>
<li>获取多个dom元素的jQuery样式时只返回第一个 <code>$(&#39;div&#39;).css(&#39;width&#39;)</code></li>
</ul>
</li>
<li><p>设置单样式 <code>$(&#39;#div1&#39;).css(&#39;width&#39;, &#39;300px&#39;)</code></p>
</li>
<li><p>设置多样式  需要给出对象</p>
<p>` $(“#div1”).css({</p>
<p>​        width:300,</p>
<p>​        ‘height’:’300px’,</p>
<p>​        ‘background-color’:’green’,</p>
<p>​        ‘border-top-width’:’10 solid pink’</p>
<p>​      });`</p>
</li>
<li><p>设置多元素多样式</p>
<p>` $(‘div’).css({        </p>
<p>​        width : 300,</p>
<p>​        ‘height’:’300px’,</p>
<p>​        ‘background-color’ : ‘green’,</p>
<p>​        ‘border’ : ‘10px solid red’,</p>
<p>​        marginTop : ‘10px’</p>
<p>​        }</p>
<p>​      );`</p>
</li>
</ul>
<h4 id="7-jQuery选择器"><a href="#7-jQuery选择器" class="headerlink" title="7.jQuery选择器"></a>7.jQuery选择器</h4><ul>
<li><h5 id="基础选择器"><a href="#基础选择器" class="headerlink" title="基础选择器"></a>基础选择器</h5><table>
<thead>
<tr>
<th>名称</th>
<th>用法</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>ID选择器</td>
<td>$(‘#id’)</td>
<td>获取指定ID的元素</td>
</tr>
<tr>
<td>类选择器</td>
<td>$(‘.class’)</td>
<td>获取同一class的元素</td>
</tr>
<tr>
<td>标签选择器</td>
<td>$(‘div’)</td>
<td>获取统一了标签的元的</td>
</tr>
<tr>
<td>并集选择器</td>
<td>$(‘div, p, li’)</td>
<td>使用逗哈分割，满足就选择</td>
</tr>
<tr>
<td>交集选择器</td>
<td>$(‘div.redClass’)</td>
<td>获取class为redClass的div元素</td>
</tr>
</tbody></table>
</li>
<li><h5 id="层级选择器"><a href="#层级选择器" class="headerlink" title="层级选择器"></a>层级选择器</h5><table>
<thead>
<tr>
<th>名称</th>
<th>用法</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>子代选择器</td>
<td>$(‘ul &gt; li’)</td>
<td>使用&gt;号获取子层级的元素，不会获取孙子层的元素</td>
</tr>
<tr>
<td>后代选择器</td>
<td>$(‘ul li’)</td>
<td>使用空格，获取所有后代元素</td>
</tr>
</tbody></table>
</li>
<li><h5 id="过滤选择器"><a href="#过滤选择器" class="headerlink" title="过滤选择器"></a>过滤选择器</h5><table>
<thead>
<tr>
<th>名称</th>
<th>用法</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://www.w3school.com.cn/jquery/selector_eq.asp">:eq(<em>index</em>)</a></td>
<td>$(“ul li:eq(3)”)</td>
<td>列表中的第四个元素（index 从 0 开始） 索引</td>
</tr>
<tr>
<td><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL2pxdWVyeS9zZWxlY3Rvcl9ldmVuLmFzcA==" title="https://www.w3school.com.cn/jquery/selector_even.asp">:even<i class="fa fa-external-link"></i></span></td>
<td>$(“tr:even”)</td>
<td>所有索引为偶数 <tr> 元素</td>
</tr>
<tr>
<td><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL2pxdWVyeS9zZWxlY3Rvcl9vZGQuYXNw" title="https://www.w3school.com.cn/jquery/selector_odd.asp">:odd<i class="fa fa-external-link"></i></span></td>
<td>$(“tr:odd”)</td>
<td>所有索引为奇数 <tr> 元素</td>
</tr>
</tbody></table>
</li>
<li><h5 id="筛选选择器（方法）"><a href="#筛选选择器（方法）" class="headerlink" title="筛选选择器（方法）"></a>筛选选择器（方法）</h5><table>
<thead>
<tr>
<th>名称</th>
<th>用法</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>childeren(selector)</td>
<td>$(‘ul’)children(‘li’)</td>
<td>相当于子代选择器</td>
</tr>
<tr>
<td>find(selector)</td>
<td>$(‘ul’).find(‘lli’)</td>
<td>相当于后代选择器</td>
</tr>
<tr>
<td>siblind(selector)</td>
<td>$(‘#first’).sibling</td>
<td>查找所有兄弟元素</td>
</tr>
<tr>
<td>parent()</td>
<td>$(‘#first’).parent</td>
<td>获取父元素</td>
</tr>
<tr>
<td>eq(index)</td>
<td>$(‘li’).eq(2)</td>
<td>相当于<a href="https://www.w3school.com.cn/jquery/selector_eq.asp">:eq(<em>index</em>)</a></td>
</tr>
<tr>
<td>next()</td>
<td>$(‘li’).next()</td>
<td>获取下一个兄弟</td>
</tr>
<tr>
<td>prev()</td>
<td>$(‘li’).prev()</td>
<td>获取上一个兄弟</td>
</tr>
</tbody></table>
<p>jQuery支持隐式迭代和链式编程（方法返回值为jQuery对象）</p>
</li>
</ul>
<h4 id="8-类处理方法"><a href="#8-类处理方法" class="headerlink" title="8.类处理方法"></a>8.类处理方法</h4><ul>
<li>添加类addClass    <code>$(&#39;#div1&#39;).addClass(&#39;fontSize30 width200&#39;);</code></li>
<li>删除类removeClass</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$(&#39;#div1&#39;).removeClass(&#39;fontSize30 width200&#39;);</span><br><span class="line"></span><br><span class="line">$(&#39;#div1&#39;).removeClass(); &#x2F;&#x2F; 移除所有类</span><br></pre></td></tr></table></figure>



<ul>
<li>判断类hasClass <code>$(&#39;#div1&#39;).hasClass(&#39;fontSize30 width200&#39;)</code></li>
<li>切换类toggleClass   <code>$(&#39;#div1&#39;).toggleClass(&#39;fontSize30&#39;);</code> 类似开关</li>
</ul>
<h4 id="9-动画"><a href="#9-动画" class="headerlink" title="9.动画"></a>9.动画</h4><ul>
<li><h5 id="基本动画"><a href="#基本动画" class="headerlink" title="基本动画"></a>基本动画</h5><ul>
<li><p>显示 <code>show</code></p>
</li>
<li><p>隐藏 <code>hide</code></p>
</li>
<li><p>切换 <code>toggle</code></p>
</li>
<li><p>滑入 <code>slideDown</code></p>
</li>
<li><p>滑出 <code>slideUp</code></p>
</li>
<li><p>滑动切换 <code>slideToggle</code></p>
</li>
<li><p>淡入 <code>fadeIn</code></p>
</li>
<li><p>淡出 <code>fadeOut</code></p>
</li>
<li><p>淡切换 <code>fadeToggle</code></p>
<p>以上方法均有两个参数：arg1：动画执行事件  arg2：执行完毕后的回调函数</p>
</li>
<li><p>淡到 <code>fadeTo</code> arg1: time arg2: opacity </p>
</li>
</ul>
</li>
<li><h5 id="自定义动画"><a href="#自定义动画" class="headerlink" title="自定义动画"></a>自定义动画</h5><p><code>animate</code>  </p>
<p>arg1：动画属性 对象 必选</p>
<p>arg2: 执行时长    可选</p>
<p>arg3: linnear 匀速 swing 非匀速 可选</p>
<p>arg4:回调函数</p>
<p><code>stop</code></p>
<p>arg1：是否清除动画队列</p>
<p>arg2：是否跳转到当前动画最终状态</p>
</li>
</ul>
<h4 id="10-动态创建元素"><a href="#10-动态创建元素" class="headerlink" title="10.动态创建元素"></a>10.动态创建元素</h4><ul>
<li><p>html方法 内容会自动解析</p>
<p><code>$(&#39;#div1&#39;).html(&#39;我是设置的内容&lt;a href=&quot;https://www.baidu.com&quot;&gt;百度以下&lt;/a&gt;&#39;);</code></p>
</li>
<li><p>$()方法  需要手动append</p>
<p>`var $link = $(‘<span class="exturl" data-url="aHR0cDovL25ld3MuYmFpZHUuY29t" title="http://news.baidu.com">我是新闻<i class="fa fa-external-link"></i></span>‘)；</p>
<p>​      $(‘#div1’).append($link);`</p>
<p><code>append</code> <code>prepend</code> <code>before</code> <code>after</code> <code>appendTo</code> 都可以添加元素</p>
</li>
</ul>
<h4 id="11-移除元素"><a href="#11-移除元素" class="headerlink" title="11.移除元素"></a>11.移除元素</h4><ul>
<li>清空 empty    <code>$(&#39;#ul1&#39;).empty();</code></li>
<li>移除 remove <code>$(&#39;#li3&#39;).remove();</code></li>
</ul>
<h4 id="12-克隆"><a href="#12-克隆" class="headerlink" title="12.克隆"></a>12.克隆</h4><p><code>clone</code> 克隆所有子孙元素在内存中  需要追加进容器中</p>
<p><code>$cdiv = $(&#39;#div1&#39;).clone()</code></p>
<p>参数为bool类型，是否克隆事件，默认克隆   </p>
<p><code>var $cdiv = $(&#39;#div1&#39;).clone(true);</code></p>
<h4 id="13-操作表单元素的值"><a href="#13-操作表单元素的值" class="headerlink" title="13.操作表单元素的值"></a>13.操作表单元素的值</h4><p>​    val方法  </p>
<p>​    不添加参数就是获取 <code>$(&#39;#txt&#39;).val()</code></p>
<p>​    添加参数  就是设置 <code>$(&quot;#txt&quot;).val(&quot;我是设置的值&quot;);</code></p>
<p>14.操作属性</p>
<p>​    attr方法</p>
<p>​    获取属性 <code>console.log($(&#39;img&#39;).attr(&quot;src&quot;)); </code></p>
<p>​    设置单个属性 <code>$(&#39;img&#39;).attr(&#39;src&#39;, &#39;img/2.jpg&#39;); </code></p>
<p>​    设置多个属性 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$(&#39;img&#39;).attr(&#123;</span><br><span class="line">               src : &quot;img&#x2F;2.jpg&quot;,</span><br><span class="line">               aaa : &#39;hahaha&#39;,</span><br><span class="line">               bbb : &#39;bbb&#39;</span><br><span class="line">           &#125;); </span><br></pre></td></tr></table></figure>

<p>​    removeAttr方法</p>
<p>​    移除单个属性 <code> $(&#39;img&#39;).removeAttr(&#39;alt&#39;);</code></p>
<p>​    移除多个属性 <code>$(&#39;img&#39;).removeAttr(&#39;alt aaa bbb&#39;);</code></p>
<h4 id="14-操作布尔属性"><a href="#14-操作布尔属性" class="headerlink" title="14.操作布尔属性"></a>14.操作布尔属性</h4><p>​    jQuery 1.6以后只能使用<code>prop</code>方法进行，不能再使用<code>attr</code>方法</p>
<p>​    <code>$(&#39;#chb1&#39;).prop(&#39;checked&#39;);</code></p>
<h4 id="15-宽高的操作"><a href="#15-宽高的操作" class="headerlink" title="15.宽高的操作"></a>15.宽高的操作</h4><ul>
<li><h5 id="元素"><a href="#元素" class="headerlink" title="元素"></a>元素</h5></li>
</ul>
<p>​        不含padding border margin的宽度<code>console.log($(&#39;#one&#39;).width());</code></p>
<p>​        不含padding border margin的高度<code>console.log($(&#39;#one&#39;).height());</code></p>
<p>​        含padding的宽度 <code> console.log($(&#39;#one&#39;).innerWidth());</code></p>
<p>​        含padding的高度 <code> console.log($(&#39;#one&#39;).innerHeight());</code></p>
<p>​        不含margin的宽度 <code>console.log($(&#39;#one&#39;).outerWidth());</code></p>
<p>​        不含margin的高度 <code>console.log($(&#39;#one&#39;).outerHeight());</code></p>
<p>​        总宽度 <code>console.log($(&#39;#one&#39;).outerWidth(true));</code></p>
<p>​        总高度 <code> console.log($(&#39;#one&#39;).outerHeight(true));</code></p>
<ul>
<li><h5 id="页面"><a href="#页面" class="headerlink" title="页面"></a>页面</h5><p>​    可视区域宽度 <code> console.log($(window).width());</code></p>
<p>​    可是区域高度 <code>console.log($(window).height());</code></p>
</li>
</ul>
<h4 id="16-offset和position方法"><a href="#16-offset和position方法" class="headerlink" title="16.offset和position方法"></a>16.offset和position方法</h4><p>​        offset: 获取相对document的位置  left top</p>
<p>​        <code> console.log($(&#39;#son&#39;).offset());</code></p>
<p>​        position: 获取相对于parent的位置 left top</p>
<p>​        <code>console.log($(&#39;#son&#39;).position());</code></p>
<h4 id="17-滚动条"><a href="#17-滚动条" class="headerlink" title="17.滚动条"></a>17.滚动条</h4><ul>
<li><p>scrollTop</p>
<p>获取： <code>console.log($(&#39;div&#39;).scrollTop());</code></p>
<p>设置： <code>$(&#39;div&#39;).scrollTop(50);</code></p>
</li>
<li><p>scrollLeft</p>
<p>获取： <code>console.log($(&#39;div&#39;).scrollLeft());</code></p>
<p>设置：<code> $(&#39;div&#39;).scrollLeft(50);</code></p>
</li>
</ul>
<h4 id="18-事件注册"><a href="#18-事件注册" class="headerlink" title="18.事件注册"></a>18.事件注册</h4><ul>
<li>简单注册 不支持同时注册  不支持动态注册</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$(&#39;#btn&#39;).click(function() &#123;</span><br><span class="line">            var $divNew &#x3D; $(&#39;&lt;div class&#x3D;&quot;two&quot;&gt;&lt;&#x2F;div&gt;&#39;);</span><br><span class="line">            $(&#39;body&#39;).append($divNew);</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure>

<ul>
<li>bind方法  支持同时注册  不支持动态注册  解绑使用<code>unbind</code></li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$(&#39;div&#39;).bind(&#123;</span><br><span class="line">           mouseenter : function()&#123;</span><br><span class="line">               console.log(&#39;鼠标移入事件&#39;);</span><br><span class="line">           &#125;,</span><br><span class="line">           click : function() &#123;</span><br><span class="line">               console.log(&#39;鼠标点击事件&#39;);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       );</span><br></pre></td></tr></table></figure>

<ul>
<li>delegate方法  支持同时注册和动态注册 基于事件冒泡机制  解绑使用<code>undelegate</code></li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$(&#39;body&#39;).delegate(&#39;div&#39;, &#123;</span><br><span class="line">            mouseenter : function()&#123;</span><br><span class="line">                console.log(&#39;鼠标移入事件&#39;);</span><br><span class="line">            &#125;,</span><br><span class="line">            click : function() &#123;</span><br><span class="line">                 console.log(&#39;鼠标点击事件&#39;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure>

<ul>
<li><p>on方法  统一了事件注册(jQuery1.7以后)   可以注册自定义事件  使用off解绑</p>
<p>普通注册方法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$(&#39;div&#39;).on(&#39;click&#39;, function() &#123;</span><br><span class="line">         console.log(&#39;鼠标点击事件&#39;);</span><br><span class="line">     &#125;);</span><br></pre></td></tr></table></figure>

<p>委托注册方法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$(&#39;body&#39;).on(&#39;click&#39;, &#39;div&#39;, function()&#123;</span><br><span class="line">           console.log(&#39;鼠标点击事件&#39;);</span><br><span class="line">       &#125;);</span><br><span class="line"> &#x2F;&#x2F; 注意this表示注册事件的元素   不是父元素</span><br></pre></td></tr></table></figure>

<p>解绑事件  <code>off</code>方法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$(&#39;#one&#39;).off(); &#x2F;&#x2F; 解绑所有事件</span><br><span class="line">$(&#39;#one&#39;).off(&#39;click&#39;);  &#x2F;&#x2F; 解绑指定事件</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="19-事件触发"><a href="#19-事件触发" class="headerlink" title="19.事件触发"></a>19.事件触发</h4><p>​    <code>$(&#39;#one&#39;).click();</code>：触发id为one元素的click事件</p>
<p>​    <code>     $(&#39;#one&#39;).trigger(&#39;click&#39;);</code> ：使用trigger方法触发click事件 可以触发自定事件</p>
<h4 id="20-事件对象"><a href="#20-事件对象" class="headerlink" title="20.事件对象"></a>20.事件对象</h4><ul>
<li><p>获取事件对象  常用坐标</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$(&#39;#one&#39;).on(&#39;click&#39;, function(event)&#123;</span><br><span class="line">            &#x2F;&#x2F; console.log(event);</span><br><span class="line">            &#x2F;&#x2F; 常用的事件坐标</span><br><span class="line">            console.log(&#39;ScreenX: &#39; + event.screenX);</span><br><span class="line">            console.log(&#39;ScreenY: &#39; + event.screenY);</span><br><span class="line">            console.log(&#39;ClientX: &#39; + event.clientX);</span><br><span class="line">            console.log(&#39;ClientX: &#39; + event.clientY);</span><br><span class="line">            console.log(&#39;PageX: &#39; + event.pageX);</span><br><span class="line">            console.log(&#39;PageY: &#39; + event.pageY);</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure>

<p>screenX screenY：屏幕坐标</p>
<p>clientX clientY: 可视区坐标</p>
<p>pageX pageY: 页面坐标</p>
</li>
<li><p>阻止事件冒泡</p>
<p><code>event.stopPropagation();// 阻止事件冒泡</code></p>
</li>
<li><p>阻止默认行为</p>
<p><code>event.preventDefault();</code></p>
</li>
<li><p>阻止冒泡和默认行为</p>
<p><code>return false;</code></p>
</li>
<li><p>获取键盘输入ASCII</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$(document).on(&#39;keydown&#39;, function(event)&#123;</span><br><span class="line">            console.log(event.keyCode);</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="21-end方法-慎用"><a href="#21-end方法-慎用" class="headerlink" title="21.end方法 慎用"></a>21.end方法 慎用</h4><p>​    链式编程中回到上一个状态获取的jQuery对象， 必须要是jQuery对象才能用。</p>
<p>​    可以连续使用</p>
<h4 id="22-显示迭代"><a href="#22-显示迭代" class="headerlink" title="22.显示迭代"></a>22.显示迭代</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$(function()&#123;</span><br><span class="line">        var $lis &#x3D;  $(&#39;#ulList&#39;).children();</span><br><span class="line">        $lis.each(function(index, element)&#123;</span><br><span class="line">        $(element).css(&#39;opacity&#39;, (index+1)&#x2F;10);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>用于设置不同内容  相同内容用隐式迭代即可</p>
<h4 id="23-多库共存"><a href="#23-多库共存" class="headerlink" title="23.多库共存"></a>23.多库共存</h4><ul>
<li>​    四种方法查看版本号：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">console.log(jQuery.fn.jquery);</span><br><span class="line">console.log(jQuery.prototype.jquery);</span><br><span class="line">console.log($.fn.jquery);</span><br><span class="line">console.log($.prototype.jquery);</span><br></pre></td></tr></table></figure>

<ul>
<li><p>引入多个jQuery文件  </p>
<p>后引入的为$实际版本</p>
<p>解决多库共存</p>
<ul>
<li>两个库</li>
</ul>
<p><code> var _$ = $.noConflict(); // 释放版本控制权  jQuery任然为原版本</code> </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(function($)&#123;</span><br><span class="line">        &#x2F;&#x2F; 老代码</span><br><span class="line">    &#125;(_$));&#x2F;&#x2F; 老代码兼容处理</span><br></pre></td></tr></table></figure>

<ul>
<li><p>多个库</p>
<p>版本有jQuer库引入顺序决定</p>
<p>逐步释放标记即可实现多库共存</p>
<p><code> var _$ = $.noConflict(); // 释放版本控制权  jQuery任然为原版本</code></p>
</li>
</ul>
</li>
</ul>
]]></content>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>关于拆包粘包问题的总结</title>
    <url>/2021/04/10/%E5%85%B3%E4%BA%8E%E6%8B%86%E5%8C%85%E7%B2%98%E5%8C%85%E9%97%AE%E9%A2%98%E7%9A%84%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h2 id="为什么会有拆包现象"><a href="#为什么会有拆包现象" class="headerlink" title="为什么会有拆包现象"></a>为什么会有拆包现象</h2><p>&emsp;&emsp;网络数据传输过程中，传输数据包的大小收到多方面因素限制，如MTU、MSS、滑动窗口等。如果一次要传输的数据量过大，就会进行包的拆分(也叫断包)。数据包到达后，可根据数据传输协议相关内容进行组包。</p>
<span id="more"></span>

<h2 id="为什么会有粘包现象"><a href="#为什么会有粘包现象" class="headerlink" title="为什么会有粘包现象"></a>为什么会有粘包现象</h2><p>&emsp;&emsp;TCP传输发生粘包根源于<span class="exturl" data-url="aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS9OYWdsZSVFNyVBRSU5NyVFNiVCMyU5NS81NjQ1MTcyP2ZyPWFsYWRkaW4=" title="https://baike.baidu.com/item/Nagle%E7%AE%97%E6%B3%95/5645172?fr=aladdin">Nagle算法<i class="fa fa-external-link"></i></span>。Nagle算法主要用于解决频繁传输小数据包而带来的网络拥塞问题。由于每次数据传输都需要携带IP首部、TCP首部等数据，频繁的传输小数据包，会使得数据传输时有效数据率下降。Nagle解决这一问题的方法可以理解为批量发送，可以简单理解为尽可能使得小数据包构成大数据发送，从而获得较高的有效数据率。</p>
<p>&emsp;&emsp;由于小数据包在传输之前需要等待查看是否能和后续包组合，由此会产生一定的网络延迟。此外，数据包之间的组合还会造成包与包之间的粘连，也就是粘包现象。</p>
<p>&emsp;&emsp;UDP默认为一种一对多的传输模式，是没有使用Nagle算法的，故不存在粘包问题。</p>
<h2 id="造成的问题"><a href="#造成的问题" class="headerlink" title="造成的问题"></a>造成的问题</h2><p>&emsp;&emsp;拆包粘包现象，会造成接收方在读取到数据包时，无法确认数据包是否完整，数据包中那一部分时自己需要等的等问题，进而无法顺利的进行数据处理。</p>
<h2 id="问题的解决"><a href="#问题的解决" class="headerlink" title="问题的解决"></a>问题的解决</h2><ul>
<li>禁用Nagle算法—-最简单粗暴的办法</li>
</ul>
<p>&emsp;&emsp;在Linux中默认是开启Nagle优化算法的，在大量小数据包的场景下可以有效的降低网络开销。对于一些希望获得及时响应的场景，可以是通过Linux提供的<strong>TCP_NODELAY</strong>参数禁用Nagle。Netty中为了是数据传输延迟最小化，就默认禁用了Nagle算法。</p>
<p>&emsp;&emsp;此方法可以有效的解决粘包问题，提高数据响应速度。但也会对网络带来一定的压力。</p>
<ul>
<li>定义应用层通信协议</li>
</ul>
<p>&emsp;&emsp;这个方法相对第一种，更加复杂，灵活度也更大。主流协议解决方方案：</p>
<p><strong>消息长度固定</strong>     接收到固定长度的报文后，视为就受到完整数据。</p>
<p>&emsp;&emsp;消息定长法使用非常简单，缺点也很明显，无法适应变长包的情况。固定长度过大，会造成带宽浪费、过小又不能适应大数据包传输。</p>
<p><strong>特定分隔符</strong> 接收方根据特殊分隔符分割数据包</p>
<p>&emsp;&emsp;在设置分隔符时要尽量避免与消息体内字符发生冲突。特定分隔符法在消息协议足够简单的情况下比较高效(协议代价低)。如：Redis中就使用换行符作为数据分割。</p>
<p><strong>消息长度+消息内容</strong>  项目开发中最长用的方式。</p>
<p>&emsp;&emsp;消息长度+消息内容的使用方式非常灵活。例如，使用4字节的int记录消息内容长度，消息内容紧随其后。读取消息时先获取4字节的消息内容长度，然后根据内容长度获取消息内容。可以理解为消息固定长度的一种变体。</p>
]]></content>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>初识布隆过滤器</title>
    <url>/2021/03/29/%E5%88%9D%E8%AF%86%E5%B8%83%E9%9A%86%E8%BF%87%E6%BB%A4%E5%99%A8/</url>
    <content><![CDATA[<p>布隆过滤器（Bloom Filter）是1970年由布隆提出的。它实际上是一个很长的二进制向量和一系列随机映射函数。布隆过滤器可以用于检索一个元素是否在一个集合中。它的优点是空间效率和查询时间都比一般的算法要好的多，缺点是有一定的误识别率和删除困难。</p>
<span id="more"></span>



<p>相比于其它的数据结构，布隆过滤器在空间和时间方面都有巨大的优势。布隆过滤器存储空间和插入/查询时间都是常数。另外, Hash函数相互之间没有关系，方便由硬件并行实现。布隆过滤器不需要存储元素本身，在某些对保密要求非常严格的场合有优势。</p>
<p>布隆过滤器可以表示全集，其它任何数据结构都不能。</p>
<p>但是布隆过滤器的缺点和优点一样明显。误算率是其中之一。随着存入的元素数量增加，误算率随之增加。常见的补救办法是建立一个小的白名单，存储那些可能被误判的元素。但是如果元素数量太少，则使用散列表足矣。</p>
<p>另外，一般情况下不能从布隆过滤器中删除元素。我们很容易想到把位列阵变成整数数组，每插入一个元素相应的计数器加1, 这样删除元素时将计数器减掉就可以了。然而要保证安全的删除元素并非如此简单。首先我们必须保证删除的元素的确在布隆过滤器里面. 这一点单凭这个过滤器是无法保证的。另外计数器回绕也会造成问题。</p>
<p>在降低误算率方面，有不少工作，使得出现了很多布隆过滤器的变种。</p>
<p>补充：</p>
<p>布谷鸟过滤器</p>
]]></content>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>二叉树树的遍历</title>
    <url>/2021/04/30/%E6%A0%91%E7%9A%84%E9%81%8D%E5%8E%86/</url>
    <content><![CDATA[<p>&emsp;&emsp;二叉树树是编程中最常见的数据结构之一，由于其结构清晰、访问效率高等特点被广泛应用。本文将从时间复杂度和空间复杂度两个层面，对二叉树树的遍历进行的总结。主要包括：</p>
<ul>
<li>利用系统栈递归遍历</li>
<li>利用用户栈递归遍历</li>
<li>二叉线索树遍历</li>
<li>Morris算法遍历</li>
</ul>
<span id="more"></span>

<h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><h2 id="结点结构"><a href="#结点结构" class="headerlink" title="结点结构"></a>结点结构</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// the node of a binary tree</span></span><br><span class="line"><span class="keyword">type</span> TreeNode <span class="keyword">struct</span> &#123;</span><br><span class="line">  Val            <span class="keyword">int</span></span><br><span class="line">  LChild, RChild *TreeNode</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="测试用树"><a href="#测试用树" class="headerlink" title="测试用树"></a>测试用树</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// GetTree 返回如下二叉树树</span></span><br><span class="line"><span class="comment">//      1</span></span><br><span class="line"><span class="comment">//    /   \</span></span><br><span class="line"><span class="comment">//   2     3</span></span><br><span class="line"><span class="comment">//  / \   / \</span></span><br><span class="line"><span class="comment">// 5   6 7   8</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetTree</span><span class="params">()</span> *<span class="title">TreeNode</span></span> &#123;</span><br><span class="line">  <span class="keyword">return</span> &amp;TreeNode&#123;</span><br><span class="line">    Val: <span class="number">1</span>,</span><br><span class="line">    LChild: &amp;TreeNode&#123;</span><br><span class="line">      Val: <span class="number">2</span>,</span><br><span class="line">      LChild: &amp;TreeNode&#123;</span><br><span class="line">        Val: <span class="number">4</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      RChild: &amp;TreeNode&#123;</span><br><span class="line">        Val: <span class="number">5</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    RChild: &amp;TreeNode&#123;</span><br><span class="line">      Val: <span class="number">3</span>,</span><br><span class="line">      LChild: &amp;TreeNode&#123;</span><br><span class="line">        Val: <span class="number">6</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      RChild: &amp;TreeNode&#123;</span><br><span class="line">        Val: <span class="number">7</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="利用系统栈遍历"><a href="#利用系统栈遍历" class="headerlink" title="利用系统栈遍历"></a>利用系统栈遍历</h1><p>&emsp;&emsp;使用系统栈进行遍历最为简单，此处提供了前序中序后续遍历代码：</p>
<h2 id="前中后序遍历代码"><a href="#前中后序遍历代码" class="headerlink" title="前中后序遍历代码"></a>前中后序遍历代码</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> (</span><br><span class="line">  PRE = <span class="literal">iota</span>  <span class="comment">// 先序（前序）</span></span><br><span class="line">  IN			<span class="comment">// 中序</span></span><br><span class="line">  POST		<span class="comment">// 后续</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用系统栈进行遍历</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TraversalWithSystemStack</span><span class="params">(root *TreeNode, order <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">  <span class="keyword">if</span> root == <span class="literal">nil</span> &#123;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> order == PRE &#123; <span class="comment">// 先序</span></span><br><span class="line">    fmt.Print(root.Val, <span class="string">&quot;-&gt;&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  TraversalWithSystemStack(root.LChild, order)</span><br><span class="line">  <span class="keyword">if</span> order == IN &#123; <span class="comment">// 中序</span></span><br><span class="line">    fmt.Print(root.Val, <span class="string">&quot;-&gt;&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  TraversalWithSystemStack(root.RChild, order)</span><br><span class="line">  <span class="keyword">if</span> order == POST &#123; <span class="comment">// 后序</span></span><br><span class="line">    fmt.Print(root.Val, <span class="string">&quot;-&gt;&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="算法复杂度分析"><a href="#算法复杂度分析" class="headerlink" title="算法复杂度分析"></a>算法复杂度分析</h2><p>&emsp;&emsp;时间复杂度O(n)，空间复杂度O(log n)</p>
<h1 id="利用用户栈遍历"><a href="#利用用户栈遍历" class="headerlink" title="利用用户栈遍历"></a>利用用户栈遍历</h1><p>&emsp;&emsp;利用用户栈进行遍历，可以避免系统栈中程序上下文信息开销，对内存占用有一定的优化作用。</p>
<h2 id="先序遍历代码"><a href="#先序遍历代码" class="headerlink" title="先序遍历代码"></a>先序遍历代码</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义用户栈</span></span><br><span class="line"><span class="keyword">type</span> Stack <span class="keyword">struct</span> &#123;</span><br><span class="line">  Arr [<span class="number">3</span>]*TreeNode</span><br><span class="line">  Top <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> stack Stack</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">PreOrderWithUserStack</span><span class="params">(root *TreeNode)</span></span> &#123;</span><br><span class="line">  stack.Arr[stack.Top] = root</span><br><span class="line">  stack.Top++</span><br><span class="line">  <span class="keyword">for</span> stack.Top != <span class="number">0</span> &#123;</span><br><span class="line">    stack.Top--</span><br><span class="line">    node := stack.Arr[stack.Top]</span><br><span class="line">    fmt.Print(node.Val, <span class="string">&quot;-&gt;&quot;</span>)</span><br><span class="line">    <span class="comment">// 注意压栈顺序  先右后左</span></span><br><span class="line">    <span class="keyword">if</span> node.RChild != <span class="literal">nil</span> &#123;</span><br><span class="line">      stack.Arr[stack.Top] = node.RChild</span><br><span class="line">      stack.Top++</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> node.LChild != <span class="literal">nil</span> &#123;</span><br><span class="line">      stack.Arr[stack.Top] = node.LChild</span><br><span class="line">      stack.Top++</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="算法复杂度分析-1"><a href="#算法复杂度分析-1" class="headerlink" title="算法复杂度分析"></a>算法复杂度分析</h2><p>&emsp;&emsp;时间复杂度O(n)，空间复杂度O(log n)</p>
<h1 id="二叉线索树遍历"><a href="#二叉线索树遍历" class="headerlink" title="二叉线索树遍历"></a>二叉线索树遍历</h1><p>&emsp;&emsp;下图为二叉搜索树的结点结构。</p>
<table>
<thead>
<tr>
<th>左子树或前驱结点</th>
<th>左标志位</th>
<th>值</th>
<th>右标志位</th>
<th>右子树或后继结点</th>
</tr>
</thead>
<tbody><tr>
<td>LChild</td>
<td>LTag</td>
<td>Val</td>
<td>RTag</td>
<td>RChild</td>
</tr>
</tbody></table>
<p>&emsp;&emsp;可以改造二叉树的遍历代码，方便的实现二叉树的二叉线索树改造，此处不过的赘述。</p>
<h2 id="算法复杂度"><a href="#算法复杂度" class="headerlink" title="算法复杂度"></a>算法复杂度</h2><p>&emsp;&emsp;&emsp;&emsp;时间复杂度O(n)，空间复杂度O(n)</p>
<h1 id="Morris算法遍历"><a href="#Morris算法遍历" class="headerlink" title="Morris算法遍历"></a>Morris算法遍历</h1><p>&emsp;&emsp;使用Morris算法进行遍历可以在保持遍历时间复杂度为O(n)的情况下，将空间复杂度优化到O(1)，实现树的前中后序遍历。</p>
<h2 id="先序遍历代码-1"><a href="#先序遍历代码-1" class="headerlink" title="先序遍历代码"></a>先序遍历代码</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">PreOderMorris</span><span class="params">(root *TreeNode)</span></span> &#123;</span><br><span class="line">  cur, mostright := root, root</span><br><span class="line">  <span class="keyword">for</span> cur != <span class="literal">nil</span> &#123;</span><br><span class="line">    mostright = cur.LChild</span><br><span class="line">    <span class="keyword">if</span> mostright != <span class="literal">nil</span> &#123;</span><br><span class="line">      <span class="keyword">for</span> mostright.RChild != <span class="literal">nil</span> &amp;&amp; mostright.RChild != cur &#123;</span><br><span class="line">        mostright = mostright.RChild</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> mostright.RChild == <span class="literal">nil</span> &#123;</span><br><span class="line">        mostright.RChild = cur</span><br><span class="line">        fmt.Print(cur.Val, <span class="string">&quot;--&gt;&quot;</span>)</span><br><span class="line">        cur = cur.LChild</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">      &#125; <span class="keyword">else</span> &#123; <span class="comment">// mostright.RChild == cur</span></span><br><span class="line">        mostright.RChild = <span class="literal">nil</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      fmt.Print(cur.Val, <span class="string">&quot;--&gt;&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    cur = cur.RChild</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="算法复杂度分析-2"><a href="#算法复杂度分析-2" class="headerlink" title="算法复杂度分析"></a>算法复杂度分析</h2><p>&emsp;&emsp;时间复杂度O(n)，空间复杂度O(1)</p>
<h1 id="算法比较"><a href="#算法比较" class="headerlink" title="算法比较"></a>算法比较</h1><table>
<thead>
<tr>
<th></th>
<th>时间复杂度</th>
<th>空间复杂度</th>
</tr>
</thead>
<tbody><tr>
<td>系统栈</td>
<td>O(n)</td>
<td>O(log n)</td>
</tr>
<tr>
<td>用户栈</td>
<td>O(n)</td>
<td>O(log n)</td>
</tr>
<tr>
<td>线索树</td>
<td>O(n)</td>
<td>O(n)</td>
</tr>
<tr>
<td>Morris</td>
<td>O(n)</td>
<td>O(1)</td>
</tr>
</tbody></table>
<h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><p>使用go test测试结果</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">goos: windows</span><br><span class="line">goarch: amd64</span><br><span class="line">pkg: Algorithm/TraversalOfTree</span><br><span class="line">cpu: AMD Ryzen <span class="number">7</span> <span class="number">4800</span>U with Radeon Graphics</span><br><span class="line">BenchmarkTraversalWithSystemStack        <span class="number">1000000</span>              <span class="number">1021</span> ns/op              <span class="number">0</span> B/op</span><br><span class="line">      <span class="number">0</span> allocs/op</span><br><span class="line">BenchmarkPreOrderWithUserStack           <span class="number">1000000</span>              <span class="number">1164</span> ns/op              <span class="number">0</span> B/op</span><br><span class="line">      <span class="number">0</span> allocs/op</span><br><span class="line">BenchmarkPreOderMorris                   <span class="number">1494206</span>               <span class="number">815.2</span> ns/op            <span class="number">0</span> B/op</span><br><span class="line">      <span class="number">0</span> allocs/op</span><br><span class="line">PASS</span><br><span class="line">ok      Algorithm/TraversalOfTree       <span class="number">4.203</span>s</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>GoMap底层实现</title>
    <url>/2021/04/18/GoMap%E5%BA%95%E5%B1%82%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[<p>&emsp;&emsp;map 的设计也被称为 “The dictionary problem”，它的任务是设计一种数据结构用来维护一个集合的数据，并且可以同时对集合进行增删查改的操作。最主要的数据结构有两种：<code>哈希查找表（Hash table）</code>、<code>搜索树（Search tree）</code>。<span id="more"></span></p>
<p>&emsp;&emsp;哈希查找表用一个哈希函数将 key 分配到不同的桶（bucket，也就是数组的不同 index）。这样，开销主要在哈希函数的计算以及数组的常数访问时间。在很多场景下，哈希查找表的性能很高。哈希查找表一般会存在“碰撞”的问题，一般有两种应对方法：<code>链表法</code>和<code>开放地址法</code>。hash table 是计算机数据结构中一个最重要的设计。大部分 hash table 都实现了快速查找、添加、删除的功能。Go 语言内置的 map 实现了上述所有功能。</p>
<p>&emsp;&emsp;搜索树法一般采用自平衡搜索树，包括：AVL 树，红黑树。</p>
<p>&emsp;&emsp;自平衡搜索树法的最差搜索效率是 O(logN)，而哈希查找表最差是 O(N)。当然，哈希查找表的平均查找效率是 O(1)，如果哈希函数设计的很好，最坏的情况基本不会出现。还有一点，遍历自平衡搜索树，返回的 key 序列，一般会按照从小到大的顺序；而哈希查找表则是乱序的。</p>
<p>&emsp;&emsp;Go 语言采用的是哈希查找表，并且使用链表解决哈希冲突。</p>
<p>&emsp;&emsp;<strong>本文使用的Go版本为1.16</strong></p>
<h1 id="存储结构"><a href="#存储结构" class="headerlink" title="存储结构"></a>存储结构</h1><p>引用一张图片，先来看看map的数据结构。来源<span class="exturl" data-url="aHR0cHM6Ly9sb3V5dXRpbmcuYmxvZy5jc2RuLm5ldC9hcnRpY2xlL2RldGFpbHMvMTA0MjM4NDE4" title="https://louyuting.blog.csdn.net/article/details/104238418">Java map和golang map的一些点<i class="fa fa-external-link"></i></span></p>
<p><img src="https://img-blog.csdnimg.cn/20200209182103506.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTA4NTMyNjE=,size_16,color_FFFFFF,t_70"></p>
<h2 id="hmap"><a href="#hmap" class="headerlink" title="hmap"></a>hmap</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> hmap <span class="keyword">struct</span> &#123;</span><br><span class="line">  count     <span class="keyword">int</span> 	 <span class="comment">// map的大小  调用内建函数 len时返回这个值</span></span><br><span class="line">  flags     <span class="keyword">uint8</span>  <span class="comment">// 代表map的状态标志</span></span><br><span class="line">  B         <span class="keyword">uint8</span>  <span class="comment">// 桶数量的log_2  最多可以包含 装填因子*2^B 个项</span></span><br><span class="line">  noverflow <span class="keyword">uint16</span> <span class="comment">// 溢出桶的近似数 详情查看incrnoverflow方法</span></span><br><span class="line">  hash0     <span class="keyword">uint32</span> <span class="comment">// hash 种子  计算hash值时使用</span></span><br><span class="line">  buckets    unsafe.Pointer <span class="comment">// 指向桶数组的指针 有可能为nil</span></span><br><span class="line">  oldbuckets unsafe.Pointer <span class="comment">// 指向原同数组的指针  只有在扩容时不为nil</span></span><br><span class="line">  nevacuate  <span class="keyword">uintptr</span>        <span class="comment">// 已迁移数 扩容时候已经移动到新数组中的桶数量</span></span><br><span class="line">  extra *mapextra 		  <span class="comment">// 可选字段 </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="flags"><a href="#flags" class="headerlink" title="flags"></a>flags</h3><table>
<thead>
<tr>
<th>位号</th>
<th>意义</th>
</tr>
</thead>
<tbody><tr>
<td>0</td>
<td>可能有迭代器正在使用桶</td>
</tr>
<tr>
<td>1</td>
<td>可能有迭代器正在使用旧桶</td>
</tr>
<tr>
<td>2</td>
<td>有一个协程正在写map</td>
</tr>
<tr>
<td>3</td>
<td>正在进行sameSizeGrow</td>
</tr>
</tbody></table>
<h2 id="bmap"><a href="#bmap" class="headerlink" title="bmap"></a>bmap</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> bmap <span class="keyword">struct</span> &#123;</span><br><span class="line">  tophash [bucketCnt]<span class="keyword">uint8</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp;内部是一个大小为8的数组，tophash。bucketCnt在const中声明，值为8。通常tophash保存数据为hash值的高八位，用以区分桶内不同的条目。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Maximum number of key/elem pairs a bucket can hold.</span></span><br><span class="line">bucketCntBits = <span class="number">3</span></span><br><span class="line">bucketCnt     = <span class="number">1</span> &lt;&lt; bucketCntBits</span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp;但这只是表面上的结构，在编译期间，编译器会动态的创建新的结构。这才是正在意义上的“桶”。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> bmap <span class="keyword">struct</span> &#123;</span><br><span class="line">    topbits  [<span class="number">8</span>]<span class="keyword">uint8</span></span><br><span class="line">    keys     [<span class="number">8</span>]keytype</span><br><span class="line">    values   [<span class="number">8</span>]valuetype</span><br><span class="line">    pad      <span class="keyword">uintptr</span></span><br><span class="line">    overflow <span class="keyword">uintptr</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp;当 map 的 key 和 value 都不是指针，并且 size 都小于 128 字节的情况下，会把 bmap 标记为不含指针，这样可以避免 gc 时扫描整个 hmap。但是，我们看 bmap 其实有一个 overflow 的字段，是指针类型的，破坏了 bmap 不含指针的设想，这时会把 overflow 移动到 extra 字段来。</p>
<h2 id="mapextra"><a href="#mapextra" class="headerlink" title="mapextra"></a>mapextra</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> mapextra <span class="keyword">struct</span> &#123;</span><br><span class="line">  overflow    *[]*bmap</span><br><span class="line">  oldoverflow *[]*bmap</span><br><span class="line"></span><br><span class="line">  nextOverflow *bmap</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="使用过程"><a href="#使用过程" class="headerlink" title="使用过程"></a>使用过程</h1><h2 id="创建map"><a href="#创建map" class="headerlink" title="创建map"></a>创建map</h2><p>&emsp;&emsp;创建map时候，实际调用的是makemap函数。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">makemap</span><span class="params">(t *maptype, hint <span class="keyword">int</span>, h *hmap)</span> *<span class="title">hmap</span></span> &#123;</span><br><span class="line">  mem, overflow := math.MulUintptr(<span class="keyword">uintptr</span>(hint), t.bucket.size)</span><br><span class="line">  <span class="keyword">if</span> overflow || mem &gt; maxAlloc &#123;</span><br><span class="line">    hint = <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> h == <span class="literal">nil</span> &#123;</span><br><span class="line">    h = <span class="built_in">new</span>(hmap)</span><br><span class="line">  &#125;</span><br><span class="line">  h.hash0 = fastrand()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 找一个合适的B，使得装填因子在合理范围内</span></span><br><span class="line">  B := <span class="keyword">uint8</span>(<span class="number">0</span>)</span><br><span class="line">  <span class="keyword">for</span> overLoadFactor(hint, B) &#123;</span><br><span class="line">    B++</span><br><span class="line">  &#125;</span><br><span class="line">  h.B = B</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将预分配的空间放在extra进行管理 使用时在进行具体划分</span></span><br><span class="line">  <span class="keyword">if</span> h.B != <span class="number">0</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> nextOverflow *bmap</span><br><span class="line">    h.buckets, nextOverflow = makeBucketArray(t, h.B, <span class="literal">nil</span>)</span><br><span class="line">    <span class="keyword">if</span> nextOverflow != <span class="literal">nil</span> &#123;</span><br><span class="line">      h.extra = <span class="built_in">new</span>(mapextra)</span><br><span class="line">      h.extra.nextOverflow = nextOverflow</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> h</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="键的哈希映射"><a href="#键的哈希映射" class="headerlink" title="键的哈希映射"></a>键的哈希映射</h2><p>&emsp;&emsp;key 经过哈希计算后得到哈希值，共 64 个 bit 位（64位机，32位机就不讨论了，现在主流都是64位机），计算它到底要落在哪个桶时，只会用到最后 B 个 bit 位(B为hmap中的B)。如果 B = 5，那么桶的数量，也就是 buckets 数组的长度是 2^5 = 32。再用哈希值的高 8 位，找到此 key 在 bucket 中的位置，这是在寻找已有的 key。最开始桶内还没有 key，新加入的 key 会找到第一个空位，放入。如果在 bucket 中没找到，并且 overflow 不为空，还要继续去 overflow bucket 中寻找，直到找到或是所有的 key 槽位都找遍了，包括所有的 overflow bucket。</p>
<h2 id="查询值"><a href="#查询值" class="headerlink" title="查询值"></a>查询值</h2><p>&emsp;&emsp;有两种方法mapaccess1 和 mapaccess2。这里先看看mapaccess1，查询key对应的val，如果键值对不存在，返回零值。mapaccess2则返回零值和false。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">mapaccess1</span><span class="params">(t *maptype, h *hmap, key unsafe.Pointer)</span> <span class="title">unsafe</span>.<span class="title">Pointer</span></span> &#123;</span><br><span class="line">  <span class="keyword">if</span> raceenabled &amp;&amp; h != <span class="literal">nil</span> &#123;</span><br><span class="line">    callerpc := getcallerpc()</span><br><span class="line">    pc := funcPC(mapaccess1)</span><br><span class="line">    racereadpc(unsafe.Pointer(h), callerpc, pc)</span><br><span class="line">    raceReadObjectPC(t.key, key, callerpc, pc)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> msanenabled &amp;&amp; h != <span class="literal">nil</span> &#123;</span><br><span class="line">    msanread(key, t.key.size)</span><br><span class="line">  &#125;</span><br><span class="line">    <span class="comment">// 如果map没有初始化，或者大小为0   返回零值   </span></span><br><span class="line">  <span class="keyword">if</span> h == <span class="literal">nil</span> || h.count == <span class="number">0</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> t.hashMightPanic() &#123;</span><br><span class="line">      t.hasher(key, <span class="number">0</span>) <span class="comment">// see issue 23734</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> unsafe.Pointer(&amp;zeroVal[<span class="number">0</span>])</span><br><span class="line">  &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// map不支持并发操作，写竞争判断</span></span><br><span class="line">  <span class="keyword">if</span> h.flags&amp;hashWriting != <span class="number">0</span> &#123;</span><br><span class="line">    throw(<span class="string">&quot;concurrent map read and map write&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 计算hash值 并找到对应的桶</span></span><br><span class="line">  hash := t.hasher(key, <span class="keyword">uintptr</span>(h.hash0))</span><br><span class="line">  m := bucketMask(h.B)</span><br><span class="line">  b := (*bmap)(add(h.buckets, (hash&amp;m)*<span class="keyword">uintptr</span>(t.bucketsize)))</span><br><span class="line">    <span class="comment">// 应对map增在扩容迁移的情况</span></span><br><span class="line">  <span class="keyword">if</span> c := h.oldbuckets; c != <span class="literal">nil</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> !h.sameSizeGrow() &#123;</span><br><span class="line">      <span class="comment">// There used to be half as many buckets; mask down one more power of two.</span></span><br><span class="line">      m &gt;&gt;= <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    oldb := (*bmap)(add(c, (hash&amp;m)*<span class="keyword">uintptr</span>(t.bucketsize)))</span><br><span class="line">    <span class="keyword">if</span> !evacuated(oldb) &#123;</span><br><span class="line">      b = oldb</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  top := tophash(hash)</span><br><span class="line">bucketloop:</span><br><span class="line">    <span class="comment">// 遍历查找对应的条目</span></span><br><span class="line">  <span class="keyword">for</span> ; b != <span class="literal">nil</span>; b = b.overflow(t) &#123;</span><br><span class="line">    <span class="keyword">for</span> i := <span class="keyword">uintptr</span>(<span class="number">0</span>); i &lt; bucketCnt; i++ &#123;</span><br><span class="line">      <span class="keyword">if</span> b.tophash[i] != top &#123;</span><br><span class="line">        <span class="keyword">if</span> b.tophash[i] == emptyRest &#123;</span><br><span class="line">          <span class="keyword">break</span> bucketloop</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">      &#125;</span><br><span class="line">            <span class="comment">// 定位键</span></span><br><span class="line">      k := add(unsafe.Pointer(b), dataOffset+i*<span class="keyword">uintptr</span>(t.keysize))</span><br><span class="line">      <span class="keyword">if</span> t.indirectkey() &#123;</span><br><span class="line">        k = *((*unsafe.Pointer)(k))</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> t.key.equal(key, k) &#123;</span><br><span class="line">                <span class="comment">// 定位值</span></span><br><span class="line">        e := add(unsafe.Pointer(b), dataOffset+bucketCnt*<span class="keyword">uintptr</span>(t.keysize)+i*<span class="keyword">uintptr</span>(t.elemsize))</span><br><span class="line">        <span class="keyword">if</span> t.indirectelem() &#123;</span><br><span class="line">          e = *((*unsafe.Pointer)(e))</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> e</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> unsafe.Pointer(&amp;zeroVal[<span class="number">0</span>])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="查询键和值"><a href="#查询键和值" class="headerlink" title="查询键和值"></a>查询键和值</h2><p>&emsp;&emsp;使用mapaccessK函数，实现和上面mapaccess1基本一致，仅仅是返回值不同。</p>
<h2 id="扩容机制"><a href="#扩容机制" class="headerlink" title="扩容机制"></a>扩容机制</h2><p>&emsp;&emsp;由于map的扩容依赖于键值对的插入，不太好分开说明，这里就一并进行分析了。大致流程如下:</p>
<ol>
<li>查找对应键的桶，如果找到了，则为更新数据，修改数据后退出。如果未找到则执行2</li>
<li>检查扩容条件，确认是否需要扩容。需要则触发扩容，并返回again再次查找对应桶，否则执行3</li>
<li>如果桶已满，则添加新的桶，然后写入数据。否则，直接写入数据。结束。</li>
</ol>
<p>其中还有一些参数校验、并发冲突等。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">mapassign</span><span class="params">(t *maptype, h *hmap, key unsafe.Pointer)</span> <span class="title">unsafe</span>.<span class="title">Pointer</span></span> &#123;</span><br><span class="line">  <span class="keyword">if</span> h == <span class="literal">nil</span> &#123;</span><br><span class="line">    <span class="built_in">panic</span>(plainError(<span class="string">&quot;assignment to entry in nil map&quot;</span>))</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> raceenabled &#123;</span><br><span class="line">    callerpc := getcallerpc()</span><br><span class="line">    pc := funcPC(mapassign)</span><br><span class="line">    racewritepc(unsafe.Pointer(h), callerpc, pc)</span><br><span class="line">    raceReadObjectPC(t.key, key, callerpc, pc)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> msanenabled &#123;</span><br><span class="line">    msanread(key, t.key.size)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> h.flags&amp;hashWriting != <span class="number">0</span> &#123;</span><br><span class="line">    throw(<span class="string">&quot;concurrent map writes&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  hash := t.hasher(key, <span class="keyword">uintptr</span>(h.hash0))</span><br><span class="line">  <span class="comment">// 修改写标志位</span></span><br><span class="line">  h.flags ^= hashWriting</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> h.buckets == <span class="literal">nil</span> &#123;</span><br><span class="line">    h.buckets = newobject(t.bucket) <span class="comment">// newarray(t.bucket, 1)</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">again:</span><br><span class="line">  bucket := hash &amp; bucketMask(h.B)</span><br><span class="line">  <span class="keyword">if</span> h.growing() &#123;</span><br><span class="line">    growWork(t, h, bucket) <span class="comment">// 搬迁  迁移桶</span></span><br><span class="line">  &#125;</span><br><span class="line">  b := (*bmap)(add(h.buckets, bucket*<span class="keyword">uintptr</span>(t.bucketsize)))</span><br><span class="line">  top := tophash(hash)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> inserti *<span class="keyword">uint8</span></span><br><span class="line">  <span class="keyword">var</span> insertk unsafe.Pointer</span><br><span class="line">  <span class="keyword">var</span> elem unsafe.Pointer</span><br><span class="line">bucketloop:</span><br><span class="line">  <span class="keyword">for</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> i := <span class="keyword">uintptr</span>(<span class="number">0</span>); i &lt; bucketCnt; i++ &#123;</span><br><span class="line">      <span class="keyword">if</span> b.tophash[i] != top &#123;</span><br><span class="line">        <span class="keyword">if</span> isEmpty(b.tophash[i]) &amp;&amp; inserti == <span class="literal">nil</span> &#123;</span><br><span class="line">          inserti = &amp;b.tophash[i]</span><br><span class="line">          insertk = add(unsafe.Pointer(b), dataOffset+i*<span class="keyword">uintptr</span>(t.keysize))</span><br><span class="line">          elem = add(unsafe.Pointer(b), dataOffset+bucketCnt*<span class="keyword">uintptr</span>(t.keysize)+i*<span class="keyword">uintptr</span>(t.elemsize))</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> b.tophash[i] == emptyRest &#123;</span><br><span class="line">          <span class="keyword">break</span> bucketloop</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">      &#125;</span><br><span class="line">      k := add(unsafe.Pointer(b), dataOffset+i*<span class="keyword">uintptr</span>(t.keysize))</span><br><span class="line">      <span class="keyword">if</span> t.indirectkey() &#123;</span><br><span class="line">        k = *((*unsafe.Pointer)(k))</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> !t.key.equal(key, k) &#123;</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> t.needkeyupdate() &#123;</span><br><span class="line">        typedmemmove(t.key, k, key)</span><br><span class="line">      &#125;</span><br><span class="line">      elem = add(unsafe.Pointer(b), dataOffset+bucketCnt*<span class="keyword">uintptr</span>(t.keysize)+i*<span class="keyword">uintptr</span>(t.elemsize))</span><br><span class="line">      <span class="keyword">goto</span> done</span><br><span class="line">    &#125;</span><br><span class="line">    ovf := b.overflow(t)</span><br><span class="line">    <span class="keyword">if</span> ovf == <span class="literal">nil</span> &#123;</span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">    &#125;</span><br><span class="line">    b = ovf</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 没有找到对应的key 分配新的空间</span></span><br><span class="line">    <span class="comment">// 扩容机制   触发条件:没有在扩容 并且 装填因子过大或溢出桶过多</span></span><br><span class="line">  <span class="keyword">if</span> !h.growing() &amp;&amp; (overLoadFactor(h.count+<span class="number">1</span>, h.B) || tooManyOverflowBuckets(h.noverflow, h.B)) &#123;</span><br><span class="line">    hashGrow(t, h) <span class="comment">// 只是进行扩容  并未进行迁移</span></span><br><span class="line">    <span class="keyword">goto</span> again <span class="comment">// Growing the table invalidates everything, so try again</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> inserti == <span class="literal">nil</span> &#123;</span><br><span class="line">    newb := h.newoverflow(t, b)</span><br><span class="line">    inserti = &amp;newb.tophash[<span class="number">0</span>]</span><br><span class="line">    insertk = add(unsafe.Pointer(newb), dataOffset)</span><br><span class="line">    elem = add(insertk, bucketCnt*<span class="keyword">uintptr</span>(t.keysize))</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> t.indirectkey() &#123;</span><br><span class="line">    kmem := newobject(t.key)</span><br><span class="line">    *(*unsafe.Pointer)(insertk) = kmem</span><br><span class="line">    insertk = kmem</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> t.indirectelem() &#123;</span><br><span class="line">    vmem := newobject(t.elem)</span><br><span class="line">    *(*unsafe.Pointer)(elem) = vmem</span><br><span class="line">  &#125;</span><br><span class="line">  typedmemmove(t.key, insertk, key)</span><br><span class="line">  *inserti = top</span><br><span class="line">  h.count++</span><br><span class="line"></span><br><span class="line">done:</span><br><span class="line">  <span class="keyword">if</span> h.flags&amp;hashWriting == <span class="number">0</span> &#123;</span><br><span class="line">    throw(<span class="string">&quot;concurrent map writes&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  h.flags &amp;^= hashWriting</span><br><span class="line">  <span class="keyword">if</span> t.indirectelem() &#123;</span><br><span class="line">    elem = *((*unsafe.Pointer)(elem))</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> elem</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意：</p>
<p>&emsp;&emsp;扩容并不是指对map容量的扩容，而是对hmap中buckets的扩容。即可能扩容后map的容量并不会改变。</p>
<p>&emsp;&emsp;扩容的过程不是一次性完成的，而是通过增量方式进行的。容量扩展由hashGrow函数完成，数据迁移有growWork函数完成。</p>
<p>扩容原因：</p>
<ul>
<li>翻倍扩容：当填充因子超多阈值时，发生翻倍扩容。特点时map容量翻倍。</li>
<li>等大小扩容：当溢出桶超多限定值时，发生等大小扩容。特点时扩容完成后，map容量不变。</li>
</ul>
<h2 id="map的遍历"><a href="#map的遍历" class="headerlink" title="map的遍历"></a>map的遍历</h2><p>&emsp;&emsp;map遍历的实现使用了map的迭代器，hiter，结构如下:</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> hiter <span class="keyword">struct</span> &#123;</span><br><span class="line">  key         unsafe.Pointer </span><br><span class="line">  elem        unsafe.Pointer </span><br><span class="line">  t           *maptype</span><br><span class="line">  h           *hmap</span><br><span class="line">  buckets     unsafe.Pointer <span class="comment">// bucket ptr at hash_iter initialization time</span></span><br><span class="line">  bptr        *bmap          <span class="comment">// current bucket</span></span><br><span class="line">  overflow    *[]*bmap       <span class="comment">// keeps overflow buckets of hmap.buckets alive</span></span><br><span class="line">  oldoverflow *[]*bmap       <span class="comment">// keeps overflow buckets of hmap.oldbuckets alive</span></span><br><span class="line">  startBucket <span class="keyword">uintptr</span>        <span class="comment">// bucket iteration started at</span></span><br><span class="line">  offset      <span class="keyword">uint8</span>          </span><br><span class="line">  wrapped     <span class="keyword">bool</span>          </span><br><span class="line">  B           <span class="keyword">uint8</span></span><br><span class="line">  i           <span class="keyword">uint8</span></span><br><span class="line">  bucket      <span class="keyword">uintptr</span></span><br><span class="line">  checkBucket <span class="keyword">uintptr</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用mapiterinit初始化迭代器</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">mapiterinit</span><span class="params">(t *maptype, h *hmap, it *hiter)</span></span> &#123;</span><br><span class="line">  <span class="keyword">if</span> raceenabled &amp;&amp; h != <span class="literal">nil</span> &#123;</span><br><span class="line">    callerpc := getcallerpc()</span><br><span class="line">    racereadpc(unsafe.Pointer(h), callerpc, funcPC(mapiterinit))</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> h == <span class="literal">nil</span> || h.count == <span class="number">0</span> &#123;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> unsafe.Sizeof(hiter&#123;&#125;)/sys.PtrSize != <span class="number">12</span> &#123;</span><br><span class="line">    throw(<span class="string">&quot;hash_iter size incorrect&quot;</span>) <span class="comment">// see cmd/compile/internal/gc/reflect.go</span></span><br><span class="line">  &#125;</span><br><span class="line">  it.t = t</span><br><span class="line">  it.h = h</span><br><span class="line"></span><br><span class="line">  it.B = h.B</span><br><span class="line">  it.buckets = h.buckets</span><br><span class="line">  <span class="keyword">if</span> t.bucket.ptrdata == <span class="number">0</span> &#123;</span><br><span class="line">    h.createOverflow()</span><br><span class="line">    it.overflow = h.extra.overflow</span><br><span class="line">    it.oldoverflow = h.extra.oldoverflow</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  r := <span class="keyword">uintptr</span>(fastrand())</span><br><span class="line">  <span class="keyword">if</span> h.B &gt; <span class="number">31</span>-bucketCntBits &#123;</span><br><span class="line">    r += <span class="keyword">uintptr</span>(fastrand()) &lt;&lt; <span class="number">31</span></span><br><span class="line">  &#125;</span><br><span class="line">  it.startBucket = r &amp; bucketMask(h.B)</span><br><span class="line">  it.offset = <span class="keyword">uint8</span>(r &gt;&gt; h.B &amp; (bucketCnt - <span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">  it.bucket = it.startBucket</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> old := h.flags; old&amp;(iterator|oldIterator) != iterator|oldIterator &#123;</span><br><span class="line">    atomic.Or8(&amp;h.flags, iterator|oldIterator)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  mapiternext(it)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用mapiternext进行迭代操作</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">mapiternext</span><span class="params">(it *hiter)</span></span> &#123;</span><br><span class="line">  h := it.h</span><br><span class="line">  <span class="keyword">if</span> raceenabled &#123;</span><br><span class="line">    callerpc := getcallerpc()</span><br><span class="line">    racereadpc(unsafe.Pointer(h), callerpc, funcPC(mapiternext))</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> h.flags&amp;hashWriting != <span class="number">0</span> &#123;</span><br><span class="line">    throw(<span class="string">&quot;concurrent map iteration and map write&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  t := it.t</span><br><span class="line">  bucket := it.bucket</span><br><span class="line">  b := it.bptr</span><br><span class="line">  i := it.i</span><br><span class="line">  checkBucket := it.checkBucket</span><br><span class="line"></span><br><span class="line">next:</span><br><span class="line">  <span class="keyword">if</span> b == <span class="literal">nil</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> bucket == it.startBucket &amp;&amp; it.wrapped &#123;</span><br><span class="line">      it.key = <span class="literal">nil</span></span><br><span class="line">      it.elem = <span class="literal">nil</span></span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> h.growing() &amp;&amp; it.B == h.B &#123;</span><br><span class="line">      oldbucket := bucket &amp; it.h.oldbucketmask()</span><br><span class="line">      b = (*bmap)(add(h.oldbuckets, oldbucket*<span class="keyword">uintptr</span>(t.bucketsize)))</span><br><span class="line">      <span class="keyword">if</span> !evacuated(b) &#123;</span><br><span class="line">        checkBucket = bucket</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        b = (*bmap)(add(it.buckets, bucket*<span class="keyword">uintptr</span>(t.bucketsize)))</span><br><span class="line">        checkBucket = noCheck</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      b = (*bmap)(add(it.buckets, bucket*<span class="keyword">uintptr</span>(t.bucketsize)))</span><br><span class="line">      checkBucket = noCheck</span><br><span class="line">    &#125;</span><br><span class="line">    bucket++</span><br><span class="line">    <span class="keyword">if</span> bucket == bucketShift(it.B) &#123;</span><br><span class="line">      bucket = <span class="number">0</span></span><br><span class="line">      it.wrapped = <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> ; i &lt; bucketCnt; i++ &#123;</span><br><span class="line">    offi := (i + it.offset) &amp; (bucketCnt - <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">if</span> isEmpty(b.tophash[offi]) || b.tophash[offi] == evacuatedEmpty &#123;</span><br><span class="line">      <span class="keyword">continue</span></span><br><span class="line">    &#125;</span><br><span class="line">    k := add(unsafe.Pointer(b), dataOffset+<span class="keyword">uintptr</span>(offi)*<span class="keyword">uintptr</span>(t.keysize))</span><br><span class="line">    <span class="keyword">if</span> t.indirectkey() &#123;</span><br><span class="line">      k = *((*unsafe.Pointer)(k))</span><br><span class="line">    &#125;</span><br><span class="line">    e := add(unsafe.Pointer(b), dataOffset+bucketCnt*<span class="keyword">uintptr</span>(t.keysize)+<span class="keyword">uintptr</span>(offi)*<span class="keyword">uintptr</span>(t.elemsize))</span><br><span class="line">    <span class="keyword">if</span> checkBucket != noCheck &amp;&amp; !h.sameSizeGrow() &#123;</span><br><span class="line">      <span class="keyword">if</span> t.reflexivekey() || t.key.equal(k, k) &#123;</span><br><span class="line">        hash := t.hasher(k, <span class="keyword">uintptr</span>(h.hash0))</span><br><span class="line">        <span class="keyword">if</span> hash&amp;bucketMask(it.B) != checkBucket &#123;</span><br><span class="line">          <span class="keyword">continue</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> checkBucket&gt;&gt;(it.B<span class="number">-1</span>) != <span class="keyword">uintptr</span>(b.tophash[offi]&amp;<span class="number">1</span>) &#123;</span><br><span class="line">          <span class="keyword">continue</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (b.tophash[offi] != evacuatedX &amp;&amp; b.tophash[offi] != evacuatedY) ||</span><br><span class="line">      !(t.reflexivekey() || t.key.equal(k, k)) &#123;</span><br><span class="line">      it.key = k</span><br><span class="line">      <span class="keyword">if</span> t.indirectelem() &#123;</span><br><span class="line">        e = *((*unsafe.Pointer)(e))</span><br><span class="line">      &#125;</span><br><span class="line">      it.elem = e</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      rk, re := mapaccessK(t, h, k)</span><br><span class="line">      <span class="keyword">if</span> rk == <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">continue</span> <span class="comment">// key has been deleted</span></span><br><span class="line">      &#125;</span><br><span class="line">      it.key = rk</span><br><span class="line">      it.elem = re</span><br><span class="line">    &#125;</span><br><span class="line">    it.bucket = bucket</span><br><span class="line">    <span class="keyword">if</span> it.bptr != b &#123; <span class="comment">// avoid unnecessary write barrier; see issue 14921</span></span><br><span class="line">      it.bptr = b</span><br><span class="line">    &#125;</span><br><span class="line">    it.i = i + <span class="number">1</span></span><br><span class="line">    it.checkBucket = checkBucket</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">  b = b.overflow(t)</span><br><span class="line">  i = <span class="number">0</span></span><br><span class="line">  <span class="keyword">goto</span> next</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="删除键值对"><a href="#删除键值对" class="headerlink" title="删除键值对"></a>删除键值对</h2><p>&emsp;&emsp;键值对的删除使用的是mapdelete函数。源码如下。主要进行了查找键值对、删除键键值对的操作。查找操作和前面一样。删除操作包括清空key val topHash，count-1等</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">mapdelete</span><span class="params">(t *maptype, h *hmap, key unsafe.Pointer)</span></span> &#123;</span><br><span class="line">  <span class="keyword">if</span> raceenabled &amp;&amp; h != <span class="literal">nil</span> &#123;</span><br><span class="line">    callerpc := getcallerpc()</span><br><span class="line">    pc := funcPC(mapdelete)</span><br><span class="line">    racewritepc(unsafe.Pointer(h), callerpc, pc)</span><br><span class="line">    raceReadObjectPC(t.key, key, callerpc, pc)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> msanenabled &amp;&amp; h != <span class="literal">nil</span> &#123;</span><br><span class="line">    msanread(key, t.key.size)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> h == <span class="literal">nil</span> || h.count == <span class="number">0</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> t.hashMightPanic() &#123;</span><br><span class="line">      t.hasher(key, <span class="number">0</span>) <span class="comment">// see issue 23734</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> h.flags&amp;hashWriting != <span class="number">0</span> &#123;</span><br><span class="line">    throw(<span class="string">&quot;concurrent map writes&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  hash := t.hasher(key, <span class="keyword">uintptr</span>(h.hash0))</span><br><span class="line"></span><br><span class="line">  h.flags ^= hashWriting</span><br><span class="line"></span><br><span class="line">  bucket := hash &amp; bucketMask(h.B)</span><br><span class="line">  <span class="keyword">if</span> h.growing() &#123;</span><br><span class="line">    growWork(t, h, bucket)</span><br><span class="line">  &#125;</span><br><span class="line">  b := (*bmap)(add(h.buckets, bucket*<span class="keyword">uintptr</span>(t.bucketsize)))</span><br><span class="line">  bOrig := b</span><br><span class="line">  top := tophash(hash)</span><br><span class="line">search:</span><br><span class="line">  <span class="keyword">for</span> ; b != <span class="literal">nil</span>; b = b.overflow(t) &#123;</span><br><span class="line">    <span class="keyword">for</span> i := <span class="keyword">uintptr</span>(<span class="number">0</span>); i &lt; bucketCnt; i++ &#123;</span><br><span class="line">      <span class="keyword">if</span> b.tophash[i] != top &#123;</span><br><span class="line">        <span class="keyword">if</span> b.tophash[i] == emptyRest &#123;</span><br><span class="line">          <span class="keyword">break</span> search</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">      &#125;</span><br><span class="line">      k := add(unsafe.Pointer(b), dataOffset+i*<span class="keyword">uintptr</span>(t.keysize))</span><br><span class="line">      k2 := k</span><br><span class="line">      <span class="keyword">if</span> t.indirectkey() &#123;</span><br><span class="line">        k2 = *((*unsafe.Pointer)(k2))</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> !t.key.equal(key, k2) &#123;</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// Only clear key if there are pointers in it.</span></span><br><span class="line">      <span class="keyword">if</span> t.indirectkey() &#123;</span><br><span class="line">        *(*unsafe.Pointer)(k) = <span class="literal">nil</span></span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> t.key.ptrdata != <span class="number">0</span> &#123;</span><br><span class="line">        memclrHasPointers(k, t.key.size)</span><br><span class="line">      &#125;</span><br><span class="line">      e := add(unsafe.Pointer(b), dataOffset+bucketCnt*<span class="keyword">uintptr</span>(t.keysize)+i*<span class="keyword">uintptr</span>(t.elemsize))</span><br><span class="line">      <span class="keyword">if</span> t.indirectelem() &#123;</span><br><span class="line">        *(*unsafe.Pointer)(e) = <span class="literal">nil</span></span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> t.elem.ptrdata != <span class="number">0</span> &#123;</span><br><span class="line">        memclrHasPointers(e, t.elem.size)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        memclrNoHeapPointers(e, t.elem.size)</span><br><span class="line">      &#125;</span><br><span class="line">      b.tophash[i] = emptyOne</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> i == bucketCnt<span class="number">-1</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> b.overflow(t) != <span class="literal">nil</span> &amp;&amp; b.overflow(t).tophash[<span class="number">0</span>] != emptyRest &#123;</span><br><span class="line">          <span class="keyword">goto</span> notLast</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> b.tophash[i+<span class="number">1</span>] != emptyRest &#123;</span><br><span class="line">          <span class="keyword">goto</span> notLast</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">for</span> &#123;</span><br><span class="line">        b.tophash[i] = emptyRest</span><br><span class="line">        <span class="keyword">if</span> i == <span class="number">0</span> &#123;</span><br><span class="line">          <span class="keyword">if</span> b == bOrig &#123;</span><br><span class="line">            <span class="keyword">break</span> <span class="comment">// beginning of initial bucket, we&#x27;re done.</span></span><br><span class="line">          &#125;</span><br><span class="line">          c := b</span><br><span class="line">          <span class="keyword">for</span> b = bOrig; b.overflow(t) != c; b = b.overflow(t) &#123;</span><br><span class="line">          &#125;</span><br><span class="line">          i = bucketCnt - <span class="number">1</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          i--</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> b.tophash[i] != emptyOne &#123;</span><br><span class="line">          <span class="keyword">break</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    notLast:</span><br><span class="line">      h.count--</span><br><span class="line">      <span class="keyword">if</span> h.count == <span class="number">0</span> &#123;</span><br><span class="line">        h.hash0 = fastrand()</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">break</span> search</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> h.flags&amp;hashWriting == <span class="number">0</span> &#123;</span><br><span class="line">    throw(<span class="string">&quot;concurrent map writes&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  h.flags &amp;^= hashWriting</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p>map的用法到map底层实现分析</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NoZW54dW5fMjAxMC9hcnRpY2xlL2RldGFpbHMvMTAzNzY4MDEx" title="https://blog.csdn.net/chenxun_2010/article/details/103768011">https://blog.csdn.net/chenxun_2010/article/details/103768011<i class="fa fa-external-link"></i></span></p>
<p>Java map和golang map的一些点</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9sb3V5dXRpbmcuYmxvZy5jc2RuLm5ldC9hcnRpY2xlL2RldGFpbHMvMTA0MjM4NDE4" title="https://louyuting.blog.csdn.net/article/details/104238418">https://louyuting.blog.csdn.net/article/details/104238418<i class="fa fa-external-link"></i></span></p>
<p>深度解密Go语言之map</p>
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vcWNyYW8tMjAxOC9hcmNoaXZlLzIwMTkvMDUvMjIvMTA5MDM4MDcuaHRtbA==" title="https://www.cnblogs.com/qcrao-2018/archive/2019/05/22/10903807.html">https://www.cnblogs.com/qcrao-2018/archive/2019/05/22/10903807.html<i class="fa fa-external-link"></i></span></p>
]]></content>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>MySql深入学习</title>
    <url>/2021/03/19/MySql%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<p>MySQL 是一个关系型数据库管理系统，由瑞典 MySQL AB 公司开发，目前属于 Oracle 公司。MySQL 是一种关联数据库管理系统，关联数据库将数据保存在不同的表中，而不是将所有数据放在一个大仓库内，这样就增加了速度并提高了灵活性。</p>
<span id="more"></span>

<ul>
<li>MySQL 是开源的，目前隶属于 Oracle 旗下产品。</li>
<li>MySQL 支持大型的数据库。可以处理拥有上千万条记录的大型数据库。</li>
<li>MySQL 使用标准的 SQL 数据语言形式。</li>
<li>MySQL 可以运行于多个系统上，并且支持多种语言。这些编程语言包括 C、C++、Python、Java、Perl、PHP、Eiffel、Ruby 和 Tcl 等。</li>
<li>MySQL 对PHP有很好的支持，PHP 是目前最流行的 Web 开发语言。</li>
<li>MySQL 支持大型数据库，支持 5000 万条记录的数据仓库，32 位系统表文件最大可支持 4GB，64 位系统支持最大的表文件为8TB。</li>
<li>MySQL 是可以定制的，采用了 GPL 协议，你可以修改源码来开发自己的 MySQL 系统。</li>
</ul>
<p><strong>补充知识</strong></p>
<ul>
<li><p>关系型数据库：mysql oracale sqlite postgresql</p>
</li>
<li><p>数据库标准：sql标准，不同数据库对sql ISO标准执行略有差异  mysql没有全连接</p>
</li>
</ul>
<ul>
<li><p>数据库系统:  一个系统多个库  一个库多张表  一张表多条记录</p>
</li>
<li><p>LAMP架构：mysql liux apache php </p>
<p>MySql 开源免费     postgresql 也开源，sql标准执行更严格</p>
</li>
</ul>
<p><strong>docker中的mysql</strong></p>
<ul>
<li>运行镜像</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker run -itd --name mysql-test -p 3306:3306 -e MYSQL_ROOT_PASSWORD&#x3D;123456 mysql</span><br></pre></td></tr></table></figure>

<ul>
<li>进入运行中的镜像</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker exec -it mysql-test &#x2F;bin&#x2F;bash</span><br></pre></td></tr></table></figure>

<h1 id="日常操作"><a href="#日常操作" class="headerlink" title="日常操作"></a>日常操作</h1><h2 id="数据库库相关"><a href="#数据库库相关" class="headerlink" title="数据库库相关"></a>数据库库相关</h2><ul>
<li><h3 id="查看库"><a href="#查看库" class="headerlink" title="查看库"></a>查看库</h3></li>
</ul>
<p><code>show databases;</code></p>
<ul>
<li><h3 id="选库"><a href="#选库" class="headerlink" title="选库"></a>选库</h3></li>
</ul>
<p><code>use [dbname]</code></p>
<ul>
<li><h3 id="查看表"><a href="#查看表" class="headerlink" title="查看表"></a>查看表</h3></li>
</ul>
<p><code>show tables;</code></p>
<ul>
<li><h3 id="建库"><a href="#建库" class="headerlink" title="建库"></a>建库</h3></li>
</ul>
<p><code>create database [dbname] [charset utf8]</code></p>
<ul>
<li><h3 id="删库"><a href="#删库" class="headerlink" title="删库"></a>删库</h3></li>
</ul>
<p><code>drop database [dbname]</code></p>
<ul>
<li><h3 id="改名"><a href="#改名" class="headerlink" title="改名"></a>改名</h3></li>
</ul>
<p>mysql中不能支持改名，使用创建-&gt;复制-&gt;删除代替</p>
<h2 id="表相关"><a href="#表相关" class="headerlink" title="表相关"></a>表相关</h2><ul>
<li><h3 id="建表"><a href="#建表" class="headerlink" title="建表"></a>建表</h3></li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> stu( </span><br><span class="line">    Snum <span class="type">int</span>, </span><br><span class="line">    Sname <span class="type">varchar</span>(<span class="number">10</span>) </span><br><span class="line">)engine myisam charset utf8;</span><br></pre></td></tr></table></figure>

<p>engine：表引擎  和 性能有关系</p>
<ul>
<li><h3 id="改表名"><a href="#改表名" class="headerlink" title="改表名"></a>改表名</h3></li>
</ul>
<p><code>rename table stu to newstu</code></p>
<ul>
<li><h3 id="清空表"><a href="#清空表" class="headerlink" title="清空表"></a>清空表</h3></li>
</ul>
<p><code>truncate [tablename]</code></p>
<p>truncate 和 delete有区别</p>
<p>truncate删表后重建空表 速度更快。</p>
<p>delete是从记录层面删除，自增记录还在。</p>
<ul>
<li><h3 id="选择字符集"><a href="#选择字符集" class="headerlink" title="选择字符集"></a>选择字符集</h3></li>
</ul>
<p><code>set name gbk;</code></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> class (</span><br><span class="line">  id <span class="type">int</span> <span class="keyword">primary</span> key auto_increment,</span><br><span class="line">  sname <span class="type">varchar</span>(<span class="number">10</span>) <span class="keyword">not</span> <span class="keyword">null</span> <span class="keyword">default</span> <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  gender <span class="type">char</span>(<span class="number">1</span>) <span class="keyword">not</span> <span class="keyword">null</span> <span class="keyword">default</span> <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  company <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">not</span> <span class="keyword">null</span> <span class="keyword">default</span> <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  salary <span class="type">decimal</span>(<span class="number">6</span>,<span class="number">2</span>) <span class="keyword">not</span> <span class="keyword">null</span> <span class="keyword">default</span> <span class="number">0.00</span>,</span><br><span class="line">  fanbu <span class="type">smallint</span> <span class="keyword">not</span> <span class="keyword">null</span> <span class="keyword">default</span> <span class="number">0</span></span><br><span class="line">) engine myisam charset utf8;</span><br></pre></td></tr></table></figure>

<ul>
<li><h3 id="查看表结构"><a href="#查看表结构" class="headerlink" title="查看表结构"></a>查看表结构</h3></li>
</ul>
<p><code>desc [tablename]</code>  </p>
<h2 id="记录相关"><a href="#记录相关" class="headerlink" title="记录相关"></a>记录相关</h2><ul>
<li><h3 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h3></li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">insert into class (id, sname, gender, company, salary, fanbu) values(1, &#39;张三&#39;, &#39;男&#39;, &#39;百度&#39;, 8888.67, 234);</span><br></pre></td></tr></table></figure>

<p>​        如果插入所有列，可不知名待插入列。</p>
<p>​    一次插入多条数据</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">insert into class(sname, company, salary) values(</span><br><span class="line">&#39;liubei&#39;, &#39;royaler&#39;, 15.28),(</span><br><span class="line">&#39;sunce&#39;, &#39;jiangdong&#39;, 56.34),(</span><br><span class="line">&#39;caocao&#39;, &#39;huanguanhouyi&#39;, 88.56);</span><br></pre></td></tr></table></figure>

<ul>
<li><h3 id="改"><a href="#改" class="headerlink" title="改"></a>改</h3><p>update</p>
</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">update class <span class="keyword">set</span> gender<span class="operator">=</span>&quot;F&quot;, company<span class="operator">=</span>&quot;qiandu&quot; <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">4</span>;</span><br></pre></td></tr></table></figure>

<ul>
<li><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3></li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">delete from class where salary&gt;8888;</span><br><span class="line">delete from class;&#x2F;&#x2F; 删除所有数据</span><br></pre></td></tr></table></figure>

<ul>
<li><h3 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h3></li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select salary, company from class where id &#x3D; 3 or id &#x3D; 5;</span><br></pre></td></tr></table></figure>

<h2 id="小技巧"><a href="#小技巧" class="headerlink" title="小技巧"></a>小技巧</h2><ul>
<li><p>在MySql命令行中使用<code>\c</code>可以重新输入</p>
</li>
<li><p>使用<code>show create table</code> 可以查看建表脚本</p>
</li>
<li><p>可以使用查询语句导入表，保持格式一致即可</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> products_clone(列名...) <span class="keyword">select</span> 列名... <span class="keyword">from</span> products; </span><br></pre></td></tr></table></figure></li>
<li><p>统计重复数据</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT COUNT(*) as repetitions, last_name, first_name</span><br><span class="line">    -&gt; FROM person_tbl</span><br><span class="line">    -&gt; GROUP BY last_name, first_name</span><br><span class="line">    -&gt; HAVING repetitions &gt; 1;</span><br></pre></td></tr></table></figure></li>
<li><p>查询非重复数据  结合查询语句导入表就可方便的实现去重</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> last_name, first_nameFROM person_tbl;</span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="MySql进阶"><a href="#MySql进阶" class="headerlink" title="MySql进阶"></a>MySql进阶</h1><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><p>​    MySql三大列类型</p>
<h4 id="数值型"><a href="#数值型" class="headerlink" title="数值型"></a>数值型</h4><p>​    整形</p>
<p>​      参数:(M)补零宽度                     unsigned 无符号         zerofill:零填充，必须和zerofill配合 自带unsigned</p>
<ul>
<li><p>Tinyint:                1byte </p>
</li>
<li><p>Smallint:             2byte</p>
</li>
<li><p>Mediuint             3byte</p>
</li>
<li><p>Int                         4byte</p>
</li>
<li><p>Bigint                    8byte</p>
</li>
</ul>
<p>​    小数（定型/浮点型）</p>
<ul>
<li>Float(M,D)   浮点       M精度  总位数 D标度 小数位数  M&lt;=24 4byte      8byte  float 可能会损失精度</li>
<li>decimal(M,D)  定点  比float精确  变长类型  敏感数据用</li>
</ul>
<h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><ul>
<li><strong>char</strong>   char(6)定长字符串  查询效率更高（可以计算地址） 浪费空间 用空格在末尾补齐,去除时候删掉，末尾空格会丢失。 （M）0-255</li>
<li><strong>vchar</strong>  列内容前有1-2字节标记长度  灵活 (M) 0-65535   M都代表字符</li>
<li>text：大文本   搜索较慢  一般论坛文章  LONGTEXT   声明时候不必给默认值。</li>
<li>blob：二进制类型  存储图像音频等二进制信息  意义防止因为字符集问题导致信息丢失。</li>
</ul>
<p><code>concat</code>连接字符串</p>
<h3 id="日期时间类型"><a href="#日期时间类型" class="headerlink" title="日期时间类型"></a>日期时间类型</h3><ul>
<li>date 默认值为0000-00-00可能出现invalid， 由于配置中NO_ZERO_IN_DATE, NO_ZERO_DATE; 3byte</li>
<li>time  00:00:00 3byte</li>
<li>datetime 0000-00-00 00:00:00   8byte</li>
<li>timestamp 4byte   default CURRENT_TIMESTAMP 不填入，会自动生成默认值</li>
<li>year 1byte  1901~2155</li>
</ul>
<h1 id="建表案例分析"><a href="#建表案例分析" class="headerlink" title="建表案例分析"></a>建表案例分析</h1><table>
<thead>
<tr>
<th>列名</th>
<th>列类型</th>
<th>默认值</th>
<th>是否为主键</th>
</tr>
</thead>
<tbody><tr>
<td>Id</td>
<td>Int unsigned</td>
<td></td>
<td>PRI</td>
</tr>
<tr>
<td>UserName</td>
<td>Vchar(20)</td>
<td>“”</td>
<td></td>
</tr>
<tr>
<td>Gender</td>
<td>Char(1)/tinyint</td>
<td>“”</td>
<td></td>
</tr>
<tr>
<td>Weight</td>
<td>Tinyint unsigned</td>
<td>0.00</td>
<td></td>
</tr>
<tr>
<td>Birth</td>
<td>Date</td>
<td>0001-01-01</td>
<td></td>
</tr>
<tr>
<td>Salary</td>
<td>Decimal(8,2)</td>
<td>0.00</td>
<td></td>
</tr>
<tr>
<td>Lastlogin</td>
<td>Datetime</td>
<td></td>
<td></td>
</tr>
<tr>
<td>Intro</td>
<td>Vchar</td>
<td>“”</td>
<td></td>
</tr>
</tbody></table>
<p>优化表</p>
<p>这张表中除了UserName和Intro列外每一列都为定长，不妨让所有列都定长，可以极大提高查询效率。</p>
<table>
<thead>
<tr>
<th>列名</th>
<th>列类型</th>
<th>默认值</th>
<th>是否为主键</th>
</tr>
</thead>
<tbody><tr>
<td>Id</td>
<td>Int unsigned</td>
<td></td>
<td>PRI</td>
</tr>
<tr>
<td>UserName</td>
<td>Char(20)</td>
<td>“”</td>
<td></td>
</tr>
<tr>
<td>Gender</td>
<td>Char(1)/tinyint</td>
<td></td>
<td></td>
</tr>
<tr>
<td>Weight</td>
<td>Tinyint unsigned</td>
<td></td>
<td></td>
</tr>
<tr>
<td>Birth</td>
<td>Date</td>
<td></td>
<td></td>
</tr>
<tr>
<td>Salary</td>
<td>Decimal(8,2)</td>
<td></td>
<td></td>
</tr>
<tr>
<td>Lastlogin</td>
<td>Int unsigned</td>
<td></td>
<td></td>
</tr>
</tbody></table>
<p>UserName Char(20)会造成存储空间上的浪费，但可以提高查询效率。</p>
<p>但是Intro Char(1500)不行，浪费空间过多。Intro不常修改，可以分离出来。</p>
<table>
<thead>
<tr>
<th>列名</th>
<th>列类型</th>
<th>默认值</th>
<th>是否为主键</th>
</tr>
</thead>
<tbody><tr>
<td>Id</td>
<td>Int unsigned</td>
<td></td>
<td>PRI</td>
</tr>
<tr>
<td>Intro</td>
<td>Vchar</td>
<td></td>
<td></td>
</tr>
</tbody></table>
<p><em>在开发过程中，比较频繁使用的信息往往优先考虑效率，存储在一张表中。</em></p>
<p><em>不常用的信息和比较占空间的信息，优先考虑空间占用，存储到副表</em>。</p>
<p>建表语法</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> 表名(</span><br><span class="line">列<span class="number">1</span>名 列<span class="number">1</span>类型 列<span class="number">1</span>参数...,</span><br><span class="line">列<span class="number">2</span>名 列<span class="number">2</span>类型 列<span class="number">2</span>参数...,</span><br><span class="line">列<span class="number">3</span>名 列<span class="number">3</span>类型 列<span class="number">3</span>参数...,</span><br><span class="line">...</span><br><span class="line">)engine myisam<span class="operator">/</span>innodb<span class="operator">/</span>bdb charset utf8<span class="operator">/</span>gbk<span class="operator">/</span>latin;</span><br></pre></td></tr></table></figure>



<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">member</span>(</span><br><span class="line">id <span class="type">int</span> unsigned auto_increment <span class="keyword">primary</span> key,</span><br><span class="line">username <span class="type">char</span>(<span class="number">20</span>) <span class="keyword">not</span> <span class="keyword">null</span> <span class="keyword">default</span> <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">gender <span class="type">char</span>(<span class="number">1</span>) <span class="keyword">not</span> <span class="keyword">null</span> <span class="keyword">default</span> <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">weight tinyint unsigned <span class="keyword">not</span> <span class="keyword">null</span> <span class="keyword">default</span> <span class="number">0</span>,</span><br><span class="line">birth <span class="type">date</span> <span class="keyword">not</span> <span class="keyword">null</span> <span class="keyword">default</span> <span class="string">&#x27;0001-01-01&#x27;</span>,</span><br><span class="line">salary <span class="type">decimal</span>(<span class="number">8</span>,<span class="number">2</span>) <span class="keyword">not</span> <span class="keyword">null</span> <span class="keyword">default</span> <span class="number">0.00</span>,</span><br><span class="line">lastlogin <span class="type">int</span> unsigned <span class="keyword">not</span> <span class="keyword">null</span> <span class="keyword">default</span> <span class="number">0</span></span><br><span class="line">) engine myisam charset utf8;</span><br></pre></td></tr></table></figure>



<h1 id="改表-列"><a href="#改表-列" class="headerlink" title="改表-列"></a>改表-列</h1><h3 id="增加列"><a href="#增加列" class="headerlink" title="增加列"></a>增加列</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">add</span> 列名  列类型 列参数 </span><br></pre></td></tr></table></figure>

<p>新加的列在表的最后</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">add</span> 列名 列类型 列参数 after 指定列名</span><br></pre></td></tr></table></figure>

<p>新列在指定的列名后</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">add</span> 列名 列类型 列参数 <span class="keyword">first</span></span><br></pre></td></tr></table></figure>

<p>新列放在第一列</p>
<h3 id="删除列"><a href="#删除列" class="headerlink" title="删除列"></a>删除列</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">drop</span> 列名</span><br></pre></td></tr></table></figure>

<h3 id="修改列类型"><a href="#修改列类型" class="headerlink" title="修改列类型"></a>修改列类型</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 modify 列名 新列类型 新列参数</span><br></pre></td></tr></table></figure>

<h3 id="修改列名及列类"><a href="#修改列名及列类" class="headerlink" title="修改列名及列类"></a>修改列名及列类</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 change 列名 新列名 新类型 新参数</span><br></pre></td></tr></table></figure>

<p>主键不会丢失</p>
<p>数据类型不匹配可能早成数据丢失，在strict_mode下不允许执行。</p>
<h1 id="MySql数据库–深入学习"><a href="#MySql数据库–深入学习" class="headerlink" title="MySql数据库–深入学习"></a>MySql数据库–深入学习</h1><h2 id="高级查询"><a href="#高级查询" class="headerlink" title="高级查询"></a>高级查询</h2><h3 id="where"><a href="#where" class="headerlink" title="where"></a>where</h3><p>获取是的表达式为真的record</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> 表名 <span class="keyword">where</span> 条件</span><br></pre></td></tr></table></figure>

<p><strong><code>not in</code> 效率低</strong></p>
<p><code>&gt; &lt; = &lt;&gt;</code> 大于 小于 等于 不等于</p>
<p><code>and or not</code>与 或 非 <code>&amp;&amp; || ！</code>  and的优先级大于or</p>
<p><code>between and</code> 在 ~到 ~之间</p>
<p><code>in</code> 在集合中</p>
<p><code>like</code> 正则表达是   <code>_</code>任意一个字符  <code>%</code>代表任意字符串</p>
<p><strong>对于结果中的列进行赛选必须用</strong> <code>having</code></p>
<p><code>select goods_id, goodes_name, (market_price - shop_price) as discount from goods where discount &gt;200</code><strong>会报错</strong></p>
<p>一些函数补充    结合分组使用更佳</p>
<ul>
<li><p>max</p>
</li>
<li><p>min</p>
</li>
<li><p>avg</p>
</li>
<li><p>count  count(1) /count(*):数行数      count(列名):数非null行数</p>
<p>对于myisam 数据库count(1) count(*)没有区别，内部有一个计数器在维护。</p>
<p>对于innodb，用count(*)直接数行数，效率低。</p>
</li>
</ul>
<h3 id="group-by"><a href="#group-by" class="headerlink" title="group by"></a>group by</h3><p>分组查询过</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> cat_id, <span class="built_in">sum</span>(goods_number) <span class="keyword">from</span> goods <span class="keyword">group</span> <span class="keyword">by</span> cat_id</span><br></pre></td></tr></table></figure>

<p>select的列需要在group by 里出现。</p>
<h3 id="having"><a href="#having" class="headerlink" title="having"></a>having</h3><p>投影计算后再经过where赛选输出</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> goods_id, market_price, shop_price, (market_price <span class="operator">-</span> shop_price) <span class="keyword">as</span> discount <span class="keyword">from</span> goods <span class="keyword">where</span> <span class="number">1</span> <span class="keyword">having</span> discount <span class="operator">&gt;</span> <span class="number">200</span>;</span><br></pre></td></tr></table></figure>

<p>逻辑删除，回收站机制(is_delete)</p>
<h3 id="order-by"><a href="#order-by" class="headerlink" title="order by"></a>order by</h3><p>针对结果集排序</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> goods_id, goods_name, goods_price <span class="keyword">from</span> goods <span class="keyword">where</span> cat_id <span class="operator">=</span> <span class="number">4</span> <span class="keyword">order</span> <span class="keyword">by</span> shop_price <span class="keyword">desc</span>, goods_id <span class="keyword">asc</span>;</span><br></pre></td></tr></table></figure>

<p>asc升序  desc 降序</p>
<h3 id="limit-offset-N"><a href="#limit-offset-N" class="headerlink" title="limit [offset] N"></a>limit [offset] N</h3><p>取出结果集中的条目， offset 偏移量， N取几个  </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> goods_id, goods_name, shop_price <span class="keyword">from</span> goods <span class="keyword">where</span> cat_id <span class="operator">=</span> <span class="number">3</span> <span class="keyword">order</span> <span class="keyword">by</span> goods_price <span class="keyword">desc</span> limit <span class="number">10</span>;</span><br></pre></td></tr></table></figure>

<p>注意五种子句的顺序</p>
<h3 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h3><p><code>in</code> 型，将结果数据集合作为查询条件，如果返回一张表必须用别名。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> goods_id, goods_name, goods_price <span class="keyword">from</span> goods <span class="keyword">where</span> goods_id <span class="keyword">in</span> (<span class="keyword">select</span> masx(goods_id) <span class="keyword">from</span> goods <span class="keyword">group</span> <span class="keyword">by</span> cat_id);</span><br></pre></td></tr></table></figure>

<p>使用<code>in</code>时候内层查询必须为单列</p>
<p><code>from</code>型， 将结束数据集合作为查询的对象</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> (<span class="keyword">select</span> goods_id, cat_id, goods_name <span class="keyword">from</span> goods <span class="keyword">order</span> <span class="keyword">by</span> cat_id <span class="keyword">asc</span>, goods_id <span class="keyword">desc</span>) <span class="keyword">as</span> tmp <span class="keyword">group</span> <span class="keyword">by</span> goods_id;</span><br></pre></td></tr></table></figure>



<p><code>exists</code>型，把外层sql结果数据集作为内层的判断条件的数据集</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> caat_id, cat_name <span class="keyword">from</span> category <span class="keyword">where</span> <span class="keyword">exists</span> (<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> goods <span class="keyword">where</span> goods.cat_id <span class="operator">=</span> category.cat_id);</span><br></pre></td></tr></table></figure>

<p>​    <strong>null 不好比较</strong>   null = null 结果为null, null != null 结果也为null。比较时要用 is null   ， is not null。</p>
<p>查询时效率不高。故建表时建议使用not null，default</p>
<h3 id="联表查询"><a href="#联表查询" class="headerlink" title="联表查询"></a>联表查询</h3><ul>
<li><p>笛卡尔积 全相乘</p>
<p>表test10 test11 相乘</p>
</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> test10.sname, test11.cat_id <span class="keyword">from</span> test10, test11;</span><br></pre></td></tr></table></figure>



<p>错误案例：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> goods_id, minigoods.cat_id, goods_name, category.cat_id, cat_name <span class="keyword">from</span> minigoods, category <span class="keyword">where</span> goods.cat_id <span class="operator">=</span> category.cat_id;</span><br></pre></td></tr></table></figure>

<p> 乘积加判断   数据量大，全相乘后产生的临时表不含索引，不能发挥索引的作用。</p>
<p>联表 <code>A join B on condition</code> 可以发挥索引的效果</p>
<ul>
<li>左联接 会保留左表所有record  NULL填充添加的列</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> goods_id, minigoods.cat_id, goods_name, category.cat_id, cat_name <span class="keyword">from</span> minigoos <span class="keyword">left</span> <span class="keyword">join</span> category <span class="keyword">on</span> minigoods.cat_id <span class="operator">=</span> category.cat_id;</span><br></pre></td></tr></table></figure>

<p><code>A left join B on condition1 left join on condition2</code></p>
<ul>
<li>右联接 类比左连接即可  可以相互替代</li>
</ul>
<p>右链接可以用左连接替代，一致性考虑只用左连接</p>
<ul>
<li>内联接  缺少项的过滤掉</li>
</ul>
<p>左右内连接的区别</p>
<ul>
<li><p>外联接 缺少项保留</p>
<p>mysql中不支持  </p>
</li>
<li><p>使用union合并结果集</p>
<p>拼接结果集合  结合<code>as</code> 取别名，可以取消列名的区别。   不使用别名可以自适应，但是要注意字段数量要相等。</p>
<p><code>A union B order by</code> </p>
<p>合并后可以再进行排序。</p>
<p>mysql可能会优化掉内层排序：内层order by不会影响结果集的时候</p>
<p>union后的结果有重复，会默认去重，不想去重可以用union all</p>
</li>
</ul>
<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>​            应该用合理的表结构避免函数的使用。</p>
<p>​            如果对某列使用函数，将创建temp表，无法使用索引。这种情况尽量在业务层层使用函数。</p>
<h3 id="数学函数"><a href="#数学函数" class="headerlink" title="数学函数"></a>数学函数</h3><p>abs(x)                                      绝对值</p>
<p>bin(x)                                      返回x的二进制表示              hex</p>
<p>ceiling(x)                                 向上取整                             floor</p>
<p>exp(x)                                     自然数对数的x次方             ln(x)</p>
<p>greatest(x1, x2,…)                 取最大值                            least</p>
<p>rand(N)                                    随机数0-1之间的浮点数 可能等于一</p>
<p>mod(x,y)                                取余</p>
<p>pi()                                            Π的值</p>
<p>sign(x)                                    正弦</p>
<p>sqrt(x)                                    平方根</p>
<p>truncate(x,y)                        x截断y位小数</p>
<h3 id="聚合函数"><a href="#聚合函数" class="headerlink" title="聚合函数"></a>聚合函数</h3><p>avg</p>
<p>count</p>
<p>min</p>
<p>max</p>
<p>sum</p>
<p>grounp_contact(列名，分隔符)    分组拼接 逗号连接</p>
<h3 id="字符串函数"><a href="#字符串函数" class="headerlink" title="字符串函数"></a><strong>字符串函数</strong></h3><p>ascii(char)                        返回ascii码</p>
<p>bit_length(str)                 返回比特长度   char_length(str)字符数 length(str) 字节长度</p>
<p>concat(s1, s2)                 拼接字符串</p>
<p>reverse(str)                     按字符反转</p>
<p>trim(str)                            去掉空格  strim(str)</p>
<p>positon(substr in str)    返回子串第一次出现的位置 从1数</p>
<p>right(str, len)                    返回右侧len个字符 left</p>
<h3 id="日期和时间函数"><a href="#日期和时间函数" class="headerlink" title="日期和时间函数"></a><strong>日期和时间函数</strong></h3><p>curdate() current_date()  当前日期</p>
<p>curtime() current_time() 时间</p>
<p>now()                                日期+时间</p>
<p>dayofweek(date)                    一周中的第几天  dayofmonth(date)  </p>
<p>week(date)                        一年中的第几周    year(date)</p>
<h3 id="加密函数"><a href="#加密函数" class="headerlink" title="加密函数"></a>加密函数</h3><p>md5()                                不可逆  校验数据</p>
<p>​                            </p>
<p>​    <strong>控制流程函数</strong>  </p>
<p>case 值 when  condition then  值，…  else 值 end      多分支流程</p>
<p>if( expression, val1，val2 )  </p>
<p>ifnull( expression， value)    expression为null返回值，否则返回expression结果</p>
<h3 id="格式化函数"><a href="#格式化函数" class="headerlink" title="格式化函数"></a>格式化函数</h3><h3 id="类型转换函数"><a href="#类型转换函数" class="headerlink" title="类型转换函数"></a>类型转换函数</h3><h3 id="系统信息函数"><a href="#系统信息函数" class="headerlink" title="系统信息函数"></a><strong>系统信息函数</strong></h3><p>user()        返回当前用户及主机</p>
<p>getbase()   正在操作的库名</p>
<p>version()  获取MySql版本</p>
<h2 id="View视图"><a href="#View视图" class="headerlink" title="View视图"></a>View视图</h2><p>​        view可以看成一张虚拟的表，是表通过某种运算得出的投影。可以将经常用到的可能变化的数据结果集合作为View存储。表的变化会影响到视图。视图也可能影响到基表。</p>
<p>​    <strong>.frm表结果 .myd表数据 .myi索引文件</strong></p>
<p>​    简化查询</p>
<p>​        查询视图，避免冗长的sql语句</p>
<p>​    精细化权限控制</p>
<p>​        在合作时候开放视图权限。</p>
<p>​    多表联查的时候也可以使用</p>
<p>​        hash方式分表等</p>
<ul>
<li><p><strong>创建视图</strong></p>
<p>​    create view  [algorithm=arg]  视图名   as select。。。</p>
<p><strong>algorithm</strong>用于决定是否建立临时表。对于一些简单的视图，不会建立临时表，二十直接使用sql语句。建立临时表会增加查询消耗。</p>
<ul>
<li>mere参数  合并语句</li>
<li>temptable参数 临时表</li>
<li>undefined参数 由系统决定</li>
</ul>
</li>
<li><p><strong>删除视图</strong></p>
<p>​    drop view 视图名</p>
</li>
<li><p><strong>查询视图</strong></p>
<p>像表一样查询即可</p>
</li>
<li><p><strong>修改视图</strong></p>
<p>不能明确映射到原表的修改的修改是不能执行的。一一对应：能否反推。</p>
</li>
</ul>
<h2 id="临时表"><a href="#临时表" class="headerlink" title="临时表"></a>临时表</h2><p>​        MySQL 临时表在我们需要保存一些临时数据时是非常有用的。临时表只在当前连接可见，当关闭连接时，Mysql会自动删除表并释放所有空间。</p>
<ul>
<li>使用查询语句创建临时表</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> TEMPORARY <span class="keyword">TABLE</span> 临时表名 <span class="keyword">AS</span></span><br><span class="line">(</span><br><span class="line">    <span class="keyword">SELECT</span> <span class="operator">*</span>  <span class="keyword">FROM</span> 旧的表名</span><br><span class="line">    LIMIT <span class="number">0</span>,<span class="number">10000</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<ul>
<li>手动删除临时表</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> 临时表名;</span><br></pre></td></tr></table></figure>

<h2 id="字符集编码"><a href="#字符集编码" class="headerlink" title="字符集编码"></a>字符集编码</h2><p>​    <strong>ASCII</strong> 可以查看asccii码表</p>
<p>​    <strong>GB2312</strong> 2byte 不占用 0-127  收录6763个常用字</p>
<p>​    <strong>BGK</strong>   2byte     兼容GB2312  第二个字节不再局限于128-255</p>
<p>​    <strong>unicode</strong>  4byte 国际化 世界通用码表  常用的为前65536字节  不兼容ascii</p>
<p>​    <strong>utf-8</strong>     简化unicode编码  常用于网络  不定长1-6个字节  [英文  中文]  utf8+有bom头</p>
<p>​    <strong>ANSI</strong>：本地字符集(本地化)</p>
<p>​    数据库通过<strong>连接器</strong>实现字符集转换。<strong>连接器</strong>位于客户端和数据库存储器之间。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 客户端为编码为gbk</span><br><span class="line"><span class="keyword">set</span> character_set_client<span class="operator">=</span>gbk;</span><br><span class="line"></span><br><span class="line"># 连接器使用utf<span class="number">-8</span></span><br><span class="line"><span class="keyword">set</span> character_set_connection<span class="operator">=</span>utf8;</span><br><span class="line"></span><br><span class="line"># 返回值使用gbk编码</span><br><span class="line"><span class="keyword">set</span> character_set_results<span class="operator">=</span>gbk;</span><br><span class="line"></span><br><span class="line"># 简写</span><br><span class="line"><span class="keyword">set</span> names gbk</span><br></pre></td></tr></table></figure>



<h2 id="存储引擎"><a href="#存储引擎" class="headerlink" title="存储引擎"></a>存储引擎</h2><p>​            存储引擎决定了MySql存储数据的方式。</p>
<ul>
<li>Myisam 批量插入速度快，不检查数据。支持全文索引。仅支持表锁。</li>
<li>不支持事务安全。</li>
<li>InnoDb   事务安全性更高。支持到行的索引。支持事务安全。</li>
<li>BDB</li>
<li>Memory</li>
<li>Archive</li>
</ul>
<h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><p><strong>事务属性</strong>：</p>
<ul>
<li><p>原子性  </p>
<p>操作集在逻辑上不可分割。  事件回滚。</p>
</li>
<li><p>一致性 </p>
<p>操作前后值的变化逻辑上成立。  溢出会执行失败。</p>
</li>
<li><p>隔离性 </p>
<p>执行操作过程中，对被操作对象的别的操作会禁止。事务结束前，事务操作带来的结果别人无法看到。</p>
</li>
<li><p>持久性</p>
<p>事务一旦执行后，无法撤销。使用补偿性事务，处理发生的错误。</p>
</li>
</ul>
<p>​    <code>start transaction</code>         开始事务。</p>
<p>​    <code>commit</code>                                提交事务</p>
<p>​    <code>rollback</code>                            回滚</p>
<h2 id="触发器"><a href="#触发器" class="headerlink" title="触发器"></a>触发器</h2><p>触发器（trigger）：由事件来触发，例如当对一个表进行操作（ insert，delete， update）时就会激活它执行，是与表事件相关的特殊的存储过程。<br>    触发器经常用于加强数据的完整性约束和业务规则等。 触发器创建语法四要素：<br>    1.监视地点(table)<br>    2.监视事件(insert/update/delete)<br>    3.触发时间(after/before)<br>    4.触发事件(insert/update/delete)</p>
<p>语法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create trigger 触发器名 after&#x2F;before insert&#x2F;update&#x2F;delete on 表名  for each row for each row</span><br></pre></td></tr></table></figure>

<p>参考阅读：</p>
<p><span class="exturl" data-url="aHR0cDovL3d3dy5jbmJsb2dzLmNvbS96endsb3ZlZ2ZqL2FyY2hpdmUvMjAxMi8wNy8wNC8yNTc2OTg5Lmh0bWw=" title="http://www.cnblogs.com/zzwlovegfj/archive/2012/07/04/2576989.html">mysql之触发器trigger - 郑志伟<i class="fa fa-external-link"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2Mzk2MTA0L2FydGljbGUvZGV0YWlscy84MDQ2OTk5Ny8=" title="https://blog.csdn.net/qq_36396104/article/details/80469997/">一篇很棒的 MySQL 触发器学习教程<i class="fa fa-external-link"></i></span></p>
<h2 id="备份和恢复"><a href="#备份和恢复" class="headerlink" title="备份和恢复"></a>备份和恢复</h2><p><strong>使用 SELECT … INTO OUTFILE 语句导出数据</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 导出表到文件</span><br><span class="line">SELECT * FROM runoob_tbl INTO OUTFILE &#39;&#x2F;tmp&#x2F;runoob.txt&#39;;</span><br><span class="line"></span><br><span class="line"># 导出表到文件 使用逗号分隔  用&quot;包裹  \r\n最为换行标志</span><br><span class="line">mysql&gt; SELECT * FROM passwd INTO OUTFILE &#39;&#x2F;tmp&#x2F;runoob.txt&#39;</span><br><span class="line">    -&gt; FIELDS TERMINATED BY &#39;,&#39; ENCLOSED BY &#39;&quot;&#39;</span><br><span class="line">    -&gt; LINES TERMINATED BY &#39;\r\n&#39;;</span><br></pre></td></tr></table></figure>

<p><strong>使用mysqldump备份和恢复</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 导出表</span><br><span class="line">mysqldump -u root -p --no-create-info --tab&#x3D;&#x2F;tmp RUNOOB runoob_tbl</span><br><span class="line"></span><br><span class="line"># 导出数据库</span><br><span class="line">mysqldump -u root -p RUNOOB &gt; database_dump.txt</span><br><span class="line"></span><br><span class="line"># 导出所有数据库</span><br><span class="line">mysqldump -u root -p --all-databases &gt; database_dump.txt</span><br><span class="line"></span><br><span class="line"># 远程导出</span><br><span class="line">mysqldump -h other-host.com -P port -u root -p database_name &gt; dump.txt</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 导入数据</span><br><span class="line">mysql -u root -p database_name &lt; dump.txt</span><br><span class="line"></span><br><span class="line"># 远程导入</span><br><span class="line">mysqldump -u root -p database_name | mysql -h other-host.com database_name</span><br></pre></td></tr></table></figure>



<h2 id="安全性问题"><a href="#安全性问题" class="headerlink" title="安全性问题"></a>安全性问题</h2><p><strong>SQL注入</strong></p>
<p>​        通过把SQL命令插入到Web表单递交或输入域名或页面请求的查询字符串，最终达到欺骗服务器执行恶意的SQL命令。</p>
<p><strong>解决方法</strong>    </p>
<ul>
<li>严格限定用户的输入</li>
<li>检查sql关键词</li>
</ul>
<p>一些建议</p>
<ul>
<li>永远不要信任用户的输入。对用户的输入进行校验，可以通过正则表达式，或限制长度；对单引号和 双”-“进行转换等。</li>
<li>2.永远不要使用动态拼装sql，可以使用参数化的sql或者直接使用存储过程进行数据查询存取。</li>
<li>3.永远不要使用管理员权限的数据库连接，为每个应用使用单独的权限有限的数据库连接。</li>
<li>4.不要把机密信息直接存放，加密或者hash掉密码和敏感的信息。</li>
<li>5.应用的异常信息应该给出尽可能少的提示，最好使用自定义的错误信息对原始错误信息进行包装</li>
<li>6.sql注入的检测方法一般采取辅助软件或网站平台来检测，软件一般采用sql注入检测工具jsky，网站平台就有亿思网站安全平台检测工具。MDCSOFT SCAN等。采用MDCSOFT-IPS可以有效的防御SQL注入，XSS攻击等。</li>
</ul>
<p><strong>Like语句中的注入</strong></p>
<p>​        like查询时，如果用户输入的值有”<em>“和”%”，则会出现这种情况：用户本来只是想查询”abcd</em>“，查询结果中却有”abcd_”、”abcde”、”abcdf”等等；</p>
<p><strong>解决办法</strong></p>
<p>转义匹配符号，如使用addcslashes() 函数在指定的字符前添加反斜杠。</p>
]]></content>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>cache2go学习笔记</title>
    <url>/2021/03/26/cache2go%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>​        cache2go作为一个入门级别的开源项目。cache2go 是一个 Go 的并发安全缓存库，具有到期和访问计数器的功能。带有失效性的单机缓存机制。cache2go代码简单，非常适合新手学习。</p>
<span id="more"></span>

<h1 id="1-克隆项目"><a href="#1-克隆项目" class="headerlink" title="1.克隆项目"></a>1.克隆项目</h1><p>项目地址：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL211ZXNsaS9jYWNoZTJnbw==" title="https://github.com/muesli/cache2go">https://github.com/muesli/cache2go<i class="fa fa-external-link"></i></span></p>
<p>使用git clone指令即可。</p>
<h1 id="2-运行样例"><a href="#2-运行样例" class="headerlink" title="2.运行样例"></a>2.运行样例</h1><p>​        将代码clone到喜欢的文件夹后，计入文件夹查看README.md文件。根据其中的提示，使用go run 执行mycachedapp.go文件。循行正常，可以看到如下结果。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">go run .\examples\mycachedapp\mycachedapp.go</span><br><span class="line">Found value in cache: This is a test!</span><br><span class="line">Item is not cached (anymore).</span><br><span class="line">Deleting: someKey This is a test! 2021-03-18 23:55:05.8153461 +0800 CST m&#x3D;+6.004047501</span><br></pre></td></tr></table></figure>

<p>对照输出结果查看元mycachedapp代码。</p>
<p>​            首先是引包。可以看到，样例共使用了三个包。其中<code>fmt</code> <code>time</code> 为官方提供的包，很熟悉了。<code>cache2go</code>为cache2go正是为我们要学习的包，可以暂且不管。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">  <span class="string">&quot;fmt&quot;</span></span><br><span class="line">  <span class="string">&quot;time&quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="string">&quot;github.com/muesli/cache2go&quot;</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>​            第二部分是一个结构体类型的声明，包含text string类型，moreData byte切片两个字段。上方注释说，在cache2go中，键和值可以是任意类型。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Keys &amp; values in cache2go can be of arbitrary types, e.g. a struct.</span></span><br><span class="line"><span class="keyword">type</span> myStruct <span class="keyword">struct</span> &#123;</span><br><span class="line">  text     <span class="keyword">string</span></span><br><span class="line">  moreData []<span class="keyword">byte</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​        最后就是主函数了。粗略浏览一番。大概执行流程如下:</p>
<ol>
<li>获取一个缓存表实例     在第一次访问一个新的缓存表时将会创建它。</li>
<li>创建一个myStruct实例val，text字段填入 <code>This is  a test!</code>， moreData字段填入空字节切片。</li>
<li>将刚创建的结构体实例送入cache中，设置键名为 <code>somekey</code> ，超时时间为5秒，使用指针传递结构体。</li>
<li>从缓存中获取key为<code>somekey</code>的值，返回res和err，根据err不同输出不同的提示。</li>
<li>延时6秒，重复4的操作。</li>
<li>再次将val加入到缓存中，超时时间内使用0，表示永不失效。</li>
<li>为缓存注册一个删除时触发的回调函数，打印出删除报告，包括被删除键的信息。</li>
<li>删除cache中键为somekey的元素。</li>
<li>最后清理缓存。</li>
</ol>
<p>​        代码大致意思搞懂就行了，应该没有什么障碍。大致了解流程后，就可以结合输出捋一捋代码实现的功能是否和我们理解的一样。也可以尝试修改一些地方看看，能不能达到自己想要的效果。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  <span class="comment">// Accessing a new cache table for the first time will create it.</span></span><br><span class="line">  cache := cache2go.Cache(<span class="string">&quot;myCache&quot;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// We will put a new item in the cache. It will expire after</span></span><br><span class="line">  <span class="comment">// not being accessed via Value(key) for more than 5 seconds.</span></span><br><span class="line">  val := myStruct&#123;<span class="string">&quot;This is a test!&quot;</span>, []<span class="keyword">byte</span>&#123;&#125;&#125;</span><br><span class="line">  cache.Add(<span class="string">&quot;someKey&quot;</span>, <span class="number">5</span>*time.Second, &amp;val)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Let&#x27;s retrieve the item from the cache.</span></span><br><span class="line">  res, err := cache.Value(<span class="string">&quot;someKey&quot;</span>)</span><br><span class="line">  <span class="keyword">if</span> err == <span class="literal">nil</span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;Found value in cache:&quot;</span>, res.Data().(*myStruct).text)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;Error retrieving value from cache:&quot;</span>, err)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Wait for the item to expire in cache.</span></span><br><span class="line">  time.Sleep(<span class="number">6</span> * time.Second)</span><br><span class="line">  res, err = cache.Value(<span class="string">&quot;someKey&quot;</span>)</span><br><span class="line">  <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;Item is not cached (anymore).&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Add another item that never expires.</span></span><br><span class="line">  cache.Add(<span class="string">&quot;someKey&quot;</span>, <span class="number">0</span>, &amp;val)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// cache2go supports a few handy callbacks and loading mechanisms.</span></span><br><span class="line">  cache.SetAboutToDeleteItemCallback(<span class="function"><span class="keyword">func</span><span class="params">(e *cache2go.CacheItem)</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;Deleting:&quot;</span>, e.Key(), e.Data().(*myStruct).text, e.CreatedOn())</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Remove the item from the cache.</span></span><br><span class="line">  cache.Delete(<span class="string">&quot;someKey&quot;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// And wipe the entire cache table.</span></span><br><span class="line">  cache.Flush()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="3-开始啃源码"><a href="#3-开始啃源码" class="headerlink" title="3.开始啃源码"></a>3.开始啃源码</h1><p>​        可以看到，样例代码中所有的操作都围绕者cache展开，也就是我们的缓存表。不妨就从这里开始吧。追踪<code>cache2go.Cache(&quot;myCache&quot;)</code>函数。这个函数返回一个已经存在的cache表或者表不存在时创建一个(单例模式)。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Cache returns the existing cache table with given name or creates a new one</span></span><br><span class="line"><span class="comment">// if the table does not exist yet.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Cache</span><span class="params">(table <span class="keyword">string</span>)</span> *<span class="title">CacheTable</span></span> </span><br></pre></td></tr></table></figure>

<h2 id="CacheTable类"><a href="#CacheTable类" class="headerlink" title="CacheTable类"></a>CacheTable类</h2><h3 id="类结构"><a href="#类结构" class="headerlink" title="类结构"></a>类结构</h3><p>可以看到CacheTable是一个结构体。字段如下：</p>
<ul>
<li>读写锁</li>
<li>name 表名</li>
<li>items 存放缓存元素的map</li>
<li>cleanupTimer 用于触发清理的定时器</li>
<li>clearnupInterval 当前时间</li>
<li>logger 用于答应信息的logger</li>
<li>loadData 加载不存在数据时触发的回调函数的切片</li>
<li>addedItem 先缓存中加入新元素时触发的回调函数的切片</li>
<li>aboutToDeleteItem 删除元素之前触发的回调函数的切片</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// CacheTable is a table within the cache</span></span><br><span class="line"><span class="keyword">type</span> CacheTable <span class="keyword">struct</span> &#123;</span><br><span class="line">  sync.RWMutex</span><br><span class="line"></span><br><span class="line">  <span class="comment">// The table&#x27;s name.</span></span><br><span class="line">  name <span class="keyword">string</span></span><br><span class="line">  <span class="comment">// All cached items.</span></span><br><span class="line">  items <span class="keyword">map</span>[<span class="keyword">interface</span>&#123;&#125;]*CacheItem</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Timer responsible for triggering cleanup.</span></span><br><span class="line">  cleanupTimer *time.Timer</span><br><span class="line">  <span class="comment">// Current timer duration.</span></span><br><span class="line">  cleanupInterval time.Duration</span><br><span class="line"></span><br><span class="line">  <span class="comment">// The logger used for this table.</span></span><br><span class="line">  logger *log.Logger</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Callback method triggered when trying to load a non-existing key.</span></span><br><span class="line">  loadData <span class="function"><span class="keyword">func</span><span class="params">(key <span class="keyword">interface</span>&#123;&#125;, args ...<span class="keyword">interface</span>&#123;&#125;)</span> *<span class="title">CacheItem</span></span></span><br><span class="line">  <span class="comment">// Callback method triggered when adding a new item to the cache.</span></span><br><span class="line">  addedItem []<span class="function"><span class="keyword">func</span><span class="params">(item *CacheItem)</span></span></span><br><span class="line">  <span class="comment">// Callback method triggered before deleting an item from the cache.</span></span><br><span class="line">  aboutToDeleteItem []<span class="function"><span class="keyword">func</span><span class="params">(item *CacheItem)</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Count方法"><a href="#Count方法" class="headerlink" title="Count方法"></a>Count方法</h3><p>获取缓存表中键值对的数量，使用读锁进行保护。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Count returns how many items are currently stored in the cache.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(table *CacheTable)</span> <span class="title">Count</span><span class="params">()</span> <span class="title">int</span></span> &#123;</span><br><span class="line">  table.RLock()</span><br><span class="line">  <span class="keyword">defer</span> table.RUnlock()</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">len</span>(table.items)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Foreach方法"><a href="#Foreach方法" class="headerlink" title="*Foreach方法"></a>*Foreach方法</h3><p>对缓存表中所有方法执行trans函数，函数参数key，item。使用读锁进行保护。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Foreach all items</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(table *CacheTable)</span> <span class="title">Foreach</span><span class="params">(trans <span class="keyword">func</span>(key <span class="keyword">interface</span>&#123;&#125;, item *CacheItem)</span>)</span> &#123;</span><br><span class="line">  table.RLock()</span><br><span class="line">  <span class="keyword">defer</span> table.RUnlock()</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> k, v := <span class="keyword">range</span> table.items &#123;</span><br><span class="line">    trans(k, v)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="SetDataLoader方法"><a href="#SetDataLoader方法" class="headerlink" title="*SetDataLoader方法"></a>*SetDataLoader方法</h3><p>批量设置数据加载不存在键值对时触发的回调函数，使用写锁进行保护。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// SetDataLoader configures a data-loader callback, which will be called when</span></span><br><span class="line"><span class="comment">// trying to access a non-existing key. The key and 0...n additional arguments</span></span><br><span class="line"><span class="comment">// are passed to the callback function.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(table *CacheTable)</span> <span class="title">SetDataLoader</span><span class="params">(f <span class="keyword">func</span>(<span class="keyword">interface</span>&#123;&#125;, ...<span class="keyword">interface</span>&#123;&#125;)</span> *<span class="title">CacheItem</span>)</span> &#123;</span><br><span class="line">  table.Lock()</span><br><span class="line">  <span class="keyword">defer</span> table.Unlock()</span><br><span class="line">  table.loadData = f</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="SetAddedItemCallback方法"><a href="#SetAddedItemCallback方法" class="headerlink" title="SetAddedItemCallback方法"></a>SetAddedItemCallback方法</h3><p>设置新元素加载完成后触发的回调函数。如过已经存在，则使用RemoveAddedItemCallbacks方法清空后再添加。使用写锁进行保护。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// SetAddedItemCallback configures a callback, which will be called every time</span></span><br><span class="line"><span class="comment">// a new item is added to the cache.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(table *CacheTable)</span> <span class="title">SetAddedItemCallback</span><span class="params">(f <span class="keyword">func</span>(*CacheItem)</span>)</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> <span class="built_in">len</span>(table.addedItem) &gt; <span class="number">0</span> &#123;</span><br><span class="line">    table.RemoveAddedItemCallbacks()</span><br><span class="line">  &#125;</span><br><span class="line">  table.Lock()</span><br><span class="line">  <span class="keyword">defer</span> table.Unlock()</span><br><span class="line">  table.addedItem = <span class="built_in">append</span>(table.addedItem, f)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="AddAddedItemCallback方法"><a href="#AddAddedItemCallback方法" class="headerlink" title="AddAddedItemCallback方法"></a>AddAddedItemCallback方法</h3><p>添加新元素加载完成后触发的回调函数。使用写锁进行保护。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">//AddAddedItemCallback appends a new callback to the addedItem queue</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(table *CacheTable)</span> <span class="title">AddAddedItemCallback</span><span class="params">(f <span class="keyword">func</span>(*CacheItem)</span>)</span> &#123;</span><br><span class="line">  table.Lock()</span><br><span class="line">  <span class="keyword">defer</span> table.Unlock()</span><br><span class="line">  table.addedItem = <span class="built_in">append</span>(table.addedItem, f)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="RemoveAddedItemCallbacks方法"><a href="#RemoveAddedItemCallbacks方法" class="headerlink" title="RemoveAddedItemCallbacks方法"></a>RemoveAddedItemCallbacks方法</h3><p>移除所有新元素加载完成后触发的回调函数。使用写锁进行保护。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// RemoveAddedItemCallbacks empties the added item callback queue</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(table *CacheTable)</span> <span class="title">RemoveAddedItemCallbacks</span><span class="params">()</span></span> &#123;</span><br><span class="line">  table.Lock()</span><br><span class="line">  <span class="keyword">defer</span> table.Unlock()</span><br><span class="line">  table.addedItem = <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="SetAboutToDeleteItemCallback方法"><a href="#SetAboutToDeleteItemCallback方法" class="headerlink" title="SetAboutToDeleteItemCallback方法"></a>SetAboutToDeleteItemCallback方法</h3><p>设置元素删除时触发的回调函数。如过已经存在，则使用RemoveAboutToDeleteItemCallback方法清空后再添加。使用写锁进行保护。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// SetAboutToDeleteItemCallback configures a callback, which will be called</span></span><br><span class="line"><span class="comment">// every time an item is about to be removed from the cache.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(table *CacheTable)</span> <span class="title">SetAboutToDeleteItemCallback</span><span class="params">(f <span class="keyword">func</span>(*CacheItem)</span>)</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> <span class="built_in">len</span>(table.aboutToDeleteItem) &gt; <span class="number">0</span> &#123;</span><br><span class="line">    table.RemoveAboutToDeleteItemCallback()</span><br><span class="line">  &#125;</span><br><span class="line">  table.Lock()</span><br><span class="line">  <span class="keyword">defer</span> table.Unlock()</span><br><span class="line">  table.aboutToDeleteItem = <span class="built_in">append</span>(table.aboutToDeleteItem, f)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="AddAboutToDeleteItemCallback方法"><a href="#AddAboutToDeleteItemCallback方法" class="headerlink" title="AddAboutToDeleteItemCallback方法"></a>AddAboutToDeleteItemCallback方法</h3><p>添加元素删除时触发的回调函数。使用写锁进行保护。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// AddAboutToDeleteItemCallback appends a new callback to the AboutToDeleteItem queue</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(table *CacheTable)</span> <span class="title">AddAboutToDeleteItemCallback</span><span class="params">(f <span class="keyword">func</span>(*CacheItem)</span>)</span> &#123;</span><br><span class="line">  table.Lock()</span><br><span class="line">  <span class="keyword">defer</span> table.Unlock()</span><br><span class="line">  table.aboutToDeleteItem = <span class="built_in">append</span>(table.aboutToDeleteItem, f)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="RemoveAboutToDeleteItemCallback方法"><a href="#RemoveAboutToDeleteItemCallback方法" class="headerlink" title="RemoveAboutToDeleteItemCallback方法"></a>RemoveAboutToDeleteItemCallback方法</h3><p>移除所有元素删除时触发的回调函数。使用写锁进行保护。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// RemoveAboutToDeleteItemCallback empties the about to delete item callback queue</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(table *CacheTable)</span> <span class="title">RemoveAboutToDeleteItemCallback</span><span class="params">()</span></span> &#123;</span><br><span class="line">  table.Lock()</span><br><span class="line">  <span class="keyword">defer</span> table.Unlock()</span><br><span class="line">  table.aboutToDeleteItem = <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>设置日志记录器，使用策略模式。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// SetLogger sets the logger to be used by this cache table.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(table *CacheTable)</span> <span class="title">SetLogger</span><span class="params">(logger *log.Logger)</span></span> &#123;</span><br><span class="line">  table.Lock()</span><br><span class="line">  <span class="keyword">defer</span> table.Unlock()</span><br><span class="line">  table.logger = logger</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="expirationCheck方法"><a href="#expirationCheck方法" class="headerlink" title="*expirationCheck方法"></a>*expirationCheck方法</h3><p>超期检测循环，有一个自校准定时器触发。核心方法之一。</p>
<p>流程</p>
<ol>
<li>加写锁</li>
<li>停止定时器</li>
<li>检擦是否注册了超期检测时钟，如果注册了，记录日志还有多久将进行清除检测。如果没有，记录日志，进行清除检测注册。</li>
<li>校准当前时间。提高计时精度。</li>
<li>遍历缓存表，使用now.Sub(accessedOn) &gt;= lifeSpan作为判断依据判断元素是否超期，超期则调用deleteInternal方法删除元素。同时找出未超期元素中，距离超期时间最短的一个(存在一定的误差)。</li>
<li>如果最短超期时间大于0，注册定时器，超期时候触发协程，调用expirationCheck方法进行检测。</li>
</ol>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Expiration check loop, triggered by a self-adjusting timer.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(table *CacheTable)</span> <span class="title">expirationCheck</span><span class="params">()</span></span> &#123;</span><br><span class="line">  table.Lock()</span><br><span class="line">  <span class="keyword">if</span> table.cleanupTimer != <span class="literal">nil</span> &#123;</span><br><span class="line">    table.cleanupTimer.Stop()</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> table.cleanupInterval &gt; <span class="number">0</span> &#123;</span><br><span class="line">    table.log(<span class="string">&quot;Expiration check triggered after&quot;</span>, table.cleanupInterval, <span class="string">&quot;for table&quot;</span>, table.name)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    table.log(<span class="string">&quot;Expiration check installed for table&quot;</span>, table.name)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// To be more accurate with timers, we would need to update &#x27;now&#x27; on every</span></span><br><span class="line">  <span class="comment">// loop iteration. Not sure it&#x27;s really efficient though.</span></span><br><span class="line">  now := time.Now()</span><br><span class="line">  smallestDuration := <span class="number">0</span> * time.Second</span><br><span class="line">  <span class="keyword">for</span> key, item := <span class="keyword">range</span> table.items &#123;</span><br><span class="line">    <span class="comment">// Cache values so we don&#x27;t keep blocking the mutex.</span></span><br><span class="line">    item.RLock()</span><br><span class="line">    lifeSpan := item.lifeSpan</span><br><span class="line">    accessedOn := item.accessedOn</span><br><span class="line">    item.RUnlock()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> lifeSpan == <span class="number">0</span> &#123;</span><br><span class="line">      <span class="keyword">continue</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> now.Sub(accessedOn) &gt;= lifeSpan &#123;</span><br><span class="line">      <span class="comment">// Item has excessed its lifespan.</span></span><br><span class="line">      table.deleteInternal(key)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// Find the item chronologically closest to its end-of-lifespan.</span></span><br><span class="line">      <span class="keyword">if</span> smallestDuration == <span class="number">0</span> || lifeSpan-now.Sub(accessedOn) &lt; smallestDuration &#123;</span><br><span class="line">        smallestDuration = lifeSpan - now.Sub(accessedOn)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Setup the interval for the next cleanup run.</span></span><br><span class="line">  table.cleanupInterval = smallestDuration</span><br><span class="line">  <span class="keyword">if</span> smallestDuration &gt; <span class="number">0</span> &#123;</span><br><span class="line">    table.cleanupTimer = time.AfterFunc(smallestDuration, <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">      <span class="keyword">go</span> table.expirationCheck()</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  table.Unlock()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="addInternalf方法"><a href="#addInternalf方法" class="headerlink" title="*addInternalf方法"></a>*addInternalf方法</h3><p>为缓存表添加元素。必须在加写锁状态下执行，因为方法内进行了解锁操作。方法执行流程：</p>
<p>1.触发日志，记录添加元素的信息。</p>
<p>2.记录清理间隔时间和添加元素时触发的回调函数，然后解除写锁。</p>
<p>3.执行所有已经注册的回调函数。</p>
<p>4.如果新元素有超期时间，并且缓存表还未注册定时器或新元素生命周期短于超期间隔，则执行超期检测方法。expirationCheck</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(table *CacheTable)</span> <span class="title">addInternal</span><span class="params">(item *CacheItem)</span></span> &#123;</span><br><span class="line">  <span class="comment">// Careful: do not run this method unless the table-mutex is locked!</span></span><br><span class="line">  <span class="comment">// It will unlock it for the caller before running the callbacks and checks</span></span><br><span class="line">  table.log(<span class="string">&quot;Adding item with key&quot;</span>, item.key, <span class="string">&quot;and lifespan of&quot;</span>, item.lifeSpan, <span class="string">&quot;to table&quot;</span>, table.name)</span><br><span class="line">  table.items[item.key] = item</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Cache values so we don&#x27;t keep blocking the mutex.</span></span><br><span class="line">  expDur := table.cleanupInterval</span><br><span class="line">  addedItem := table.addedItem</span><br><span class="line">  table.Unlock()</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Trigger callback after adding an item to cache.</span></span><br><span class="line">  <span class="keyword">if</span> addedItem != <span class="literal">nil</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> _, callback := <span class="keyword">range</span> addedItem &#123;</span><br><span class="line">      callback(item)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// If we haven&#x27;t set up any expiration check timer or found a more imminent item.</span></span><br><span class="line">  <span class="keyword">if</span> item.lifeSpan &gt; <span class="number">0</span> &amp;&amp; (expDur == <span class="number">0</span> || item.lifeSpan &lt; expDur) &#123;</span><br><span class="line">    table.expirationCheck()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Add方法"><a href="#Add方法" class="headerlink" title="Add方法"></a>Add方法</h3><p>向缓存表中添加元素。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Add adds a key/value pair to the cache.</span></span><br><span class="line"><span class="comment">// Parameter key is the item&#x27;s cache-key.</span></span><br><span class="line"><span class="comment">// Parameter lifeSpan determines after which time period without an access the item</span></span><br><span class="line"><span class="comment">// will get removed from the cache.</span></span><br><span class="line"><span class="comment">// Parameter data is the item&#x27;s value.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(table *CacheTable)</span> <span class="title">Add</span><span class="params">(key <span class="keyword">interface</span>&#123;&#125;, lifeSpan time.Duration, data <span class="keyword">interface</span>&#123;&#125;)</span> *<span class="title">CacheItem</span></span> &#123;</span><br><span class="line">  item := NewCacheItem(key, lifeSpan, data)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Add item to cache.</span></span><br><span class="line">  table.Lock()</span><br><span class="line">  table.addInternal(item)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> item</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="deleteInternal方法"><a href="#deleteInternal方法" class="headerlink" title="*deleteInternal方法"></a>*deleteInternal方法</h3><p>删除CacheItem元素，需要在缓存表加写锁状态下执行。方法流程</p>
<ol>
<li>获取键对应CacheItem元素，判断是否存在，不存在则返回错误</li>
<li>记录删除回调函数 ，并解锁。</li>
<li>执行删除回调函数。</li>
<li>给CacheItem元素上读锁，延迟解除读锁。</li>
<li>检查元素是否有超期回调函数，有责执行。</li>
<li>给表上写锁，触发日志记录，记录删除元素信息。</li>
<li>删除元素。</li>
</ol>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(table *CacheTable)</span> <span class="title">deleteInternal</span><span class="params">(key <span class="keyword">interface</span>&#123;&#125;)</span> <span class="params">(*CacheItem, error)</span></span> &#123;</span><br><span class="line">  r, ok := table.items[key]</span><br><span class="line">  <span class="keyword">if</span> !ok &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span>, ErrKeyNotFound</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Cache value so we don&#x27;t keep blocking the mutex.</span></span><br><span class="line">  aboutToDeleteItem := table.aboutToDeleteItem</span><br><span class="line">  table.Unlock()</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Trigger callbacks before deleting an item from cache.</span></span><br><span class="line">  <span class="keyword">if</span> aboutToDeleteItem != <span class="literal">nil</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> _, callback := <span class="keyword">range</span> aboutToDeleteItem &#123;</span><br><span class="line">      callback(r)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  r.RLock()</span><br><span class="line">  <span class="keyword">defer</span> r.RUnlock()</span><br><span class="line">  <span class="keyword">if</span> r.aboutToExpire != <span class="literal">nil</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> _, callback := <span class="keyword">range</span> r.aboutToExpire &#123;</span><br><span class="line">      callback(key)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  table.Lock()</span><br><span class="line">  table.log(<span class="string">&quot;Deleting item with key&quot;</span>, key, <span class="string">&quot;created on&quot;</span>, r.createdOn, <span class="string">&quot;and hit&quot;</span>, r.accessCount, <span class="string">&quot;times from table&quot;</span>, table.name)</span><br><span class="line">  <span class="built_in">delete</span>(table.items, key)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> r, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Delete方法"><a href="#Delete方法" class="headerlink" title="Delete方法"></a>Delete方法</h3><p>调用deleteInternal方法删除CacheItem，返回被删除元素指针，和错误信息。使用写锁保护。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Delete an item from the cache.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(table *CacheTable)</span> <span class="title">Delete</span><span class="params">(key <span class="keyword">interface</span>&#123;&#125;)</span> <span class="params">(*CacheItem, error)</span></span> &#123;</span><br><span class="line">  table.Lock()</span><br><span class="line">  <span class="keyword">defer</span> table.Unlock()</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> table.deleteInternal(key)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Exists方法"><a href="#Exists方法" class="headerlink" title="Exists方法"></a>Exists方法</h3><p>判断对应key的CacheItem是否存在，使用读锁进行保护。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Exists returns whether an item exists in the cache. Unlike the Value method</span></span><br><span class="line"><span class="comment">// Exists neither tries to fetch data via the loadData callback nor does it</span></span><br><span class="line"><span class="comment">// keep the item alive in the cache.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(table *CacheTable)</span> <span class="title">Exists</span><span class="params">(key <span class="keyword">interface</span>&#123;&#125;)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">  table.RLock()</span><br><span class="line">  <span class="keyword">defer</span> table.RUnlock()</span><br><span class="line">  _, ok := table.items[key]</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> ok</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="NotFoundAdd方法"><a href="#NotFoundAdd方法" class="headerlink" title="NotFoundAdd方法"></a>NotFoundAdd方法</h3><p>判断是否存在对应key的CaacheItem，如果存在返回false，不存在添加CacheItem并返回true。使用写锁进行保护。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// NotFoundAdd checks whether an item is not yet cached. Unlike the Exists</span></span><br><span class="line"><span class="comment">// method this also adds data if the key could not be found.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(table *CacheTable)</span> <span class="title">NotFoundAdd</span><span class="params">(key <span class="keyword">interface</span>&#123;&#125;, lifeSpan time.Duration, data <span class="keyword">interface</span>&#123;&#125;)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">  table.Lock()</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> _, ok := table.items[key]; ok &#123;</span><br><span class="line">    table.Unlock()</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  item := NewCacheItem(key, lifeSpan, data)</span><br><span class="line">  table.addInternal(item)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Value方法"><a href="#Value方法" class="headerlink" title="Value方法"></a>Value方法</h3><p>根据key获取CacheItem，刷新超期时间。如果CacheItem不存在，触发loadData函数，可以为loadData传入参数。如果CacheItem不存在，会根据情况返回错误信息。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Value returns an item from the cache and marks it to be kept alive. You can</span></span><br><span class="line"><span class="comment">// pass additional arguments to your DataLoader callback function.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(table *CacheTable)</span> <span class="title">Value</span><span class="params">(key <span class="keyword">interface</span>&#123;&#125;, args ...<span class="keyword">interface</span>&#123;&#125;)</span> <span class="params">(*CacheItem, error)</span></span> &#123;</span><br><span class="line">  table.RLock()</span><br><span class="line">  r, ok := table.items[key]</span><br><span class="line">  loadData := table.loadData</span><br><span class="line">  table.RUnlock()</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ok &#123;</span><br><span class="line">    <span class="comment">// Update access counter and timestamp.</span></span><br><span class="line">    r.KeepAlive()</span><br><span class="line">    <span class="keyword">return</span> r, <span class="literal">nil</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Item doesn&#x27;t exist in cache. Try and fetch it with a data-loader.</span></span><br><span class="line">  <span class="keyword">if</span> loadData != <span class="literal">nil</span> &#123;</span><br><span class="line">    item := loadData(key, args...)</span><br><span class="line">    <span class="keyword">if</span> item != <span class="literal">nil</span> &#123;</span><br><span class="line">      table.Add(key, item.lifeSpan, item.data)</span><br><span class="line">      <span class="keyword">return</span> item, <span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span>, ErrKeyNotFoundOrLoadable</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">nil</span>, ErrKeyNotFound</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="Flush方法"><a href="#Flush方法" class="headerlink" title="Flush方法"></a>Flush方法</h3><p>刷新缓存表，清除表中所有数据。使用写锁保护。会重置清除间隔时间，停止定时器，记录日志。但不会清理已经注册的回调函数。数据清空使用新建map方式，让GC自动回收原来的数据。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Flush deletes all items from this cache table.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(table *CacheTable)</span> <span class="title">Flush</span><span class="params">()</span></span> &#123;</span><br><span class="line">  table.Lock()</span><br><span class="line">  <span class="keyword">defer</span> table.Unlock()</span><br><span class="line"></span><br><span class="line">  table.log(<span class="string">&quot;Flushing table&quot;</span>, table.name)</span><br><span class="line"></span><br><span class="line">  table.items = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">interface</span>&#123;&#125;]*CacheItem)</span><br><span class="line">  table.cleanupInterval = <span class="number">0</span></span><br><span class="line">  <span class="keyword">if</span> table.cleanupTimer != <span class="literal">nil</span> &#123;</span><br><span class="line">    table.cleanupTimer.Stop()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="MostAccessed方法"><a href="#MostAccessed方法" class="headerlink" title="*MostAccessed方法"></a>*MostAccessed方法</h3><p>获取热点CacheItem列表，使用sort.sort方法实现。采用读锁进行数据保护。实现方法:</p>
<p>声明CacheItemPair和CacheItemPairList结构体，为CacheItemPairList实现sort.Interface接口，是之可以调用Sort方法。具体步骤：</p>
<ol>
<li>对缓存表加读锁，延迟解锁。</li>
<li>拷贝所有的key和访问次数，存入CacheItemPairList中</li>
<li>对CacheItemPairList进行由大到小排序。</li>
<li>遍历CacheItemPairList，取出所有访问次数大于c的key，根据key构建 r []*CacheItem。</li>
<li>返回r</li>
</ol>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// CacheItemPair maps key to access counter</span></span><br><span class="line"><span class="keyword">type</span> CacheItemPair <span class="keyword">struct</span> &#123;</span><br><span class="line">  Key         <span class="keyword">interface</span>&#123;&#125;</span><br><span class="line">  AccessCount <span class="keyword">int64</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// CacheItemPairList is a slice of CacheItemPairs that implements sort.</span></span><br><span class="line"><span class="comment">// Interface to sort by AccessCount.</span></span><br><span class="line"><span class="keyword">type</span> CacheItemPairList []CacheItemPair</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p CacheItemPairList)</span> <span class="title">Swap</span><span class="params">(i, j <span class="keyword">int</span>)</span></span>      &#123; p[i], p[j] = p[j], p[i] &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p CacheItemPairList)</span> <span class="title">Len</span><span class="params">()</span> <span class="title">int</span></span>           &#123; <span class="keyword">return</span> <span class="built_in">len</span>(p) &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p CacheItemPairList)</span> <span class="title">Less</span><span class="params">(i, j <span class="keyword">int</span>)</span> <span class="title">bool</span></span> &#123; <span class="keyword">return</span> p[i].AccessCount &gt; p[j].AccessCount &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// MostAccessed returns the most accessed items in this cache table</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(table *CacheTable)</span> <span class="title">MostAccessed</span><span class="params">(count <span class="keyword">int64</span>)</span> []*<span class="title">CacheItem</span></span> &#123;</span><br><span class="line">  table.RLock()</span><br><span class="line">  <span class="keyword">defer</span> table.RUnlock()</span><br><span class="line"></span><br><span class="line">  p := <span class="built_in">make</span>(CacheItemPairList, <span class="built_in">len</span>(table.items))</span><br><span class="line">  i := <span class="number">0</span></span><br><span class="line">  <span class="keyword">for</span> k, v := <span class="keyword">range</span> table.items &#123;</span><br><span class="line">    p[i] = CacheItemPair&#123;k, v.accessCount&#125;</span><br><span class="line">    i++</span><br><span class="line">  &#125;</span><br><span class="line">  sort.Sort(p)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> r []*CacheItem</span><br><span class="line">  c := <span class="keyword">int64</span>(<span class="number">0</span>)</span><br><span class="line">  <span class="keyword">for</span> _, v := <span class="keyword">range</span> p &#123;</span><br><span class="line">    <span class="keyword">if</span> c &gt;= count &#123;</span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    item, ok := table.items[v.Key]</span><br><span class="line">    <span class="keyword">if</span> ok &#123;</span><br><span class="line">      r = <span class="built_in">append</span>(r, item)</span><br><span class="line">    &#125;</span><br><span class="line">    c++</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> r</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="log方法"><a href="#log方法" class="headerlink" title="log方法"></a>log方法</h3><p>打印log自定义的log信息</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Internal logging method for convenience.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(table *CacheTable)</span> <span class="title">log</span><span class="params">(v ...<span class="keyword">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line">  <span class="keyword">if</span> table.logger == <span class="literal">nil</span> &#123;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  table.logger.Println(v...)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="CacheItem类"><a href="#CacheItem类" class="headerlink" title="CacheItem类"></a>CacheItem类</h2><h3 id="类结构-1"><a href="#类结构-1" class="headerlink" title="类结构"></a>类结构</h3><ul>
<li>读写锁</li>
<li>key 键，接口类型 任意类型</li>
<li>data 数据，接口类型 任意类型</li>
<li>lifeSpan 生命周期，存在时长</li>
<li>createdOn 创建时间</li>
<li>accessedOn 最后一次访问时间</li>
<li>accessCount 访问次数</li>
<li>aboutToExpire 过期是触发的函数切片</li>
</ul>
<p>至此已经没有不熟悉的类了。接下来就去看看与类绑定的方法。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// CacheItem is an individual cache item</span></span><br><span class="line"><span class="comment">// Parameter data contains the user-set value in the cache.</span></span><br><span class="line"><span class="keyword">type</span> CacheItem <span class="keyword">struct</span> &#123;</span><br><span class="line">  sync.RWMutex</span><br><span class="line"></span><br><span class="line">  <span class="comment">// The item&#x27;s key.</span></span><br><span class="line">  key <span class="keyword">interface</span>&#123;&#125;</span><br><span class="line">  <span class="comment">// The item&#x27;s data.</span></span><br><span class="line">  data <span class="keyword">interface</span>&#123;&#125;</span><br><span class="line">  <span class="comment">// How long will the item live in the cache when not being accessed/kept alive.</span></span><br><span class="line">  lifeSpan time.Duration</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Creation timestamp.</span></span><br><span class="line">  createdOn time.Time</span><br><span class="line">  <span class="comment">// Last access timestamp.</span></span><br><span class="line">  accessedOn time.Time</span><br><span class="line">  <span class="comment">// How often the item was accessed.</span></span><br><span class="line">  accessCount <span class="keyword">int64</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Callback method triggered right before removing the item from the cache</span></span><br><span class="line">  aboutToExpire []<span class="function"><span class="keyword">func</span><span class="params">(key <span class="keyword">interface</span>&#123;&#125;)</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="NewCacheItem函数"><a href="#NewCacheItem函数" class="headerlink" title="NewCacheItem函数"></a>NewCacheItem函数</h3><p>根据传入参数实例化一个CacheItem对象，并返回其指针。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// NewCacheItem returns a newly created CacheItem.</span></span><br><span class="line"><span class="comment">// Parameter key is the item&#x27;s cache-key.</span></span><br><span class="line"><span class="comment">// Parameter lifeSpan determines after which time period without an access the item</span></span><br><span class="line"><span class="comment">// will get removed from the cache.</span></span><br><span class="line"><span class="comment">// Parameter data is the item&#x27;s value.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewCacheItem</span><span class="params">(key <span class="keyword">interface</span>&#123;&#125;, lifeSpan time.Duration, data <span class="keyword">interface</span>&#123;&#125;)</span> *<span class="title">CacheItem</span></span> &#123;</span><br><span class="line">  t := time.Now()</span><br><span class="line">  <span class="keyword">return</span> &amp;CacheItem&#123;</span><br><span class="line">    key:           key,</span><br><span class="line">    lifeSpan:      lifeSpan,</span><br><span class="line">    createdOn:     t,</span><br><span class="line">    accessedOn:    t,</span><br><span class="line">    accessCount:   <span class="number">0</span>,</span><br><span class="line">    aboutToExpire: <span class="literal">nil</span>,</span><br><span class="line">    data:          data,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="KeepAlive方法"><a href="#KeepAlive方法" class="headerlink" title="KeepAlive方法"></a>KeepAlive方法</h3><p>刷新CacheItem的最后一次访问时间，实现延长超时时间功能。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// KeepAlive marks an item to be kept for another expireDuration period.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(item *CacheItem)</span> <span class="title">KeepAlive</span><span class="params">()</span></span> &#123;</span><br><span class="line">  item.Lock()</span><br><span class="line">  <span class="keyword">defer</span> item.Unlock()</span><br><span class="line">  item.accessedOn = time.Now()</span><br><span class="line">  item.accessCount++</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="LifeSpan方法"><a href="#LifeSpan方法" class="headerlink" title="LifeSpan方法"></a>LifeSpan方法</h3><p>返回CacheItem的超时间隔，生命周期。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// LifeSpan returns this item&#x27;s expiration duration.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(item *CacheItem)</span> <span class="title">LifeSpan</span><span class="params">()</span> <span class="title">time</span>.<span class="title">Duration</span></span> &#123;</span><br><span class="line">  <span class="comment">// immutable</span></span><br><span class="line">  <span class="keyword">return</span> item.lifeSpan</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="AccessedOn方法"><a href="#AccessedOn方法" class="headerlink" title="AccessedOn方法"></a>AccessedOn方法</h3><p>返回CacheItem的最后一次访问时间，使用读锁进行保护。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// AccessedOn returns when this item was last accessed.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(item *CacheItem)</span> <span class="title">AccessedOn</span><span class="params">()</span> <span class="title">time</span>.<span class="title">Time</span></span> &#123;</span><br><span class="line">  item.RLock()</span><br><span class="line">  <span class="keyword">defer</span> item.RUnlock()</span><br><span class="line">  <span class="keyword">return</span> item.accessedOn</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="CreateOn方法"><a href="#CreateOn方法" class="headerlink" title="CreateOn方法"></a>CreateOn方法</h3><p>返回CacheItem的创建时间，由于不会被修改，不需要进行读写保护。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// CreatedOn returns when this item was added to the cache.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(item *CacheItem)</span> <span class="title">CreatedOn</span><span class="params">()</span> <span class="title">time</span>.<span class="title">Time</span></span> &#123;</span><br><span class="line">  <span class="comment">// immutable</span></span><br><span class="line">  <span class="keyword">return</span> item.createdOn</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="AccessCount方法"><a href="#AccessCount方法" class="headerlink" title="AccessCount方法"></a>AccessCount方法</h3><p>返回CacheItem的被访问次数，使用读锁进行保护。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// AccessCount returns how often this item has been accessed.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(item *CacheItem)</span> <span class="title">AccessCount</span><span class="params">()</span> <span class="title">int64</span></span> &#123;</span><br><span class="line">  item.RLock()</span><br><span class="line">  <span class="keyword">defer</span> item.RUnlock()</span><br><span class="line">  <span class="keyword">return</span> item.accessCount</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Key方法"><a href="#Key方法" class="headerlink" title="Key方法"></a>Key方法</h3><p>放回CacheItem的键名。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Key returns the key of this cached item.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(item *CacheItem)</span> <span class="title">Key</span><span class="params">()</span> <span class="title">interface</span></span>&#123;&#125; &#123;</span><br><span class="line">  <span class="comment">// immutable</span></span><br><span class="line">  <span class="keyword">return</span> item.key</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Data方法"><a href="#Data方法" class="headerlink" title="Data方法"></a>Data方法</h3><p>放回CacheItem的数据。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Data returns the value of this cached item.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(item *CacheItem)</span> <span class="title">Data</span><span class="params">()</span> <span class="title">interface</span></span>&#123;&#125; &#123;</span><br><span class="line">  <span class="comment">// immutable</span></span><br><span class="line">  <span class="keyword">return</span> item.data</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="SetAboutToExpireCallback方法"><a href="#SetAboutToExpireCallback方法" class="headerlink" title="SetAboutToExpireCallback方法"></a>SetAboutToExpireCallback方法</h3><p>设置CacheItem超期回调函数，使用写锁进行保护。如果已经注册了回调函数，则使用RemoveAboutToExpireCallback方法移除所有已注册方法。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// SetAboutToExpireCallback configures a callback, which will be called right</span></span><br><span class="line"><span class="comment">// before the item is about to be removed from the cache.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(item *CacheItem)</span> <span class="title">SetAboutToExpireCallback</span><span class="params">(f <span class="keyword">func</span>(<span class="keyword">interface</span>&#123;&#125;)</span>)</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> <span class="built_in">len</span>(item.aboutToExpire) &gt; <span class="number">0</span> &#123;</span><br><span class="line">    item.RemoveAboutToExpireCallback()</span><br><span class="line">  &#125;</span><br><span class="line">  item.Lock()</span><br><span class="line">  <span class="keyword">defer</span> item.Unlock()</span><br><span class="line">  item.aboutToExpire = <span class="built_in">append</span>(item.aboutToExpire, f)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="AddAboutToExpireCallback方法"><a href="#AddAboutToExpireCallback方法" class="headerlink" title="AddAboutToExpireCallback方法"></a>AddAboutToExpireCallback方法</h3><p>为CacheItem添加超期回调函数，使用写锁进行保护。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// AddAboutToExpireCallback appends a new callback to the AboutToExpire queue</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(item *CacheItem)</span> <span class="title">AddAboutToExpireCallback</span><span class="params">(f <span class="keyword">func</span>(<span class="keyword">interface</span>&#123;&#125;)</span>)</span> &#123;</span><br><span class="line">  item.Lock()</span><br><span class="line">  <span class="keyword">defer</span> item.Unlock()</span><br><span class="line">  item.aboutToExpire = <span class="built_in">append</span>(item.aboutToExpire, f)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="RemoveAboutToExpireCallback方法"><a href="#RemoveAboutToExpireCallback方法" class="headerlink" title="RemoveAboutToExpireCallback方法"></a>RemoveAboutToExpireCallback方法</h3><p>移除所有CacheItem的超期回调函数。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// RemoveAboutToExpireCallback empties the about to expire callback queue</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(item *CacheItem)</span> <span class="title">RemoveAboutToExpireCallback</span><span class="params">()</span></span> &#123;</span><br><span class="line">  item.Lock()</span><br><span class="line">  <span class="keyword">defer</span> item.Unlock()</span><br><span class="line">  item.aboutToExpire = <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="4-test"><a href="#4-test" class="headerlink" title="4.test"></a>4.test</h1><p>benchmark_test.go 测试资源占用等信息</p>
<p>cache_test.go 测试个方法功能是否正常</p>
<h1 id="5-总结"><a href="#5-总结" class="headerlink" title="5.总结"></a>5.总结</h1><p>并发条件下使用读写锁确保数据安全。确保后续代码不会执行修改删除的情况下加读锁即可。</p>
<p>可以使用方法切片注册多个回调函数。可以对回调函数合理的分割，提高代码质量。</p>
<p>工厂模式、策略模式等的正确使用可以提升代码的灵活性。</p>
<p>使用定时器迭代替代for循环。</p>
<p>time.Sleep(0)妙用：释放cpu权限。</p>
]]></content>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
</search>
